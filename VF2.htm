<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\debug\VF2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\debug\VF2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Mon Jul 24 14:21:28 2017
<BR><P>
<H3>Maximum Stack Usage =       1524 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RF_REFRESH_MACHINE_exec() &rArr; IncomingBufferParser() &rArr; SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID) &rArr; IPD_Or_PIR_ConfigCheck(unsigned char*) &rArr; RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[18]">SysTick_Handler</a>
 <LI><a href="#[240]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">MemManage_Handler</a><BR>
 <LI><a href="#[13]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">UsageFault_Handler</a><BR>
 <LI><a href="#[16]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">DebugMon_Handler</a><BR>
 <LI><a href="#[2f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[30]">BOD_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[3b]">CANActivity_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[32]">CAN_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[35]">ENET_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[25]">I2C2_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[34]">I2S_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[37]">MCPWM_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[29]">PLL0_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[39]">PLL1_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[22]">PWM1_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[38]">QEI_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[36]">RIT_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[26]">SPI_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_mps_cm3.o(i.SystemInit) referenced from cstartup_m.o(.text)
 <LI><a href="#[20]">UART2_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[3a]">USBActivity_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[31]">USB_IRQHandler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[2b]">EXTI_0_ISR()</a> from hardware_vf.o(i._Z10EXTI_0_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[2c]">EXTI_1_ISR()</a> from hardware_vf.o(i._Z10EXTI_1_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[2d]">EXTI_2_ISR()</a> from rf_isr.o(i._Z10EXTI_2_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[2e]">EXTI_3_ISR()</a> from hardware_vf.o(i._Z10EXTI_3_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[125]">I2CManager(void*)</a> from i2c_manager_task.o(i._Z10I2CManagerPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[84]">Video_exec()</a> from videohandler.o(i._Z10Video_execv) referenced from videohandler.o(i._Z10Video_execv)
 <LI><a href="#[84]">Video_exec()</a> from videohandler.o(i._Z10Video_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[84]">Video_exec()</a> from videohandler.o(i._Z10Video_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[e5]">learnInput(int, int, int*, void*)</a> from kpdprogs.o(i._Z10learnInputiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[d9]">learnPerif(int, int, int*, void*)</a> from kpdprogs.o(i._Z10learnPerifiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[e6]">learnSiren(int, int, int*, void*)</a> from kpdprogs.o(i._Z10learnSireniiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[e3]">progDimmer(int, int, int*, void*)</a> from kpdprogs.o(i._Z10progDimmeriiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[f2]">progGsmLed(int, int, int*, void*)</a> from kpdprogs.o(i._Z10progGsmLediiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[e2]">progPinArm(int, int, int*, void*)</a> from kpdprogs.o(i._Z10progPinArmiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[135]">CPUIManager(void*)</a> from cpui_task_manager.o(i._Z11CPUIManagerPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[180]">ChimeAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z11ChimeActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[108]">FL_RKP_read(unsigned char)</a> from fl_types.o(i._Z11FL_RKP_readh) referenced from rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
 <LI><a href="#[86]">LISTEN_exec()</a> from listen.o(i._Z11LISTEN_execv) referenced 2 times from listen.o(i._Z11LISTEN_execv)
 <LI><a href="#[86]">LISTEN_exec()</a> from listen.o(i._Z11LISTEN_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[86]">LISTEN_exec()</a> from listen.o(i._Z11LISTEN_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[86]">LISTEN_exec()</a> from listen.o(i._Z11LISTEN_execv) referenced from link.o(i._Z9LINK_execv)
 <LI><a href="#[8c]">PDA_ReadMsg()</a> from m_pdaprocess.o(i._Z11PDA_ReadMsgv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[8c]">PDA_ReadMsg()</a> from m_pdaprocess.o(i._Z11PDA_ReadMsgv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[8c]">PDA_ReadMsg()</a> from m_pdaprocess.o(i._Z11PDA_ReadMsgv) referenced from scheduler.o(i._Z24Scheduler_PlugoutActionsv)
 <LI><a href="#[11b]">PanicAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z11PanicActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[68]">RAM_DB_exec()</a> from ram_db.o(i._Z11RAM_DB_execv) referenced from ram_db.o(i._Z11RAM_DB_execv)
 <LI><a href="#[68]">RAM_DB_exec()</a> from ram_db.o(i._Z11RAM_DB_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[68]">RAM_DB_exec()</a> from ram_db.o(i._Z11RAM_DB_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[28]">SSP1Handler()</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[1a]">TIMER_0_ISR()</a> from hw_timer_api.o(i._Z11TIMER_0_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[1b]">TIMER_1_ISR()</a> from hw_timer_api.o(i._Z11TIMER_1_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[1c]">TIMER_2_ISR()</a> from hw_timer_api.o(i._Z11TIMER_2_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[1d]">TIMER_3_ISR()</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[131]">TestManager(void*)</a> from test_task.o(i._Z11TestManagerPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[1ba]">Test_Tamper(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z11Test_TamperPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[123]">UartManager(void*)</a> from uart_manager_task.o(i._Z11UartManagerPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[d8]">learnKeyFob(int, int, int*, void*)</a> from kpdprogs.o(i._Z11learnKeyFobiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[10e]">A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)</a> from m_a2g.o(i._Z12A2G_WriteMsghPht) referenced from init.o(i._Z9Init_execv)
 <LI><a href="#[113]">DisarmAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z12DisarmActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[133]">FlashManager(void*)</a> from flash_manager_task.o(i._Z12FlashManagerPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[116]">PerArmAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z12PerArmActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[4]">RejectOption(unsigned char)</a> from gsm_comm.o(i._Z12RejectOptionh) referenced 2 times from gsm_comm.o(.data)
 <LI><a href="#[ab]">SendRfParams()</a> from sendrfparameters.o(i._Z12SendRfParamsv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[ab]">SendRfParams()</a> from sendrfparameters.o(i._Z12SendRfParamsv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[1bb]">Test_GetRSSI(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z12Test_GetRSSIPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1a4]">Test_ReadRTC(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z12Test_ReadRTCPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[d7]">progEditUser(int, int, int*, void*)</a> from kpdprogs.o(i._Z12progEditUseriiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[dd]">progExitTime(int, int, int*, void*)</a> from kpdprogs.o(i._Z12progExitTimeiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[da]">progLearnTag(int, int, int*, void*)</a> from kpdprogs.o(i._Z12progLearnTagiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[186]">CallCmsAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z13CallCmsActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[109]">FL_SIREN_read(unsigned char)</a> from fl_types.o(i._Z13FL_SIREN_readh) referenced from rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
 <LI><a href="#[1b7]">GetPanelSwVer(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z13GetPanelSwVerPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[74]">LOG_init_exec()</a> from log.o(i._Z13LOG_init_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[74]">LOG_init_exec()</a> from log.o(i._Z13LOG_init_execv) referenced from log.o(i._Z13LOG_init_execv)
 <LI><a href="#[74]">LOG_init_exec()</a> from log.o(i._Z13LOG_init_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[11c]">OutCallAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z13OutCallActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[52]">RingTone_exec()</a> from control_panel.o(i._Z13RingTone_execv) referenced from control_panel.o(i._Z12StopRingToneb)
 <LI><a href="#[52]">RingTone_exec()</a> from control_panel.o(i._Z13RingTone_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[52]">RingTone_exec()</a> from control_panel.o(i._Z13RingTone_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[83]">SaveFile_exec()</a> from filehandler.o(i._Z13SaveFile_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[83]">SaveFile_exec()</a> from filehandler.o(i._Z13SaveFile_execv) referenced from filehandler.o(i._Z13SaveFile_execv)
 <LI><a href="#[83]">SaveFile_exec()</a> from filehandler.o(i._Z13SaveFile_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[e7]">SetSirensOper(int, int, int*, void*)</a> from kpdprogs.o(i._Z13SetSirensOperiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[6]">SpyModeOption(unsigned char)</a> from gsm_comm.o(i._Z13SpyModeOptionh) referenced 2 times from gsm_comm.o(.data)
 <LI><a href="#[184]">UpgradeAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z13UpgradeActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[dc]">progEntryTime(int, int, int*, void*)</a> from kpdprogs.o(i._Z13progEntryTimeiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[f0]">progHardReset(int, int, int*, void*)</a> from kpdprogs.o(i._Z13progHardResetiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[181]">AccessOnAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z14AccessOnActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[185]">AnnexArmAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z14AnnexArmActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[4e]">AnnexExit_exec()</a> from annex.o(i._Z14AnnexExit_execv) referenced from annex.o(i._Z11AnnexDisarmv)
 <LI><a href="#[4e]">AnnexExit_exec()</a> from annex.o(i._Z14AnnexExit_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[4e]">AnnexExit_exec()</a> from annex.o(i._Z14AnnexExit_execv) referenced from annex.o(i._Z14AnnexExit_execv)
 <LI><a href="#[4e]">AnnexExit_exec()</a> from annex.o(i._Z14AnnexExit_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[62]">GSM_VOICE_exec()</a> from gsm_voice.o(i._Z14GSM_VOICE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[62]">GSM_VOICE_exec()</a> from gsm_voice.o(i._Z14GSM_VOICE_execv) referenced from gsm_voice.o(i._Z14GSM_VOICE_execv)
 <LI><a href="#[62]">GSM_VOICE_exec()</a> from gsm_voice.o(i._Z14GSM_VOICE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[12f]">Gsm_STM_Listen(void*)</a> from gsm_stm_listen.o(i._Z14Gsm_STM_ListenPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[18c]">HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)</a> from gsm_module_funcs_he910.o(i._Z14HE910_WriteCmdhP23S_GSM_FUNC_TABLE_HANDLE) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[b9]">SendRfSequence()</a> from sendrfsequence.o(i._Z14SendRfSequencev) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b9]">SendRfSequence()</a> from sendrfsequence.o(i._Z14SendRfSequencev) referenced from sendrfsequence.o(i._Z14SendRfSequencev)
 <LI><a href="#[b9]">SendRfSequence()</a> from sendrfsequence.o(i._Z14SendRfSequencev) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[1aa]">Test_AddDevice(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z14Test_AddDevicePcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[7a]">TimerTick_exec()</a> from timer.o(i._Z14TimerTick_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[7a]">TimerTick_exec()</a> from timer.o(i._Z14TimerTick_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[ce]">__keilInitTask()</a> from osal_port.o(i._Z14__keilInitTaskv) referenced from osal_port.o(i._Z14OSAL_PortStartv)
 <LI><a href="#[df]">progDelIncNumb(int, int, int*, void*)</a> from kpdprogs.o(i._Z14progDelIncNumbiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[eb]">progSwitchMode(int, int, int*, void*)</a> from kpdprogs.o(i._Z14progSwitchModeiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[ef]">progTamperMask(int, int, int*, void*)</a> from kpdprogs.o(i._Z14progTamperMaskiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[14e]">tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z14tag_reader_sosPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 2 times from tag_reader.o(.constdata)
 <LI><a href="#[182]">AccessOffAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z15AccessOffActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[4f]">AnnexAlarm_exec()</a> from annex.o(i._Z15AnnexAlarm_execv) referenced from annex.o(i._Z11AnnexDisarmv)
 <LI><a href="#[4f]">AnnexAlarm_exec()</a> from annex.o(i._Z15AnnexAlarm_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[4f]">AnnexAlarm_exec()</a> from annex.o(i._Z15AnnexAlarm_execv) referenced from annex.o(i._Z15AnnexAlarm_execv)
 <LI><a href="#[4f]">AnnexAlarm_exec()</a> from annex.o(i._Z15AnnexAlarm_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[129]">Comm_Rx_Manager(void*)</a> from comm_stm_rx_manager.o(i._Z15Comm_Rx_ManagerPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[5c]">DIAL_RETRY_exec()</a> from dial_retry.o(i._Z15DIAL_RETRY_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[5c]">DIAL_RETRY_exec()</a> from dial_retry.o(i._Z15DIAL_RETRY_execv) referenced from dial_retry.o(i._Z15DIAL_RETRY_execv)
 <LI><a href="#[5c]">DIAL_RETRY_exec()</a> from dial_retry.o(i._Z15DIAL_RETRY_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[188]">EmergencyAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z15EmergencyActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[107]">FL_KEY_FOB_read(unsigned char)</a> from fl_types.o(i._Z15FL_KEY_FOB_readh) referenced from rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
 <LI><a href="#[1b8]">GetDevicesSwVer(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z15GetDevicesSwVerPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[7e]">GetPicture_exec()</a> from filesystemmanagment.o(i._Z15GetPicture_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[7e]">GetPicture_exec()</a> from filesystemmanagment.o(i._Z15GetPicture_execv) referenced from filesystemmanagment.o(i._Z15GetPicture_execv)
 <LI><a href="#[7e]">GetPicture_exec()</a> from filesystemmanagment.o(i._Z15GetPicture_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[12b]">Gsm_STM_Control(void*)</a> from gsm_stm_control.o(i._Z15Gsm_STM_ControlPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[127]">Gsm_STM_Message(void*)</a> from gsm_stm_message.o(i._Z15Gsm_STM_MessagePv) referenced from osal_db.o(.constdata)
 <LI><a href="#[be]">INACTIVITY_exec()</a> from inactivity.o(i._Z15INACTIVITY_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[be]">INACTIVITY_exec()</a> from inactivity.o(i._Z15INACTIVITY_execv) referenced 2 times from inactivity.o(i._Z15INACTIVITY_execv)
 <LI><a href="#[be]">INACTIVITY_exec()</a> from inactivity.o(i._Z15INACTIVITY_execv) referenced from process_income_message.o(i._Z16OperatePosesoCmdh17POSESO_CMD_TYPE_EPhP14S_POSESO_Reply)
 <LI><a href="#[be]">INACTIVITY_exec()</a> from inactivity.o(i._Z15INACTIVITY_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[be]">INACTIVITY_exec()</a> from inactivity.o(i._Z15INACTIVITY_execv) referenced from inactivity.o(i._Z25GetInactivityButtonStatusv)
 <LI><a href="#[c7]">JD_MESSAGE_exec()</a> from c_proc.o(i._Z15JD_MESSAGE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c7]">JD_MESSAGE_exec()</a> from c_proc.o(i._Z15JD_MESSAGE_execv) referenced from c_proc.o(i._Z15JD_MESSAGE_execv)
 <LI><a href="#[c7]">JD_MESSAGE_exec()</a> from c_proc.o(i._Z15JD_MESSAGE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[11d]">NightModeAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z15NightModeActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[d2]">RSUTaskCallBack(unsigned char, unsigned char*, unsigned short)</a> from rsu_task.o(i._Z15RSUTaskCallBackhPht) referenced 2 times from rsu_task.o(i._Z15RSU_ManagerTaskPv)
 <LI><a href="#[13b]">RSU_ManagerTask(void*)</a> from rsu_task.o(i._Z15RSU_ManagerTaskPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[13d]">SMT_ManagerTask(void*)</a> from smt_task.o(i._Z15SMT_ManagerTaskPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[18a]">SoftResetAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z15SoftResetActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[99]">SoundOrVAT_exec()</a> from control_panel.o(i._Z15SoundOrVAT_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[99]">SoundOrVAT_exec()</a> from control_panel.o(i._Z15SoundOrVAT_execv) referenced from control_panel.o(i._Z15SoundOrVAT_execv)
 <LI><a href="#[99]">SoundOrVAT_exec()</a> from control_panel.o(i._Z15SoundOrVAT_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[d3]">Uart0RxCallBack(OSAL_CyclicBuffer*, unsigned short)</a> from uart_legacy.o(i._Z15Uart0RxCallBackP17OSAL_CyclicBuffert) referenced from uart_legacy.o(i._Z15System_UartInitv)
 <LI><a href="#[d3]">Uart0RxCallBack(OSAL_CyclicBuffer*, unsigned short)</a> from uart_legacy.o(i._Z15Uart0RxCallBackP17OSAL_CyclicBuffert) referenced from test_api.o(i._Z30TEST_TestApplicationDeactivatev)
 <LI><a href="#[137]">VAT_ManagerTask(void*)</a> from vat_task.o(i._Z15VAT_ManagerTaskPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[a4]">VIDEO_DIAL_exec()</a> from videoengine.o(i._Z15VIDEO_DIAL_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a4]">VIDEO_DIAL_exec()</a> from videoengine.o(i._Z15VIDEO_DIAL_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[187]">VoiceCallAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z15VoiceCallActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[db]">progDelAllPerif(int, int, int*, void*)</a> from kpdprogs.o(i._Z15progDelAllPerifiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[e1]">progDelOutgNumb(int, int, int*, void*)</a> from kpdprogs.o(i._Z15progDelOutgNumbiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[ec]">progEnablePrint(int, int, int*, void*)</a> from kpdprogs.o(i._Z15progEnablePrintiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[f4]">progTestAllLeds(int, int, int*, void*)</a> from kpdprogs.o(i._Z15progTestAllLedsiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[141]">AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E)</a> from annex.o(i._Z16AnnexStoredAlarmi21RF_DETECTOR_SIGNALS_E) referenced from annex.o(.constdata)
 <LI><a href="#[8f]">BattHandler_exec()</a> from bat.o(i._Z16BattHandler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[8f]">BattHandler_exec()</a> from bat.o(i._Z16BattHandler_execv) referenced from bat.o(i._Z16BattHandler_execv)
 <LI><a href="#[8f]">BattHandler_exec()</a> from bat.o(i._Z16BattHandler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[148]">CheckDuplicateSN(unsigned char*, int, int)</a> from process_income_message.o(i._Z16CheckDuplicateSNPhii) referenced 4 times from process_income_message.o(.constdata)
 <LI><a href="#[61]">GSM_MESSAGE_exec()</a> from gsm_message.o(i._Z16GSM_MESSAGE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[61]">GSM_MESSAGE_exec()</a> from gsm_message.o(i._Z16GSM_MESSAGE_execv) referenced from gsm_message.o(i._Z16GSM_MESSAGE_execv)
 <LI><a href="#[61]">GSM_MESSAGE_exec()</a> from gsm_message.o(i._Z16GSM_MESSAGE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[78]">G_PROC_INIT_exec()</a> from gsm_comm.o(i._Z16G_PROC_INIT_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[78]">G_PROC_INIT_exec()</a> from gsm_comm.o(i._Z16G_PROC_INIT_execv) referenced from gsm_comm.o(i._Z16G_PROC_INIT_execv)
 <LI><a href="#[78]">G_PROC_INIT_exec()</a> from gsm_comm.o(i._Z16G_PROC_INIT_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[11a]">LeftButtonAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z16LeftButtonActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[e4]">PanelBeepsConfig(int, int, int*, void*)</a> from kpdprogs.o(i._Z16PanelBeepsConfigiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[114]">PartArmDayAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z16PartArmDayActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[14b]">RkpStatusBuilder(unsigned)</a> from ram_rkp.o(i._Z16RkpStatusBuilderj) referenced from ram_db.o(.constdata)
 <LI><a href="#[6c]">SMS_MESSAGE_exec()</a> from sms_message.o(i._Z16SMS_MESSAGE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[6c]">SMS_MESSAGE_exec()</a> from sms_message.o(i._Z16SMS_MESSAGE_execv) referenced 2 times from sms_message.o(i._Z16SMS_MESSAGE_execv)
 <LI><a href="#[6c]">SMS_MESSAGE_exec()</a> from sms_message.o(i._Z16SMS_MESSAGE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[6d]">SUPERVISORY_exec()</a> from supervisory.o(i._Z16SUPERVISORY_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[6d]">SUPERVISORY_exec()</a> from supervisory.o(i._Z16SUPERVISORY_execv) referenced from supervisory.o(i._Z16SUPERVISORY_execv)
 <LI><a href="#[6d]">SUPERVISORY_exec()</a> from supervisory.o(i._Z16SUPERVISORY_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[193]">TEST_CommControl(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z16TEST_CommControlPcth) referenced 3 times from osal_tabls.o(.constdata)
 <LI><a href="#[1b9]">Test_DisarmPanel(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z16Test_DisarmPanelPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1b6]">Test_PressButton(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z16Test_PressButtonPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1a2]">Test_TestAllLeds(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z16Test_TestAllLedsPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1a3]">Test_TestButtons(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z16Test_TestButtonsPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[ea]">progSendPerifCfg(int, int, int*, void*)</a> from kpdprogs.o(i._Z16progSendPerifCfgiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[94]">AddEntityCmd_exec()</a> from apistatemachines.o(i._Z17AddEntityCmd_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[94]">AddEntityCmd_exec()</a> from apistatemachines.o(i._Z17AddEntityCmd_execv) referenced from apipckprocessing.o(i._Z14ResetAddEntityv)
 <LI><a href="#[94]">AddEntityCmd_exec()</a> from apistatemachines.o(i._Z17AddEntityCmd_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[140]">AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)</a> from annex.o(i._Z17AnnexDelayedAlarmi21RF_DETECTOR_SIGNALS_E) referenced from annex.o(.constdata)
 <LI><a href="#[13f]">AnnexInstantAlarm(int, RF_DETECTOR_SIGNALS_E)</a> from annex.o(i._Z17AnnexInstantAlarmi21RF_DETECTOR_SIGNALS_E) referenced from annex.o(.constdata)
 <LI><a href="#[142]">AnnexInvalidAlarm(int, RF_DETECTOR_SIGNALS_E)</a> from annex.o(i._Z17AnnexInvalidAlarmi21RF_DETECTOR_SIGNALS_E) referenced from annex.o(.constdata)
 <LI><a href="#[1bf]">CPUI_GetAlarmLeds(unsigned*)</a> from cpui_func.o(i._Z17CPUI_GetAlarmLedsPj) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[149]">CheckDuplicateCUI(unsigned char*, int, int)</a> from process_income_message.o(i._Z17CheckDuplicateCUIPhii) referenced from process_income_message.o(.constdata)
 <LI><a href="#[12d]">Gsm_STM_Streaming(void*)</a> from gsm_stm_streaming.o(i._Z17Gsm_STM_StreamingPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[18d]">HE910_ExtructData(unsigned char, char*, char**, unsigned short)</a> from gsm_module_funcs_he910.o(i._Z17HE910_ExtructDatahPcPS_t) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[77]">InitSecurity_exec()</a> from security.o(i._Z17InitSecurity_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[77]">InitSecurity_exec()</a> from security.o(i._Z17InitSecurity_execv) referenced from security.o(i._Z17InitSecurity_execv)
 <LI><a href="#[77]">InitSecurity_exec()</a> from security.o(i._Z17InitSecurity_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[8b]">PowerHandler_exec()</a> from main_power.o(i._Z17PowerHandler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[8b]">PowerHandler_exec()</a> from main_power.o(i._Z17PowerHandler_execv) referenced from main_power.o(i._Z17PowerHandler_execv)
 <LI><a href="#[8b]">PowerHandler_exec()</a> from main_power.o(i._Z17PowerHandler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[f6]">RING_process_exec()</a> from gsm_comm.o(i._Z17RING_process_execv) referenced from gsm_comm.o(i._Z17RING_process_execv)
 <LI><a href="#[f6]">RING_process_exec()</a> from gsm_comm.o(i._Z17RING_process_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b6]">RdParamTable_exec()</a> from rpc.o(i._Z17RdParamTable_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b6]">RdParamTable_exec()</a> from rpc.o(i._Z17RdParamTable_execv) referenced from rpc.o(i._Z17RdParamTable_execv)
 <LI><a href="#[b6]">RdParamTable_exec()</a> from rpc.o(i._Z17RdParamTable_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[7]">RegularCallOption(unsigned char)</a> from gsm_comm.o(i._Z17RegularCallOptionh) referenced 2 times from gsm_comm.o(.data)
 <LI><a href="#[189]">ResetButtonAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z17ResetButtonActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[117]">RightButtonAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z17RightButtonActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[7f]">SeveFileName_exec()</a> from filesystemmanagment.o(i._Z17SeveFileName_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[7f]">SeveFileName_exec()</a> from filesystemmanagment.o(i._Z17SeveFileName_execv) referenced from filesystemmanagment.o(i._Z17SeveFileName_execv)
 <LI><a href="#[7f]">SeveFileName_exec()</a> from filesystemmanagment.o(i._Z17SeveFileName_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[51]">Steady_siren_exec()</a> from control_panel.o(i._Z17Steady_siren_execv) referenced from control_panel.o(i._Z11SetSirenOffv)
 <LI><a href="#[51]">Steady_siren_exec()</a> from control_panel.o(i._Z17Steady_siren_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[51]">Steady_siren_exec()</a> from control_panel.o(i._Z17Steady_siren_execv) referenced 2 times from control_panel.o(i._Z17Steady_siren_execv)
 <LI><a href="#[51]">Steady_siren_exec()</a> from control_panel.o(i._Z17Steady_siren_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[51]">Steady_siren_exec()</a> from control_panel.o(i._Z17Steady_siren_execv) referenced from control_panel.o(i._Z21SetSirenOff_ForModemsv)
 <LI><a href="#[1a7]">TEST_ExitTestMode(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z17TEST_ExitTestModePcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1ab]">Test_DeleteDevice(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z17Test_DeleteDevicePcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[19c]">Test_RfSetTxPower(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z17Test_RfSetTxPowerPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[a7]">pre_arm_exit_exec()</a> from prealarm_handler.o(i._Z17pre_arm_exit_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a7]">pre_arm_exit_exec()</a> from prealarm_handler.o(i._Z17pre_arm_exit_execv) referenced from prealarm_handler.o(i._Z15PerimeterDisarmb)
 <LI><a href="#[a7]">pre_arm_exit_exec()</a> from prealarm_handler.o(i._Z17pre_arm_exit_execv) referenced from prealarm_handler.o(i._Z17pre_arm_exit_execv)
 <LI><a href="#[a7]">pre_arm_exit_exec()</a> from prealarm_handler.o(i._Z17pre_arm_exit_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[de]">progAddModIncNumb(int, int, int*, void*)</a> from kpdprogs.o(i._Z17progAddModIncNumbiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[ee]">progMMUpdateReset(int, int, int*, void*)</a> from kpdprogs.o(i._Z17progMMUpdateResetiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[90]">ApiGetHandler_exec()</a> from apistatemachines.o(i._Z18ApiGetHandler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[90]">ApiGetHandler_exec()</a> from apistatemachines.o(i._Z18ApiGetHandler_execv) referenced from apipckprocessing.o(i._Z15ResetGetHandlerv)
 <LI><a href="#[90]">ApiGetHandler_exec()</a> from apistatemachines.o(i._Z18ApiGetHandler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[5a]">CYBER_machine_exec()</a> from cybermachine.o(i._Z18CYBER_machine_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[5a]">CYBER_machine_exec()</a> from cybermachine.o(i._Z18CYBER_machine_execv) referenced from cybermachine.o(i._Z18CYBER_machine_execv)
 <LI><a href="#[5a]">CYBER_machine_exec()</a> from cybermachine.o(i._Z18CYBER_machine_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[5d]">DIAL_SEQUENCE_exec()</a> from dial_sequence.o(i._Z18DIAL_SEQUENCE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[5d]">DIAL_SEQUENCE_exec()</a> from dial_sequence.o(i._Z18DIAL_SEQUENCE_execv) referenced from dial_sequence.o(i._Z18DIAL_SEQUENCE_execv)
 <LI><a href="#[5d]">DIAL_SEQUENCE_exec()</a> from dial_sequence.o(i._Z18DIAL_SEQUENCE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[5f]">G_PROC_STATUS_exec()</a> from gsm_comm.o(i._Z18G_PROC_STATUS_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[5f]">G_PROC_STATUS_exec()</a> from gsm_comm.o(i._Z18G_PROC_STATUS_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[54]">LoadRamMemMap_exec()</a> from rammemorymap.o(i._Z18LoadRamMemMap_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[54]">LoadRamMemMap_exec()</a> from rammemorymap.o(i._Z18LoadRamMemMap_execv) referenced from rammemorymap.o(i._Z18LoadRamMemMap_execv)
 <LI><a href="#[54]">LoadRamMemMap_exec()</a> from rammemorymap.o(i._Z18LoadRamMemMap_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[112]">NewNightModeAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z18NewNightModeActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[87]">POSESO_LISTEN_exec()</a> from poseso_listen.o(i._Z18POSESO_LISTEN_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[87]">POSESO_LISTEN_exec()</a> from poseso_listen.o(i._Z18POSESO_LISTEN_execv) referenced from poseso_listen.o(i._Z18POSESO_LISTEN_execv)
 <LI><a href="#[87]">POSESO_LISTEN_exec()</a> from poseso_listen.o(i._Z18POSESO_LISTEN_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[115]">PartArmNightAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z18PartArmNightActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[13a]">RfTaskErrorHandler(unsigned)</a> from rf_manager_task.o(i._Z18RfTaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[bf]">SaveVideoFail_Exec()</a> from videoengine.o(i._Z18SaveVideoFail_Execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[bf]">SaveVideoFail_Exec()</a> from videoengine.o(i._Z18SaveVideoFail_Execv) referenced from videoengine.o(i._Z18SaveVideoFail_Execv)
 <LI><a href="#[bf]">SaveVideoFail_Exec()</a> from videoengine.o(i._Z18SaveVideoFail_Execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b1]">SendSirenTest_exec()</a> from siren.o(i._Z18SendSirenTest_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b1]">SendSirenTest_exec()</a> from siren.o(i._Z18SendSirenTest_execv) referenced from siren.o(i._Z18SendSirenTest_execv)
 <LI><a href="#[b1]">SendSirenTest_exec()</a> from siren.o(i._Z18SendSirenTest_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[97]">SendUserGuard_exec()</a> from ram_user.o(i._Z18SendUserGuard_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[97]">SendUserGuard_exec()</a> from ram_user.o(i._Z18SendUserGuard_execv) referenced from ram_user.o(i._Z18SendUserGuard_execv)
 <LI><a href="#[97]">SendUserGuard_exec()</a> from ram_user.o(i._Z18SendUserGuard_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[14d]">SirenStatusBuilder(unsigned)</a> from ram_siren.o(i._Z18SirenStatusBuilderj) referenced from ram_db.o(.constdata)
 <LI><a href="#[1a8]">Test_PowerSaveMode(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z18Test_PowerSaveModePcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[19a]">Test_RfSendCarrier(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z18Test_RfSendCarrierPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[19b]">Test_RfStopCarrier(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z18Test_RfStopCarrierPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[11f]">TimeManagementTask(void*)</a> from osal_time_mng.o(i._Z18TimeManagementTaskPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[72]">VOICE_RECEIVE_exec()</a> from voice_manager.o(i._Z18VOICE_RECEIVE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[72]">VOICE_RECEIVE_exec()</a> from voice_manager.o(i._Z18VOICE_RECEIVE_execv) referenced from voice_manager.o(i._Z18VOICE_RECEIVE_execv)
 <LI><a href="#[72]">VOICE_RECEIVE_exec()</a> from voice_manager.o(i._Z18VOICE_RECEIVE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[e0]">progAddModOutgNumb(int, int, int*, void*)</a> from kpdprogs.o(i._Z18progAddModOutgNumbiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[ed]">progEnablePrintGSM(int, int, int*, void*)</a> from kpdprogs.o(i._Z18progEnablePrintGSMiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[1bd]">CPUI_CallGuardBlink(unsigned*)</a> from cpui_func.o(i._Z19CPUI_CallGuardBlinkPj) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[56]">C_PROC_RECEIVE_exec()</a> from c_proc.o(i._Z19C_PROC_RECEIVE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[56]">C_PROC_RECEIVE_exec()</a> from c_proc.o(i._Z19C_PROC_RECEIVE_execv) referenced from c_proc.o(i._Z19C_PROC_RECEIVE_execv)
 <LI><a href="#[56]">C_PROC_RECEIVE_exec()</a> from c_proc.o(i._Z19C_PROC_RECEIVE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b7]">ClearUpdatesMachine()</a> from deviceupdatemachine.o(i._Z19ClearUpdatesMachinev) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b7]">ClearUpdatesMachine()</a> from deviceupdatemachine.o(i._Z19ClearUpdatesMachinev) referenced from deviceupdatemachine.o(i._Z19ClearUpdatesMachinev)
 <LI><a href="#[b7]">ClearUpdatesMachine()</a> from deviceupdatemachine.o(i._Z19ClearUpdatesMachinev) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[5b]">DIAL_PHONE_NUM_exec()</a> from dial_phone_num.o(i._Z19DIAL_PHONE_NUM_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[5b]">DIAL_PHONE_NUM_exec()</a> from dial_phone_num.o(i._Z19DIAL_PHONE_NUM_execv) referenced from dial_phone_num.o(i._Z19DIAL_PHONE_NUM_execv)
 <LI><a href="#[5b]">DIAL_PHONE_NUM_exec()</a> from dial_phone_num.o(i._Z19DIAL_PHONE_NUM_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[ad]">DeviceReconfig_exec()</a> from deviceconfigmachine.o(i._Z19DeviceReconfig_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[ad]">DeviceReconfig_exec()</a> from deviceconfigmachine.o(i._Z19DeviceReconfig_execv) referenced from deviceconfigmachine.o(i._Z19DeviceReconfig_execv)
 <LI><a href="#[ad]">DeviceReconfig_exec()</a> from deviceconfigmachine.o(i._Z19DeviceReconfig_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[104]">FL_RF_SEC_ZONE_read(unsigned char)</a> from fl_types.o(i._Z19FL_RF_SEC_ZONE_readh) referenced from rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
 <LI><a href="#[5e]">G_PROC_RECEIVE_exec()</a> from gsm_comm.o(i._Z19G_PROC_RECEIVE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[5e]">G_PROC_RECEIVE_exec()</a> from gsm_comm.o(i._Z19G_PROC_RECEIVE_execv) referenced from gsm_comm.o(i._Z19G_PROC_RECEIVE_execv)
 <LI><a href="#[5e]">G_PROC_RECEIVE_exec()</a> from gsm_comm.o(i._Z19G_PROC_RECEIVE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[45]">HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)</a> from gsm_module_funcs_he910.o(i._Z19HE910_AnswerHandlerhP23S_GSM_FUNC_TABLE_HANDLEPct) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[126]">I2CTaskErrorHandler(unsigned)</a> from i2c_manager_task.o(i._Z19I2CTaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[63]">INCOME_MESSAGE_exec()</a> from process_income_message.o(i._Z19INCOME_MESSAGE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[63]">INCOME_MESSAGE_exec()</a> from process_income_message.o(i._Z19INCOME_MESSAGE_execv) referenced 2 times from process_income_message.o(i._Z19INCOME_MESSAGE_execv)
 <LI><a href="#[63]">INCOME_MESSAGE_exec()</a> from process_income_message.o(i._Z19INCOME_MESSAGE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[63]">INCOME_MESSAGE_exec()</a> from process_income_message.o(i._Z19INCOME_MESSAGE_execv) referenced from process_income_message.o(i._Z26INCOME_MESSAGE_process_smsPhh)
 <LI><a href="#[64]">IP_APP_COMMAND_exec()</a> from ip_app.o(i._Z19IP_APP_COMMAND_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[64]">IP_APP_COMMAND_exec()</a> from ip_app.o(i._Z19IP_APP_COMMAND_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[65]">IP_APP_MACHINE_exec()</a> from ip_app.o(i._Z19IP_APP_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[65]">IP_APP_MACHINE_exec()</a> from ip_app.o(i._Z19IP_APP_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[119]">MidLeftButtonAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z19MidLeftButtonActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[80]">ModifyFileName_exec()</a> from filesystemmanagment.o(i._Z19ModifyFileName_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[80]">ModifyFileName_exec()</a> from filesystemmanagment.o(i._Z19ModifyFileName_execv) referenced from filesystemmanagment.o(i._Z19ModifyFileName_execv)
 <LI><a href="#[80]">ModifyFileName_exec()</a> from filesystemmanagment.o(i._Z19ModifyFileName_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[98]">Prealarm_siren_exec()</a> from prealarm_handler.o(i._Z19Prealarm_siren_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[98]">Prealarm_siren_exec()</a> from prealarm_handler.o(i._Z19Prealarm_siren_execv) referenced from prealarm_handler.o(i._Z19Prealarm_siren_execv)
 <LI><a href="#[98]">Prealarm_siren_exec()</a> from prealarm_handler.o(i._Z19Prealarm_siren_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[69]">RB_APP_COMMAND_exec()</a> from rb_app.o(i._Z19RB_APP_COMMAND_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[69]">RB_APP_COMMAND_exec()</a> from rb_app.o(i._Z19RB_APP_COMMAND_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[6a]">RB_APP_MACHINE_exec()</a> from rb_app.o(i._Z19RB_APP_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[6a]">RB_APP_MACHINE_exec()</a> from rb_app.o(i._Z19RB_APP_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[13c]">RSUTaskErrorHandler(unsigned)</a> from rsu_task.o(i._Z19RSUTaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[1a6]">Test_ACPowerControl(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z19Test_ACPowerControlPcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[1a5]">Test_ReadBatCharger(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z19Test_ReadBatChargerPcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[19f]">Test_RfSetFrequency(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z19Test_RfSetFrequencyPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1a0]">Test_RfSetPowerMode(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z19Test_RfSetPowerModePcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[7c]">Timer0_CH0_Isr_exec()</a> from m_pdaprocess.o(i._Z19Timer0_CH0_Isr_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[7c]">Timer0_CH0_Isr_exec()</a> from m_pdaprocess.o(i._Z19Timer0_CH0_Isr_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[138]">VATTaskErrorHandler(unsigned)</a> from vat_task.o(i._Z19VATTaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[73]">VOICE_TRANSMIT_exec()</a> from voice_manager.o(i._Z19VOICE_TRANSMIT_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[73]">VOICE_TRANSMIT_exec()</a> from voice_manager.o(i._Z19VOICE_TRANSMIT_execv) referenced from voice_manager.o(i._Z19VOICE_TRANSMIT_execv)
 <LI><a href="#[73]">VOICE_TRANSMIT_exec()</a> from voice_manager.o(i._Z19VOICE_TRANSMIT_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[81]">VideoRFMachine_exec()</a> from videoengine.o(i._Z19VideoRFMachine_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[81]">VideoRFMachine_exec()</a> from videoengine.o(i._Z19VideoRFMachine_execv) referenced from videoengine.o(i._Z19VideoRFMachine_execv)
 <LI><a href="#[81]">VideoRFMachine_exec()</a> from videoengine.o(i._Z19VideoRFMachine_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a8]">primeter_entry_exec()</a> from prealarm_handler.o(i._Z19primeter_entry_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a8]">primeter_entry_exec()</a> from prealarm_handler.o(i._Z19primeter_entry_execv) referenced from prealarm_handler.o(i._Z19primeter_entry_execv)
 <LI><a href="#[a8]">primeter_entry_exec()</a> from prealarm_handler.o(i._Z19primeter_entry_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[15d]">tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z19tag_reader_AnnexArmPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[70]">AFP_APP_COMMAND_exec()</a> from afp_app.o(i._Z20AFP_APP_COMMAND_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[70]">AFP_APP_COMMAND_exec()</a> from afp_app.o(i._Z20AFP_APP_COMMAND_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[71]">AFP_APP_MACHINE_exec()</a> from afp_app.o(i._Z20AFP_APP_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[71]">AFP_APP_MACHINE_exec()</a> from afp_app.o(i._Z20AFP_APP_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[183]">AccessByConfigAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z20AccessByConfigActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[a]">AutoFullDuplexOption(unsigned char)</a> from gsm_comm.o(i._Z20AutoFullDuplexOptionh) referenced 2 times from gsm_comm.o(.data)
 <LI><a href="#[136]">CPUITaskErrorHandler(unsigned)</a> from cpui_task_manager.o(i._Z20CPUITaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[d4]">CPUI_SendStopBeepMsg()</a> from cpui_func.o(i._Z20CPUI_SendStopBeepMsgv) referenced from cpui_func.o(i._Z16CPUI_PerformBeephhPP15S_CPUI_BeepInfoh)
 <LI><a href="#[57]">C_PROC_TRANSMIT_exec()</a> from c_proc.o(i._Z20C_PROC_TRANSMIT_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[57]">C_PROC_TRANSMIT_exec()</a> from c_proc.o(i._Z20C_PROC_TRANSMIT_execv) referenced from c_proc.o(i._Z20C_PROC_TRANSMIT_execv)
 <LI><a href="#[57]">C_PROC_TRANSMIT_exec()</a> from c_proc.o(i._Z20C_PROC_TRANSMIT_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[8d]">ChangeCommState_exec()</a> from communicationstate.o(i._Z20ChangeCommState_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[8d]">ChangeCommState_exec()</a> from communicationstate.o(i._Z20ChangeCommState_execv) referenced from communicationstate.o(i._Z20ChangeCommState_execv)
 <LI><a href="#[8d]">ChangeCommState_exec()</a> from communicationstate.o(i._Z20ChangeCommState_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[4c]">CheckDtmfTimout_exec()</a> from voice_manager.o(i._Z20CheckDtmfTimout_execv) referenced from voice_manager.o(i._Z10DialHangUpv)
 <LI><a href="#[4c]">CheckDtmfTimout_exec()</a> from voice_manager.o(i._Z20CheckDtmfTimout_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[4c]">CheckDtmfTimout_exec()</a> from voice_manager.o(i._Z20CheckDtmfTimout_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[aa]">ERS_all_devices_exec()</a> from do_it_yourself.o(i._Z20ERS_all_devices_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[aa]">ERS_all_devices_exec()</a> from do_it_yourself.o(i._Z20ERS_all_devices_execv) referenced from do_it_yourself.o(i._Z20ERS_all_devices_execv)
 <LI><a href="#[aa]">ERS_all_devices_exec()</a> from do_it_yourself.o(i._Z20ERS_all_devices_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[105]">FL_RF_INPUT_DEV_read(unsigned char)</a> from fl_types.o(i._Z20FL_RF_INPUT_DEV_readh) referenced from rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
 <LI><a href="#[60]">G_PROC_TRANSMIT_exec()</a> from gsm_comm.o(i._Z20G_PROC_TRANSMIT_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[60]">G_PROC_TRANSMIT_exec()</a> from gsm_comm.o(i._Z20G_PROC_TRANSMIT_execv) referenced from gsm_comm.o(i._Z20G_PROC_TRANSMIT_execv)
 <LI><a href="#[60]">G_PROC_TRANSMIT_exec()</a> from gsm_comm.o(i._Z20G_PROC_TRANSMIT_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[46]">HE910_ExtructRingNum(unsigned char, char*, char**, unsigned char)</a> from gsm_module_funcs_he910.o(i._Z20HE910_ExtructRingNumhPcPS_h) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[122]">InitTaskErrorHandler(unsigned)</a> from init_task.o(i._Z20InitTaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[118]">MidRightButtonAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z20MidRightButtonActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[110]">RFApiVSEG_NULLConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z20RFApiVSEG_NULLConfigPhPv) referenced from rfapivseg.o(i.__sti___11_RFApiVSEG_c)
 <LI><a href="#[a6]">RPC_send_packet_exec()</a> from rpc.o(i._Z20RPC_send_packet_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a6]">RPC_send_packet_exec()</a> from rpc.o(i._Z20RPC_send_packet_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a6]">RPC_send_packet_exec()</a> from rpc.o(i._Z20RPC_send_packet_execv) referenced from rpc.o(i._Z20RPC_send_packet_execv)
 <LI><a href="#[76]">ReadSystemFlags_exec()</a> from init.o(i._Z20ReadSystemFlags_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[76]">ReadSystemFlags_exec()</a> from init.o(i._Z20ReadSystemFlags_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[76]">ReadSystemFlags_exec()</a> from init.o(i._Z20ReadSystemFlags_execv) referenced from init.o(i._Z20ReadSystemFlags_execv)
 <LI><a href="#[14c]">RfInputStatusBuilder(unsigned)</a> from ram_rf_input_dev.o(i._Z20RfInputStatusBuilderj) referenced from ram_db.o(.constdata)
 <LI><a href="#[13e]">SMT_TaskErrorHandler(unsigned)</a> from smt_task.o(i._Z20SMT_TaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[b2]">SendSirensAlarm_exec()</a> from siren.o(i._Z20SendSirensAlarm_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b2]">SendSirensAlarm_exec()</a> from siren.o(i._Z20SendSirensAlarm_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b2]">SendSirensAlarm_exec()</a> from siren.o(i._Z20SendSirensAlarm_execv) referenced from siren.o(i._Z20SendSirensAlarm_execv)
 <LI><a href="#[103]">SetUartInterruptType()</a> from hardware_vf.o(i._Z20SetUartInterruptTypev) referenced from power_save_mode_vf.o(i._Z29power_save_mode_entrance_execv)
 <LI><a href="#[1af]">Test_QueryGsmVersion(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z20Test_QueryGsmVersionPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[18b]">ToggleGsmPrintAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z20ToggleGsmPrintActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[6e]">UDP_APP_COMMAND_exec()</a> from udp_app.o(i._Z20UDP_APP_COMMAND_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[6e]">UDP_APP_COMMAND_exec()</a> from udp_app.o(i._Z20UDP_APP_COMMAND_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[6f]">UDP_APP_MACHINE_exec()</a> from udp_app.o(i._Z20UDP_APP_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[6f]">UDP_APP_MACHINE_exec()</a> from udp_app.o(i._Z20UDP_APP_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[124]">UartTaskErrorHandler(unsigned)</a> from uart_manager_task.o(i._Z20UartTaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[bd]">WaitForOPDDAcks_exec()</a> from prealarm_handler.o(i._Z20WaitForOPDDAcks_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[bd]">WaitForOPDDAcks_exec()</a> from prealarm_handler.o(i._Z20WaitForOPDDAcks_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[bd]">WaitForOPDDAcks_exec()</a> from prealarm_handler.o(i._Z20WaitForOPDDAcks_execv) referenced from prealarm_handler.o(i._Z20WaitForOPDDAcks_execv)
 <LI><a href="#[14f]">tag_reader_learn_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z20tag_reader_learn_tagPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[95]">ApiDelAllHandler_exec()</a> from apicmdprocessing.o(i._Z21ApiDelAllHandler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[95]">ApiDelAllHandler_exec()</a> from apicmdprocessing.o(i._Z21ApiDelAllHandler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[95]">ApiDelAllHandler_exec()</a> from apicmdprocessing.o(i._Z21ApiDelAllHandler_execv) referenced from apicmdprocessing.o(i._Z21ApiDelAllHandler_execv)
 <LI><a href="#[92]">ApiDelEntHandler_exec()</a> from apistatemachines.o(i._Z21ApiDelEntHandler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[92]">ApiDelEntHandler_exec()</a> from apistatemachines.o(i._Z21ApiDelEntHandler_execv) referenced from apipckprocessing.o(i._Z15ResetDelHandlerv)
 <LI><a href="#[92]">ApiDelEntHandler_exec()</a> from apistatemachines.o(i._Z21ApiDelEntHandler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[93]">ApiModifyHandler_exec()</a> from apistatemachines.o(i._Z21ApiModifyHandler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[93]">ApiModifyHandler_exec()</a> from apistatemachines.o(i._Z21ApiModifyHandler_execv) referenced from apipckprocessing.o(i._Z18ResetModifyHandlerv)
 <LI><a href="#[93]">ApiModifyHandler_exec()</a> from apistatemachines.o(i._Z21ApiModifyHandler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[59]">DATALINK_manager_exec()</a> from data_link_manager.o(i._Z21DATALINK_manager_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[59]">DATALINK_manager_exec()</a> from data_link_manager.o(i._Z21DATALINK_manager_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[bc]">Entry_Exit_Beeps_exec()</a> from control_panel.o(i._Z21Entry_Exit_Beeps_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[bc]">Entry_Exit_Beeps_exec()</a> from control_panel.o(i._Z21Entry_Exit_Beeps_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[bc]">Entry_Exit_Beeps_exec()</a> from control_panel.o(i._Z21Entry_Exit_Beeps_execv) referenced from control_panel.o(i._Z21Stop_Entry_Exit_Beepsv)
 <LI><a href="#[106]">FL_RF_OUTPUT_DEV_read(unsigned char)</a> from fl_types.o(i._Z21FL_RF_OUTPUT_DEV_readh) referenced from rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
 <LI><a href="#[134]">FlashTaskErrorHandler(unsigned)</a> from flash_manager_task.o(i._Z21FlashTaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[7d]">PollInteruptBits_exec()</a> from scheduler.o(i._Z21PollInteruptBits_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[7d]">PollInteruptBits_exec()</a> from scheduler.o(i._Z21PollInteruptBits_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[164]">RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z21RFApiVSEG_CheckForRSUPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[168]">RFApiVSEG_ConfigOnCDT(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z21RFApiVSEG_ConfigOnCDTPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[173]">RFApiVSEG_RangeConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z21RFApiVSEG_RangeConfigPhPv) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[6b]">SECURITY_MACHINE_exec()</a> from security.o(i._Z21SECURITY_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[6b]">SECURITY_MACHINE_exec()</a> from security.o(i._Z21SECURITY_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[174]">S_RfApiVSEG_ConstCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</a> from rfapivseg.o(i._Z21S_RfApiVSEG_ConstCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[178]">S_RfApiVSEG_DBTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</a> from rfapivseg.o(i._Z21S_RfApiVSEG_DBTabCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[8e]">ServerKeyRequest_exec()</a> from requestfogserverkey.o(i._Z21ServerKeyRequest_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[8e]">ServerKeyRequest_exec()</a> from requestfogserverkey.o(i._Z21ServerKeyRequest_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[8e]">ServerKeyRequest_exec()</a> from requestfogserverkey.o(i._Z21ServerKeyRequest_execv) referenced from requestfogserverkey.o(i._Z21ServerKeyRequest_execv)
 <LI><a href="#[1ac]">Test_DeleteAllDevices(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z21Test_DeleteAllDevicesPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[19e]">Test_RfSetAttenuation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z21Test_RfSetAttenuationPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1a1]">Test_SetCommPrintMode(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z21Test_SetCommPrintModePcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[120]">TimerTaskErrorHandler(unsigned)</a> from osal_time_mng.o(i._Z21TimerTaskErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[82]">VideoCommMachine_exec()</a> from videoengine.o(i._Z21VideoCommMachine_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[82]">VideoCommMachine_exec()</a> from videoengine.o(i._Z21VideoCommMachine_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[82]">VideoCommMachine_exec()</a> from videoengine.o(i._Z21VideoCommMachine_execv) referenced from videoengine.o(i._Z21VideoCommMachine_execv)
 <LI><a href="#[fb]">tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z21tag_reader_arm_systemPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 7 times from tag_reader.o(.constdata)
 <LI><a href="#[fb]">tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z21tag_reader_arm_systemPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(i._Z21tag_reader_arm_systemPhjjhS_P13TimerStruct_SS_S1_S1_)
 <LI><a href="#[a2]">Add_video_request_exec()</a> from videoengine.o(i._Z22Add_video_request_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a2]">Add_video_request_exec()</a> from videoengine.o(i._Z22Add_video_request_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a2]">Add_video_request_exec()</a> from videoengine.o(i._Z22Add_video_request_execv) referenced from videoengine.o(i._Z22Add_video_request_execv)
 <LI><a href="#[1c7]">CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*)</a> from cpui_buttons_func.o(i._Z22CPUI_Buttons_Prog_FunchP17S_CPUI_ButtonInfo) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[b3]">DeviceUpdateCheck_exec()</a> from deviceupdatemachine.o(i._Z22DeviceUpdateCheck_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b3]">DeviceUpdateCheck_exec()</a> from deviceupdatemachine.o(i._Z22DeviceUpdateCheck_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b3]">DeviceUpdateCheck_exec()</a> from deviceupdatemachine.o(i._Z22DeviceUpdateCheck_execv) referenced 3 times from deviceupdatemachine.o(i._Z22DeviceUpdateCheck_execv)
 <LI><a href="#[50]">Progressive_siren_exec()</a> from control_panel.o(i._Z22Progressive_siren_execv) referenced from control_panel.o(i._Z11SetSirenOffv)
 <LI><a href="#[50]">Progressive_siren_exec()</a> from control_panel.o(i._Z22Progressive_siren_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[50]">Progressive_siren_exec()</a> from control_panel.o(i._Z22Progressive_siren_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[50]">Progressive_siren_exec()</a> from control_panel.o(i._Z22Progressive_siren_execv) referenced from control_panel.o(i._Z21SetSirenOff_ForModemsv)
 <LI><a href="#[50]">Progressive_siren_exec()</a> from control_panel.o(i._Z22Progressive_siren_execv) referenced from control_panel.o(i._Z22Progressive_siren_execv)
 <LI><a href="#[14a]">RfSecZoneStatusBuilder(unsigned)</a> from ram_rf_sec_zone.o(i._Z22RfSecZoneStatusBuilderj) referenced from ram_db.o(.constdata)
 <LI><a href="#[4d]">SOUND_D2ACodecCallBack()</a> from sound_api.o(i._Z22SOUND_D2ACodecCallBackv) referenced from sound_api.o(i._Z10SOUND_Initv)
 <LI><a href="#[11e]">SendJammingEventAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z22SendJammingEventActionP17S_CPUI_ButtonInfo) referenced from cpui_buttons_func.o(.constdata)
 <LI><a href="#[199]">TEST_ExecuteFlashErase(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z22TEST_ExecuteFlashErasePcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1ad]">Test_DisplayAllDevices(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z22Test_DisplayAllDevicesPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[19d]">Test_RfSetCarrierSense(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z22Test_RfSetCarrierSensePcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[c0]">VideoFailRetrieve_Exec()</a> from videoengine.o(i._Z22VideoFailRetrieve_Execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c0]">VideoFailRetrieve_Exec()</a> from videoengine.o(i._Z22VideoFailRetrieve_Execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c0]">VideoFailRetrieve_Exec()</a> from videoengine.o(i._Z22VideoFailRetrieve_Execv) referenced from videoengine.o(i._Z22VideoFailRetrieve_Execv)
 <LI><a href="#[a9]">device_auto_learn_exec()</a> from do_it_yourself.o(i._Z22device_auto_learn_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a9]">device_auto_learn_exec()</a> from do_it_yourself.o(i._Z22device_auto_learn_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a9]">device_auto_learn_exec()</a> from do_it_yourself.o(i._Z22device_auto_learn_execv) referenced from do_it_yourself.o(i._Z22device_auto_learn_execv)
 <LI><a href="#[a9]">device_auto_learn_exec()</a> from do_it_yourself.o(i._Z22device_auto_learn_execv) referenced from do_it_yourself.o(i._Z9DIY_Abortv)
 <LI><a href="#[15e]">tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z22tag_reader_AnnexDisarmPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[154]">tag_reader_delayed_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z22tag_reader_delayed_armPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 4 times from tag_reader.o(.constdata)
 <LI><a href="#[ff]">tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z22tag_reader_receive_tagPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 3 times from tag_reader.o(.constdata)
 <LI><a href="#[ff]">tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z22tag_reader_receive_tagPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(i._Z22tag_reader_receive_tagPhjjhS_P13TimerStruct_SS_S1_S1_)
 <LI><a href="#[ff]">tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z22tag_reader_receive_tagPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(i._Z25tag_reader_PerformRequestPK25S_TagReaderRequestHandlerPhjhS2_P13TimerStruct_SS2_S4_S4_)
 <LI><a href="#[ff]">tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z22tag_reader_receive_tagPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(i._Z25tag_reader_decode_messagehPhh)
 <LI><a href="#[150]">tag_reader_sos_polling(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z22tag_reader_sos_pollingPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[151]">tag_reader_star_button(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z22tag_reader_star_buttonPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 2 times from tag_reader.o(.constdata)
 <LI><a href="#[55]">AP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23AP_PROTOCL_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[55]">AP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23AP_PROTOCL_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[55]">AP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23AP_PROTOCL_MACHINE_execv) referenced from maintenance.o(i._Z23AP_PROTOCL_MACHINE_execv)
 <LI><a href="#[91]">ApiPackProcHandler_exec()</a> from apistatemachines.o(i._Z23ApiPackProcHandler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[91]">ApiPackProcHandler_exec()</a> from apistatemachines.o(i._Z23ApiPackProcHandler_execv) referenced from apipckprocessing.o(i._Z13ResetPackProcv)
 <LI><a href="#[91]">ApiPackProcHandler_exec()</a> from apistatemachines.o(i._Z23ApiPackProcHandler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[91]">ApiPackProcHandler_exec()</a> from apistatemachines.o(i._Z23ApiPackProcHandler_execv) referenced from apistatemachines.o(i._Z23ApiPackProcHandler_execv)
 <LI><a href="#[58]">CP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23CP_PROTOCL_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[58]">CP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23CP_PROTOCL_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[58]">CP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23CP_PROTOCL_MACHINE_execv) referenced from maintenance.o(i._Z23CP_PROTOCL_MACHINE_execv)
 <LI><a href="#[9b]">Close_voice_window_exec()</a> from voice_manager.o(i._Z23Close_voice_window_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[9b]">Close_voice_window_exec()</a> from voice_manager.o(i._Z23Close_voice_window_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[9b]">Close_voice_window_exec()</a> from voice_manager.o(i._Z23Close_voice_window_execv) referenced from voice_manager.o(i._Z23Close_voice_window_execv)
 <LI><a href="#[c9]">FOG_GET_BIT_RESULT_exec()</a> from fog_bit_result.o(i._Z23FOG_GET_BIT_RESULT_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c9]">FOG_GET_BIT_RESULT_exec()</a> from fog_bit_result.o(i._Z23FOG_GET_BIT_RESULT_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c9]">FOG_GET_BIT_RESULT_exec()</a> from fog_bit_result.o(i._Z23FOG_GET_BIT_RESULT_execv) referenced from fog_bit_result.o(i._Z23FOG_GET_BIT_RESULT_execv)
 <LI><a href="#[66]">MP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23MP_PROTOCL_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[66]">MP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23MP_PROTOCL_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[66]">MP_PROTOCL_MACHINE_exec()</a> from maintenance.o(i._Z23MP_PROTOCL_MACHINE_execv) referenced 2 times from maintenance.o(i._Z23MP_PROTOCL_MACHINE_execv)
 <LI><a href="#[c5]">OpenDataConnection_exec()</a> from sms_message.o(i._Z23OpenDataConnection_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c5]">OpenDataConnection_exec()</a> from sms_message.o(i._Z23OpenDataConnection_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c5]">OpenDataConnection_exec()</a> from sms_message.o(i._Z23OpenDataConnection_execv) referenced from sms_message.o(i._Z23OpenDataConnection_execv)
 <LI><a href="#[169]">RFApiVSEG_CheckForJDRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z23RFApiVSEG_CheckForJDRSUPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[53]">RF_REFRESH_MACHINE_exec()</a> from rfrefreshmachine.o(i._Z23RF_REFRESH_MACHINE_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[53]">RF_REFRESH_MACHINE_exec()</a> from rfrefreshmachine.o(i._Z23RF_REFRESH_MACHINE_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[9a]">Rf_Jamming_handler_exec()</a> from c_proc.o(i._Z23Rf_Jamming_handler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[9a]">Rf_Jamming_handler_exec()</a> from c_proc.o(i._Z23Rf_Jamming_handler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[9a]">Rf_Jamming_handler_exec()</a> from c_proc.o(i._Z23Rf_Jamming_handler_execv) referenced from c_proc.o(i._Z23Rf_Jamming_handler_execv)
 <LI><a href="#[17c]">RxFailureCounterAdapter(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rxfailuredetector.o(i._Z23RxFailureCounterAdapterPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[7b]">SERIAL_PDA_handler_exec()</a> from el_v2_driver.o(i._Z23SERIAL_PDA_handler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[7b]">SERIAL_PDA_handler_exec()</a> from el_v2_driver.o(i._Z23SERIAL_PDA_handler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[175]">S_RfApiVSEG_SrcBuffCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</a> from rfapivseg.o(i._Z23S_RfApiVSEG_SrcBuffCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[177]">S_RfApiVSEG_TypeTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</a> from rfapivseg.o(i._Z23S_RfApiVSEG_TypeTabCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[132]">TestManagerErrorHandler(unsigned)</a> from test_task.o(i._Z23TestManagerErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[5]">VoiceVerificationOption(unsigned char)</a> from gsm_comm.o(i._Z23VoiceVerificationOptionh) referenced 2 times from gsm_comm.o(.data)
 <LI><a href="#[f3]">progTag8ByteUpdateReset(int, int, int*, void*)</a> from kpdprogs.o(i._Z23progTag8ByteUpdateResetiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[15b]">tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z23tag_reader_PerimeterArmPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[1c4]">CPUI_Buttons_Action_Func(unsigned char, S_CPUI_ButtonInfo*)</a> from cpui_buttons_func.o(i._Z24CPUI_Buttons_Action_FunchP17S_CPUI_ButtonInfo) referenced 13 times from osal_tabls.o(.constdata)
 <LI><a href="#[1c1]">CPUI_CheckFullDuplexCall(unsigned*)</a> from cpui_func.o(i._Z24CPUI_CheckFullDuplexCallPj) referenced 8 times from osal_tabls.o(.constdata)
 <LI><a href="#[d1]">CallBackFuncGsmRxManager(OSAL_CyclicBuffer*, unsigned short)</a> from comm_stm_rx_manager.o(i._Z24CallBackFuncGsmRxManagerP17OSAL_CyclicBuffert) referenced 2 times from gsm_stm_control.o(i._Z15Gsm_STM_ControlPv)
 <LI><a href="#[d1]">CallBackFuncGsmRxManager(OSAL_CyclicBuffer*, unsigned short)</a> from comm_stm_rx_manager.o(i._Z24CallBackFuncGsmRxManagerP17OSAL_CyclicBuffert) referenced from uart_legacy.o(i._Z15System_UartInitv)
 <LI><a href="#[d1]">CallBackFuncGsmRxManager(OSAL_CyclicBuffer*, unsigned short)</a> from comm_stm_rx_manager.o(i._Z24CallBackFuncGsmRxManagerP17OSAL_CyclicBuffert) referenced from gsm_module_funcs_he910.o(i._Z19HE910_AnswerHandlerhP23S_GSM_FUNC_TABLE_HANDLEPct)
 <LI><a href="#[b5]">CheckTemporaryBypass_exe()</a> from process_income_message.o(i._Z24CheckTemporaryBypass_exev) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b5]">CheckTemporaryBypass_exe()</a> from process_income_message.o(i._Z24CheckTemporaryBypass_exev) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b5]">CheckTemporaryBypass_exe()</a> from process_income_message.o(i._Z24CheckTemporaryBypass_exev) referenced from process_income_message.o(i._Z24CheckTemporaryBypass_exev)
 <LI><a href="#[ac]">Device_Remote_Param_Exec()</a> from deviceupdatemachine.o(i._Z24Device_Remote_Param_Execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[ac]">Device_Remote_Param_Exec()</a> from deviceupdatemachine.o(i._Z24Device_Remote_Param_Execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[ac]">Device_Remote_Param_Exec()</a> from deviceupdatemachine.o(i._Z24Device_Remote_Param_Execv) referenced from deviceupdatemachine.o(i._Z24Device_Remote_Param_Execv)
 <LI><a href="#[12a]">GsmRxManagerErrorHandler(unsigned)</a> from comm_stm_rx_manager.o(i._Z24GsmRxManagerErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[130]">GsmStmListenErrorHandler(unsigned)</a> from gsm_stm_listen.o(i._Z24GsmStmListenErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[44]">Gsm_HE910_Module_PowerUp(unsigned)</a> from gsm_module_funcs_he910.o(i._Z24Gsm_HE910_Module_PowerUpj) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[18e]">HE910_HwPowerSaveControl(unsigned char)</a> from gsm_module_funcs_he910.o(i._Z24HE910_HwPowerSaveControlh) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[89]">LISTEN_precondition_exec()</a> from poseso_listen.o(i._Z24LISTEN_precondition_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[89]">LISTEN_precondition_exec()</a> from poseso_listen.o(i._Z24LISTEN_precondition_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[89]">LISTEN_precondition_exec()</a> from poseso_listen.o(i._Z24LISTEN_precondition_execv) referenced from poseso_listen.o(i._Z24LISTEN_precondition_execv)
 <LI><a href="#[88]">POSESO_LISTEN_TIMER_exec()</a> from poseso_listen.o(i._Z24POSESO_LISTEN_TIMER_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[88]">POSESO_LISTEN_TIMER_exec()</a> from poseso_listen.o(i._Z24POSESO_LISTEN_TIMER_execv) referenced from poseso_listen.o(i._Z18POSESO_LISTEN_execv)
 <LI><a href="#[88]">POSESO_LISTEN_TIMER_exec()</a> from poseso_listen.o(i._Z24POSESO_LISTEN_TIMER_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[88]">POSESO_LISTEN_TIMER_exec()</a> from poseso_listen.o(i._Z24POSESO_LISTEN_TIMER_execv) referenced from poseso_listen.o(i._Z24POSESO_LISTEN_TIMER_execv)
 <LI><a href="#[a5]">PosesoRfPoseseChain_exec()</a> from process_income_message.o(i._Z24PosesoRfPoseseChain_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a5]">PosesoRfPoseseChain_exec()</a> from process_income_message.o(i._Z24PosesoRfPoseseChain_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a5]">PosesoRfPoseseChain_exec()</a> from process_income_message.o(i._Z24PosesoRfPoseseChain_execv) referenced from process_income_message.o(i._Z24PosesoRfPoseseChain_execv)
 <LI><a href="#[d5]">Radio_LoadNextBpskSymbol()</a> from cc11xxdrv.o(i._Z24Radio_LoadNextBpskSymbolv) referenced from cc11xxdrv.o(i._Z16Radio_EnableBpskh)
 <LI><a href="#[1b1]">TEST_INTERNAL_FLASH_INIT(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z24TEST_INTERNAL_FLASH_INITPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1ae]">Test_SaveFactorySettings(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z24Test_SaveFactorySettingsPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1c3]">CPUI_CheckEchoNumberState(unsigned*)</a> from cpui_func.o(i._Z25CPUI_CheckEchoNumberStatePj) referenced 4 times from osal_tabls.o(.constdata)
 <LI><a href="#[1c2]">CPUI_GetFullDuplexCallLed(unsigned*)</a> from cpui_func.o(i._Z25CPUI_GetFullDuplexCallLedPj) referenced 4 times from osal_tabls.o(.constdata)
 <LI><a href="#[a1]">Calc_FlashFile_CRC32_exec()</a> from processflash.o(i._Z25Calc_FlashFile_CRC32_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a1]">Calc_FlashFile_CRC32_exec()</a> from processflash.o(i._Z25Calc_FlashFile_CRC32_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a1]">Calc_FlashFile_CRC32_exec()</a> from processflash.o(i._Z25Calc_FlashFile_CRC32_execv) referenced from processflash.o(i._Z25Calc_FlashFile_CRC32_execv)
 <LI><a href="#[12c]">GsmStmControlErrorHandler(unsigned)</a> from gsm_stm_control.o(i._Z25GsmStmControlErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[128]">GsmStmMessageErrorHandler(unsigned)</a> from gsm_stm_message.o(i._Z25GsmStmMessageErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[9d]">Pre_alarm_indication_exec()</a> from prealarm_handler.o(i._Z25Pre_alarm_indication_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[9d]">Pre_alarm_indication_exec()</a> from prealarm_handler.o(i._Z25Pre_alarm_indication_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[9d]">Pre_alarm_indication_exec()</a> from prealarm_handler.o(i._Z25Pre_alarm_indication_execv) referenced from prealarm_handler.o(i._Z25Pre_alarm_indication_execv)
 <LI><a href="#[41]">RFApiVSEG_HandleInterface(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z25RFApiVSEG_HandleInterfacePhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[198]">TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z25TEST_ExecuteAlarmActivatePcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[1a9]">TEST_ExecuteHelpOperation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z25TEST_ExecuteHelpOperationPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1b2]">TEST_INTERNAL_FLASH_CLEAR(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z25TEST_INTERNAL_FLASH_CLEARPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1b0]">TEST_INTERNAL_FLASH_ERASE(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z25TEST_INTERNAL_FLASH_ERASEPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[8a]">TurnOffPirIndication_exec()</a> from ram_db.o(i._Z25TurnOffPirIndication_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[8a]">TurnOffPirIndication_exec()</a> from ram_db.o(i._Z25TurnOffPirIndication_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[8a]">TurnOffPirIndication_exec()</a> from ram_db.o(i._Z25TurnOffPirIndication_execv) referenced from ram_db.o(i._Z25TurnOffPirIndication_execv)
 <LI><a href="#[15f]">tag_reader_AccessOnlyExit(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z25tag_reader_AccessOnlyExitPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[153]">tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z25tag_reader_delayed_disarmPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 2 times from tag_reader.o(.constdata)
 <LI><a href="#[155]">tag_reader_delayed_no_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z25tag_reader_delayed_no_armPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 3 times from tag_reader.o(.constdata)
 <LI><a href="#[b]">AutoAnswerAfterRingsOption(unsigned char)</a> from gsm_comm.o(i._Z26AutoAnswerAfterRingsOptionh) referenced 2 times from gsm_comm.o(.data)
 <LI><a href="#[8]">ConfigurableHandlingOption(unsigned char)</a> from gsm_comm.o(i._Z26ConfigurableHandlingOptionh) referenced 2 times from gsm_comm.o(.data)
 <LI><a href="#[b4]">DeviceLockUnlockCheck_exec()</a> from deviceconfigmachine.o(i._Z26DeviceLockUnlockCheck_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b4]">DeviceLockUnlockCheck_exec()</a> from deviceconfigmachine.o(i._Z26DeviceLockUnlockCheck_execv) referenced from deviceconfigmachine.o(i._Z14DeviceUnlockedhhh)
 <LI><a href="#[b4]">DeviceLockUnlockCheck_exec()</a> from deviceconfigmachine.o(i._Z26DeviceLockUnlockCheck_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b4]">DeviceLockUnlockCheck_exec()</a> from deviceconfigmachine.o(i._Z26DeviceLockUnlockCheck_execv) referenced from deviceconfigmachine.o(i._Z26DeviceLockUnlockCheck_execv)
 <LI><a href="#[9f]">Program_Flash_Subpage_exec()</a> from processflash.o(i._Z26Program_Flash_Subpage_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[9f]">Program_Flash_Subpage_exec()</a> from processflash.o(i._Z26Program_Flash_Subpage_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[9f]">Program_Flash_Subpage_exec()</a> from processflash.o(i._Z26Program_Flash_Subpage_execv) referenced from processflash.o(i._Z26Program_Flash_Subpage_execv)
 <LI><a href="#[e]">RFApiVSEG_WiredModelConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z26RFApiVSEG_WiredModelConfigPhPv) referenced 2 times from rfapivseg.o(.data)
 <LI><a href="#[17b]">S_RfApiVSEG_BuildIdForDomo(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</a> from rfapivseg.o(i._Z26S_RfApiVSEG_BuildIdForDomoPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[176]">S_RfApiVSEG_GenTypeTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</a> from rfapivseg.o(i._Z26S_RfApiVSEG_GenTypeTabCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[197]">TEST_ExecuteResetOperation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z26TEST_ExecuteResetOperationPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[160]">tag_reader_AccessOnlyEntry(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z26tag_reader_AccessOnlyEntryPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[15c]">tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z26tag_reader_PerimeterDisarmPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[17d]">GetMessageAdditionalActions(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z27GetMessageAdditionalActionsPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[12e]">GsmStmStreamingErrorHandler(unsigned)</a> from gsm_stm_streaming.o(i._Z27GsmStmStreamingErrorHandlerj) referenced from osal_db.o(.constdata)
 <LI><a href="#[170]">RFApiVSEG_VideoParamsConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z27RFApiVSEG_VideoParamsConfigPhPv) referenced 2 times from rfapivseg.o(.constdata)
 <LI><a href="#[ba]">RamMemoryMap_HardReset_exec()</a> from rammemorymap.o(i._Z27RamMemoryMap_HardReset_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[ba]">RamMemoryMap_HardReset_exec()</a> from rammemorymap.o(i._Z27RamMemoryMap_HardReset_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a3]">Request_video_all_pirs_exec()</a> from videoengine.o(i._Z27Request_video_all_pirs_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a3]">Request_video_all_pirs_exec()</a> from videoengine.o(i._Z27Request_video_all_pirs_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a3]">Request_video_all_pirs_exec()</a> from videoengine.o(i._Z27Request_video_all_pirs_execv) referenced from videoengine.o(i._Z27Request_video_all_pirs_execv)
 <LI><a href="#[179]">S_RfApiVSEG_BuildIdByDevice(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</a> from rfapivseg.o(i._Z27S_RfApiVSEG_BuildIdByDevicePhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[17a]">S_RfApiVSEG_CopyIdFromRFMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</a> from rfapivseg.o(i._Z27S_RfApiVSEG_CopyIdFromRFMsgPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[ae]">SetDeviceBatteryInfReq_exec()</a> from devicebatterystate.o(i._Z27SetDeviceBatteryInfReq_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[ae]">SetDeviceBatteryInfReq_exec()</a> from devicebatterystate.o(i._Z27SetDeviceBatteryInfReq_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[ae]">SetDeviceBatteryInfReq_exec()</a> from devicebatterystate.o(i._Z27SetDeviceBatteryInfReq_execv) referenced from devicebatterystate.o(i._Z27SetDeviceBatteryInfReq_execv)
 <LI><a href="#[1b4]">TEST_INTERNAL_FLASH_READ_ID(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z27TEST_INTERNAL_FLASH_READ_IDPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[101]">UartCallBackTestApplication(OSAL_CyclicBuffer*, unsigned short)</a> from test_api.o(i._Z27UartCallBackTestApplicationP17OSAL_CyclicBuffert) referenced from test_api.o(i._Z28TEST_TestApplicationActivatev)
 <LI><a href="#[f5]">progActivateTestApplication(int, int, int*, void*)</a> from kpdprogs.o(i._Z27progActivateTestApplicationiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[96]">ApiCopyAllCUI2UIHandler_exec()</a> from apistatemachines.o(i._Z28ApiCopyAllCUI2UIHandler_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[96]">ApiCopyAllCUI2UIHandler_exec()</a> from apistatemachines.o(i._Z28ApiCopyAllCUI2UIHandler_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[96]">ApiCopyAllCUI2UIHandler_exec()</a> from apistatemachines.o(i._Z28ApiCopyAllCUI2UIHandler_execv) referenced from apipckprocessing.o(i._Z25ResetCopyAllCUI2UIHandlerv)
 <LI><a href="#[1be]">CPUI_GetLowBatteryIndication(unsigned*)</a> from cpui_func.o(i._Z28CPUI_GetLowBatteryIndicationPj) referenced 12 times from osal_tabls.o(.constdata)
 <LI><a href="#[162]">RFApiVSEG_AddHandshakeSuffix(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z28RFApiVSEG_AddHandshakeSuffixPhS_P22S_RFApiVSEG_DeviceInfo) referenced 3 times from rfapivseg.o(.constdata)
 <LI><a href="#[171]">RFApiVSEG_ArmAwarenessConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z28RFApiVSEG_ArmAwarenessConfigPhPv) referenced 2 times from rfapivseg.o(.constdata)
 <LI><a href="#[16e]">RFApiVSEG_GenLedEnableConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z28RFApiVSEG_GenLedEnableConfigPhPv) referenced 3 times from rfapivseg.o(.constdata)
 <LI><a href="#[16d]">RFApiVSEG_HandleTagInterface(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z28RFApiVSEG_HandleTagInterfacePhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[3f]">RFApiVSEG_RelayPOSESOMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z28RFApiVSEG_RelayPOSESOMessagePhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[196]">TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z28TEST_ExecuteMemReadOperationPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[1b3]">TEST_INTERNAL_FLASH_WRITE_ID(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z28TEST_INTERNAL_FLASH_WRITE_IDPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[a0]">Wait_for_boot_condition_exec()</a> from rb_app.o(i._Z28Wait_for_boot_condition_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[a0]">Wait_for_boot_condition_exec()</a> from rb_app.o(i._Z28Wait_for_boot_condition_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[a0]">Wait_for_boot_condition_exec()</a> from rb_app.o(i._Z28Wait_for_boot_condition_execv) referenced from rb_app.o(i._Z28Wait_for_boot_condition_execv)
 <LI><a href="#[102]">tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z28tag_reader_activate_doorlockPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 2 times from tag_reader.o(.constdata)
 <LI><a href="#[102]">tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z28tag_reader_activate_doorlockPhjjhS_P13TimerStruct_SS_S1_S1_) referenced from tag_reader.o(i._Z28tag_reader_activate_doorlockPhjjhS_P13TimerStruct_SS_S1_S1_)
 <LI><a href="#[1c6]">CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)</a> from cpui_buttons_func.o(i._Z29CPUI_Buttons_EchoNumbers_FunchP17S_CPUI_ButtonInfo) referenced 10 times from osal_tabls.o(.constdata)
 <LI><a href="#[1bc]">CPUI_GetOpenZonesOrTamperLeds(unsigned*)</a> from cpui_func.o(i._Z29CPUI_GetOpenZonesOrTamperLedsPj) referenced 10 times from osal_tabls.o(.constdata)
 <LI><a href="#[c3]">C_PROC_SendLowBatteryInf_exec()</a> from c_proc.o(i._Z29C_PROC_SendLowBatteryInf_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c3]">C_PROC_SendLowBatteryInf_exec()</a> from c_proc.o(i._Z29C_PROC_SendLowBatteryInf_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c3]">C_PROC_SendLowBatteryInf_exec()</a> from c_proc.o(i._Z29C_PROC_SendLowBatteryInf_execv) referenced from c_proc.o(i._Z29C_PROC_SendLowBatteryInf_execv)
 <LI><a href="#[9]">ConfiguarbleHandlingOption_SD(unsigned char)</a> from gsm_comm.o(i._Z29ConfiguarbleHandlingOption_SDh) referenced 2 times from gsm_comm.o(.data)
 <LI><a href="#[161]">RFApiVSEG_GetRSSIForHandshake(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z29RFApiVSEG_GetRSSIForHandshakePhS_P22S_RFApiVSEG_DeviceInfo) referenced 3 times from rfapivseg.o(.constdata)
 <LI><a href="#[195]">TEST_ExecuteMemWriteOperation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z29TEST_ExecuteMemWriteOperationPcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[9c]">power_save_mode_entrance_exec()</a> from power_save_mode_vf.o(i._Z29power_save_mode_entrance_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[9c]">power_save_mode_entrance_exec()</a> from power_save_mode_vf.o(i._Z29power_save_mode_entrance_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[9c]">power_save_mode_entrance_exec()</a> from power_save_mode_vf.o(i._Z29power_save_mode_entrance_execv) referenced from power_save_mode_vf.o(i._Z29power_save_mode_entrance_execv)
 <LI><a href="#[159]">tag_reader_misc_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</a> from tag_reader.o(i._Z29tag_reader_misc_reply_builderPhS_hhjjjS_) referenced 6 times from tag_reader.o(.constdata)
 <LI><a href="#[1c5]">CPUI_Button_Status_Action_Func(unsigned char, S_CPUI_ButtonInfo*)</a> from cpui_buttons_func.o(i._Z30CPUI_Button_Status_Action_FunchP17S_CPUI_ButtonInfo) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[c1]">C_PROC_SendDeviceVersions_exec()</a> from c_proc.o(i._Z30C_PROC_SendDeviceVersions_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c1]">C_PROC_SendDeviceVersions_exec()</a> from c_proc.o(i._Z30C_PROC_SendDeviceVersions_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c1]">C_PROC_SendDeviceVersions_exec()</a> from c_proc.o(i._Z30C_PROC_SendDeviceVersions_execv) referenced from c_proc.o(i._Z30C_PROC_SendDeviceVersions_execv)
 <LI><a href="#[9e]">Erase_Flash_Sectors_Range_exec()</a> from processflash.o(i._Z30Erase_Flash_Sectors_Range_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[9e]">Erase_Flash_Sectors_Range_exec()</a> from processflash.o(i._Z30Erase_Flash_Sectors_Range_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[9e]">Erase_Flash_Sectors_Range_exec()</a> from processflash.o(i._Z30Erase_Flash_Sectors_Range_execv) referenced from processflash.o(i._Z30Erase_Flash_Sectors_Range_execv)
 <LI><a href="#[cb]">IPDE_new_start_cover_test_exec()</a> from videoengine.o(i._Z30IPDE_new_start_cover_test_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[cb]">IPDE_new_start_cover_test_exec()</a> from videoengine.o(i._Z30IPDE_new_start_cover_test_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[cb]">IPDE_new_start_cover_test_exec()</a> from videoengine.o(i._Z30IPDE_new_start_cover_test_execv) referenced from videoengine.o(i._Z30IPDE_new_start_cover_test_execv)
 <LI><a href="#[163]">RFApiVSEG_AddMultipurposeField(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z30RFApiVSEG_AddMultipurposeFieldPhS_P22S_RFApiVSEG_DeviceInfo) referenced 3 times from rfapivseg.o(.constdata)
 <LI><a href="#[3d]">RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z30RFApiVSEG_BuildSecEngStatusMsgPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[40]">RFApiVSEG_ClearDeviceUpdateBit(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z30RFApiVSEG_ClearDeviceUpdateBitPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[10c]">RFApiVSEG_GenSensitivityConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z30RFApiVSEG_GenSensitivityConfigPhPv) referenced 3 times from rfapivseg.o(.constdata)
 <LI><a href="#[10c]">RFApiVSEG_GenSensitivityConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z30RFApiVSEG_GenSensitivityConfigPhPv) referenced from rfapivseg.o(i._Z33RFApiVSEG_SendConfigOnOldProtocolhhhhhb)
 <LI><a href="#[10d]">RFApiVSEG_GenWakeOnRadioConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z30RFApiVSEG_GenWakeOnRadioConfigPhPv) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[10d]">RFApiVSEG_GenWakeOnRadioConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z30RFApiVSEG_GenWakeOnRadioConfigPhPv) referenced from rfapivseg.o(i._Z33RFApiVSEG_SendConfigOnOldProtocolhhhhhb)
 <LI><a href="#[167]">RFApiVSEG_StopGetVidCommandRep(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z30RFApiVSEG_StopGetVidCommandRepPhS_P22S_RFApiVSEG_DeviceInfo) referenced 2 times from rfapivseg.o(.constdata)
 <LI><a href="#[191]">TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z30TEST_ExecuteReadBlockOperationPcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[c8]">c_proc_SendRFDebugMessage_exec()</a> from c_proc.o(i._Z30c_proc_SendRFDebugMessage_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c8]">c_proc_SendRFDebugMessage_exec()</a> from c_proc.o(i._Z30c_proc_SendRFDebugMessage_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c8]">c_proc_SendRFDebugMessage_exec()</a> from c_proc.o(i._Z30c_proc_SendRFDebugMessage_execv) referenced from c_proc.o(i._Z30c_proc_SendRFDebugMessage_execv)
 <LI><a href="#[152]">tag_reader_buttons_not_defined(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</a> from tag_reader.o(i._Z30tag_reader_buttons_not_definedPhjjhS_P13TimerStruct_SS_S1_S1_) referenced 9 times from tag_reader.o(.constdata)
 <LI><a href="#[b0]">GetDeviceBatteryInformation_exe()</a> from devicebatterystate.o(i._Z31GetDeviceBatteryInformation_exev) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b0]">GetDeviceBatteryInformation_exe()</a> from devicebatterystate.o(i._Z31GetDeviceBatteryInformation_exev) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b0]">GetDeviceBatteryInformation_exe()</a> from devicebatterystate.o(i._Z31GetDeviceBatteryInformation_exev) referenced from devicebatterystate.o(i._Z31GetDeviceBatteryInformation_exev)
 <LI><a href="#[bb]">INCOME_MESSAGE_power_cycle_exec()</a> from process_income_message.o(i._Z31INCOME_MESSAGE_power_cycle_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[bb]">INCOME_MESSAGE_power_cycle_exec()</a> from process_income_message.o(i._Z31INCOME_MESSAGE_power_cycle_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[bb]">INCOME_MESSAGE_power_cycle_exec()</a> from process_income_message.o(i._Z31INCOME_MESSAGE_power_cycle_execv) referenced from process_income_message.o(i._Z31INCOME_MESSAGE_power_cycle_execv)
 <LI><a href="#[43]">RFApiVSEG_CopyRxOpenListDevices(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z31RFApiVSEG_CopyRxOpenListDevicesPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[3e]">RFApiVSEG_ErrorMessageCheckCode(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z31RFApiVSEG_ErrorMessageCheckCodePhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[16c]">RFApiVSEG_FilterRepeatedPackets(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z31RFApiVSEG_FilterRepeatedPacketsPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[16f]">RFApiVSEG_MGLSInputsEnDisConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z31RFApiVSEG_MGLSInputsEnDisConfigPhPv) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[17e]">RFApiVSEG_SendAnswer2SKCCommand(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z31RFApiVSEG_SendAnswer2SKCCommandPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[192]">TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z31TEST_ExecuteWriteBlockOperationPcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[79]">Iridium_15_maintenance_scheduler()</a> from scheduler.o(i._Z32Iridium_15_maintenance_schedulerv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[79]">Iridium_15_maintenance_scheduler()</a> from scheduler.o(i._Z32Iridium_15_maintenance_schedulerv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[79]">Iridium_15_maintenance_scheduler()</a> from scheduler.o(i._Z32Iridium_15_maintenance_schedulerv) referenced from scheduler.o(i._Z32Iridium_15_maintenance_schedulerv)
 <LI><a href="#[10f]">RFApiVSEG_BITIntervalModelConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z32RFApiVSEG_BITIntervalModelConfigPhPv) referenced from rfapivseg.o(i.__sti___11_RFApiVSEG_c)
 <LI><a href="#[166]">RFApiVSEG_LearnDeviceOnHandshake(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z32RFApiVSEG_LearnDeviceOnHandshakePhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[c6]">c_proc_SendJDConfigMessages_exec()</a> from c_proc.o(i._Z32c_proc_SendJDConfigMessages_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c6]">c_proc_SendJDConfigMessages_exec()</a> from c_proc.o(i._Z32c_proc_SendJDConfigMessages_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c6]">c_proc_SendJDConfigMessages_exec()</a> from c_proc.o(i._Z32c_proc_SendJDConfigMessages_execv) referenced from c_proc.o(i._Z32c_proc_SendJDConfigMessages_execv)
 <LI><a href="#[144]">c_proc_build_comm_dest_JD_config(unsigned char*, void*)</a> from c_proc.o(i._Z32c_proc_build_comm_dest_JD_configPhPv) referenced 18 times from c_proc.o(.constdata)
 <LI><a href="#[147]">c_proc_build_mode_bits_JD_config(unsigned char*, void*)</a> from c_proc.o(i._Z32c_proc_build_mode_bits_JD_configPhPv) referenced from c_proc.o(.constdata)
 <LI><a href="#[3c]">RFApiVSEG_BuildMasterLearnPayLoad(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z33RFApiVSEG_BuildMasterLearnPayLoadPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[16a]">RFApiVSEG_VideoPacketMarkReceived(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z33RFApiVSEG_VideoPacketMarkReceivedPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[145]">c_proc_build_sim_number_JD_config(unsigned char*, void*)</a> from c_proc.o(i._Z33c_proc_build_sim_number_JD_configPhPv) referenced from c_proc.o(.constdata)
 <LI><a href="#[b8]">Clear_Specific_Device_Machine_Exec()</a> from deviceupdatemachine.o(i._Z34Clear_Specific_Device_Machine_Execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[b8]">Clear_Specific_Device_Machine_Exec()</a> from deviceupdatemachine.o(i._Z34Clear_Specific_Device_Machine_Execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[b8]">Clear_Specific_Device_Machine_Exec()</a> from deviceupdatemachine.o(i._Z34Clear_Specific_Device_Machine_Execv) referenced from deviceupdatemachine.o(i._Z34Clear_Specific_Device_Machine_Execv)
 <LI><a href="#[165]">RFApiVSEG_BuildOPDISecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z34RFApiVSEG_BuildOPDISecEngStatusMsgPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[16b]">S_RFApiVSEG_TriggerFrequencyOffset(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z34S_RFApiVSEG_TriggerFrequencyOffsetPhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[194]">TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z34TEST_ExecuteSendCommandToGSMModulePcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[af]">UpdateDeviceBatteryInformation_exe()</a> from devicebatterystate.o(i._Z34UpdateDeviceBatteryInformation_exev) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[af]">UpdateDeviceBatteryInformation_exe()</a> from devicebatterystate.o(i._Z34UpdateDeviceBatteryInformation_exev) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[af]">UpdateDeviceBatteryInformation_exe()</a> from devicebatterystate.o(i._Z34UpdateDeviceBatteryInformation_exev) referenced from devicebatterystate.o(i._Z34UpdateDeviceBatteryInformation_exev)
 <LI><a href="#[c4]">C_PROC_SendTechnicalInformation_exe()</a> from c_proc.o(i._Z35C_PROC_SendTechnicalInformation_exev) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c4]">C_PROC_SendTechnicalInformation_exe()</a> from c_proc.o(i._Z35C_PROC_SendTechnicalInformation_exev) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c4]">C_PROC_SendTechnicalInformation_exe()</a> from c_proc.o(i._Z35C_PROC_SendTechnicalInformation_exev) referenced from c_proc.o(i._Z35C_PROC_SendTechnicalInformation_exev)
 <LI><a href="#[172]">RFApiVSEG_GenIRBlockingWindowConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z35RFApiVSEG_GenIRBlockingWindowConfigPhPv) referenced 2 times from rfapivseg.o(.constdata)
 <LI><a href="#[190]">TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z35TEST_ExecuteEEpromOrRfReadOperationPcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[158]">tag_reader_req_denied_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</a> from tag_reader.o(i._Z35tag_reader_req_denied_reply_builderPhS_hhjjjS_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[42]">RFApiVSEG_FullOrPartialConfigMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</a> from rfapivseg.o(i._Z36RFApiVSEG_FullOrPartialConfigMessagePhS_P22S_RFApiVSEG_DeviceInfo) referenced from rfapivseg.o(.constdata)
 <LI><a href="#[ca]">SIREN_send_new_protocol_command_exec()</a> from siren.o(i._Z36SIREN_send_new_protocol_command_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[ca]">SIREN_send_new_protocol_command_exec()</a> from siren.o(i._Z36SIREN_send_new_protocol_command_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[ca]">SIREN_send_new_protocol_command_exec()</a> from siren.o(i._Z36SIREN_send_new_protocol_command_execv) referenced from siren.o(i._Z36SIREN_send_new_protocol_command_execv)
 <LI><a href="#[18f]">TEST_ExecuteEEpromOrRfWriteOperation(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z36TEST_ExecuteEEpromOrRfWriteOperationPcth) referenced 2 times from osal_tabls.o(.constdata)
 <LI><a href="#[146]">c_proc_build_customer_code_JD_config(unsigned char*, void*)</a> from c_proc.o(i._Z36c_proc_build_customer_code_JD_configPhPv) referenced from c_proc.o(.constdata)
 <LI><a href="#[143]">c_proc_build_regular_entry_JD_config(unsigned char*, void*)</a> from c_proc.o(i._Z36c_proc_build_regular_entry_JD_configPhPv) referenced 17 times from c_proc.o(.constdata)
 <LI><a href="#[157]">tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</a> from tag_reader.o(i._Z36tag_reader_req_approve_reply_builderPhS_hhjjjS_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[156]">tag_reader_tag_present_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</a> from tag_reader.o(i._Z36tag_reader_tag_present_reply_builderPhS_hhjjjS_) referenced 10 times from tag_reader.o(.constdata)
 <LI><a href="#[c2]">SendCommunicationProtocolInf_ICI_exec()</a> from c_proc.o(i._Z37SendCommunicationProtocolInf_ICI_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[c2]">SendCommunicationProtocolInf_ICI_exec()</a> from c_proc.o(i._Z37SendCommunicationProtocolInf_ICI_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[c2]">SendCommunicationProtocolInf_ICI_exec()</a> from c_proc.o(i._Z37SendCommunicationProtocolInf_ICI_execv) referenced from c_proc.o(i._Z37SendCommunicationProtocolInf_ICI_execv)
 <LI><a href="#[1c0]">CPUI_GetPartitionPerimeterAnnexZoneLeds(unsigned*)</a> from cpui_func.o(i._Z39CPUI_GetPartitionPerimeterAnnexZoneLedsPj) referenced 12 times from osal_tabls.o(.constdata)
 <LI><a href="#[d]">RFApiVSEG_GenInformationMsgPeriodConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z39RFApiVSEG_GenInformationMsgPeriodConfigPhPv) referenced 6 times from rfapivseg.o(.constdata)
 <LI><a href="#[d]">RFApiVSEG_GenInformationMsgPeriodConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z39RFApiVSEG_GenInformationMsgPeriodConfigPhPv) referenced 2 times from rfapivseg.o(.data)
 <LI><a href="#[c]">RFApiVSEG_GenSupervisionMsgPeriodConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z39RFApiVSEG_GenSupervisionMsgPeriodConfigPhPv) referenced 4 times from rfapivseg.o(.constdata)
 <LI><a href="#[c]">RFApiVSEG_GenSupervisionMsgPeriodConfig(unsigned char*, void*)</a> from rfapivseg.o(i._Z39RFApiVSEG_GenSupervisionMsgPeriodConfigPhPv) referenced 2 times from rfapivseg.o(.data)
 <LI><a href="#[15a]">tag_reader_tag_present_timeout_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</a> from tag_reader.o(i._Z44tag_reader_tag_present_timeout_reply_builderPhS_hhjjjS_) referenced from tag_reader.o(.constdata)
 <LI><a href="#[33]">DMA_ISR()</a> from dma_isr.o(i._Z7DMA_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[2a]">RTC_ISR()</a> from rtc_isr.o(i._Z7RTC_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[121]">InitTask(void*)</a> from init_task.o(i._Z8InitTaskPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[17f]">NoAction(S_CPUI_ButtonInfo*)</a> from kpdoutstub.o(i._Z8NoActionP17S_CPUI_ButtonInfo) referenced from kpdoutstub.o(.constdata)
 <LI><a href="#[cd]">RfRxDone(OSAL_CyclicBuffer*, unsigned short)</a> from rfcallbackprocedures.o(i._Z8RfRxDoneP17OSAL_CyclicBuffert) referenced from init_func.o(i._Z14INIT_InitRadioh)
 <LI><a href="#[cc]">RfTxDone(OSAL_CyclicBuffer*)</a> from rfcallbackprocedures.o(i._Z8RfTxDoneP17OSAL_CyclicBuffer) referenced from init_func.o(i._Z14INIT_InitRadioh)
 <LI><a href="#[1b5]">TEST_ISN(char*, unsigned short, unsigned char)</a> from test_func.o(i._Z8TEST_ISNPcth) referenced from osal_tabls.o(.constdata)
 <LI><a href="#[e8]">learnKPD(int, int, int*, void*)</a> from kpdprogs.o(i._Z8learnKPDiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[e9]">learnNPT(int, int, int*, void*)</a> from kpdprogs.o(i._Z8learnNPTiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[f1]">progTest(int, int, int*, void*)</a> from kpdprogs.o(i._Z8progTestiiPiPv) referenced from kpdoutstub.o(i._Z19initIntefaceMachinev)
 <LI><a href="#[23]">I2C_0_ISR()</a> from i2c_isr.o(i._Z9I2C_0_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[24]">I2C_1_ISR()</a> from i2c_isr.o(i._Z9I2C_1_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[75]">Init_exec()</a> from init.o(i._Z9Init_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[75]">Init_exec()</a> from init.o(i._Z9Init_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[75]">Init_exec()</a> from init.o(i._Z9Init_execv) referenced from init.o(i._Z9Init_execv)
 <LI><a href="#[85]">LINK_exec()</a> from link.o(i._Z9LINK_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[85]">LINK_exec()</a> from link.o(i._Z9LINK_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[85]">LINK_exec()</a> from link.o(i._Z9LINK_execv) referenced 2 times from link.o(i._Z9LINK_execv)
 <LI><a href="#[67]">MSME_exec()</a> from msme.o(i._Z9MSME_execv) referenced from scenarios.o(i._Z13GetFunctionIdPFvvE)
 <LI><a href="#[67]">MSME_exec()</a> from msme.o(i._Z9MSME_execv) referenced from msme.o(i._Z15MSME_state_donev)
 <LI><a href="#[67]">MSME_exec()</a> from msme.o(i._Z9MSME_execv) referenced from msme.o(i._Z15MSME_state_failv)
 <LI><a href="#[67]">MSME_exec()</a> from msme.o(i._Z9MSME_execv) referenced from msme.o(i._Z16MSME_state_readyv)
 <LI><a href="#[67]">MSME_exec()</a> from msme.o(i._Z9MSME_execv) referenced from scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
 <LI><a href="#[139]">RFManager(void*)</a> from rf_manager_task.o(i._Z9RFManagerPv) referenced from osal_db.o(.constdata)
 <LI><a href="#[1e]">UART0_ISR()</a> from uart_isr.o(i._Z9UART0_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[1f]">UART1_ISR()</a> from uart_isr.o(i._Z9UART1_ISRv) referenced from cstartup_m.o(RESET)
 <LI><a href="#[21]">UART3_ISR()</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[1dd]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a> from lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD0Ev) referenced from lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1dc]">__cxxabiv1::__class_type_info::~__class_type_info()</a> from lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD1Ev) referenced from lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1df]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a> from lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD0Ev) referenced from lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1de]">__cxxabiv1::__si_class_type_info::~__si_class_type_info()</a> from lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD1Ev) referenced from lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[27]">SSP::SSP0_isr()</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[1c9]">C2AMess::data()</a> from c2amess.o(i._ZN7C2AMess4dataEv) referenced from c2amess.o(.constdata__ZTV7C2AMess)
 <LI><a href="#[1ca]">C2AMess::length()</a> from c2amess.o(i._ZN7C2AMess6lengthEv) referenced from c2amess.o(.constdata__ZTV7C2AMess)
 <LI><a href="#[1cb]">C2AMess::isTaken()</a> from c2amess.o(i._ZN7C2AMess7isTakenEv) referenced from c2amess.o(.constdata__ZTV7C2AMess)
 <LI><a href="#[1c8]">C2AMess::calc_sum()</a> from c2amess.o(i._ZN7C2AMess8calc_sumEv) referenced from c2amess.o(.constdata__ZTV7C2AMess)
 <LI><a href="#[1cc]">C2AMess::operator =(int)</a> from c2amess.o(i._ZN7C2AMessaSEi) referenced from c2amess.o(.constdata__ZTV7C2AMess)
 <LI><a href="#[1ce]">C2AMess::operator &lang;&lang;(const char*)</a> from c2amess.o(i._ZN7C2AMesslsEPKc) referenced from c2amess.o(.constdata__ZTV7C2AMess)
 <LI><a href="#[1cf]">C2AMess::operator &lang;&lang;(const User&)</a> from c2amess.o(i._ZN7C2AMesslsERK4User) referenced from c2amess.o(.constdata__ZTV7C2AMess)
 <LI><a href="#[1cd]">C2AMess::operator &lang;&lang;(int)</a> from c2amess.o(i._ZN7C2AMesslsEi) referenced from c2amess.o(.constdata__ZTV7C2AMess)
 <LI><a href="#[1d0]">SysPower::getVoltage()</a> from syspower.o(i._ZN8SysPower10getVoltageEv) referenced from syspower.o(.constdata__ZTV8SysPower)
 <LI><a href="#[1d1]">SysPower::getDCJackVoltage()</a> from syspower.o(i._ZN8SysPower16getDCJackVoltageEv) referenced from syspower.o(.constdata__ZTV8SysPower)
 <LI><a href="#[1d3]">SysSound::setBeepVol(int)</a> from syssound.o(i._ZN8SysSound10setBeepVolEi) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1d9]">SysSound::isFullDuplex()</a> from syssound.o(i._ZN8SysSound12isFullDuplexEv) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1d5]">SysSound::setMicFixAutoMode(int, int)</a> from syssound.o(i._ZN8SysSound17setMicFixAutoModeEii) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1db]">SysSound::stop()</a> from syssound.o(i._ZN8SysSound4stopEv) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1da]">SysSound::isMicOn()</a> from syssound.o(i._ZN8SysSound7isMicOnEv) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1d8]">SysSound::muteMic()</a> from syssound.o(i._ZN8SysSound7muteMicEv) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1d6]">SysSound::muteSpk(int)</a> from syssound.o(i._ZN8SysSound7muteSpkEi) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1d7]">SysSound::muteSpk(int, unsigned*)</a> from syssound.o(i._ZN8SysSound7muteSpkEiPj) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1d4]">SysSound::setMicVol(int)</a> from syssound.o(i._ZN8SysSound9setMicVolEi) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[1d2]">SysSound::setSpkVol(int)</a> from syssound.o(i._ZN8SysSound9setSpkVolEi) referenced from syssound.o(.constdata__ZTV8SysSound)
 <LI><a href="#[19]">Watchdog::WDTHandler()</a> from cstartup_m.o(.text) referenced from cstartup_m.o(RESET)
 <LI><a href="#[1e4]">__main</a> from __main.o(!!!main) referenced from cstartup_m.o(.text)
 <LI><a href="#[1e1]">__sti___11_RFApiVSEG_c</a> from rfapivseg.o(i.__sti___11_RFApiVSEG_c) referenced from rfapivseg.o(.init_array)
 <LI><a href="#[1e2]">__sti___12_KpdOutStub_c</a> from kpdoutstub.o(i.__sti___12_KpdOutStub_c) referenced from kpdoutstub.o(.init_array)
 <LI><a href="#[1e3]">__sti___6_MAIN_C</a> from main.o(i.__sti___6_MAIN_C) referenced from main.o(.init_array)
 <LI><a href="#[1e0]">__sti___7_Timer_c</a> from timer.o(i.__sti___7_Timer_c) referenced from timer.o(.init_array)
 <LI><a href="#[4b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[111]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[47]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[f8]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from osal_port.o(i._Z20OSAL_PortSuspendTaskj)
 <LI><a href="#[48]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[fc]">rt_mbx_check</a> from rt_mailbox.o(i.rt_mbx_check) referenced from osal_port.o(i._Z22OSAL_PortIsMailBoxFullPv)
 <LI><a href="#[fc]">rt_mbx_check</a> from rt_mailbox.o(i.rt_mbx_check) referenced from osal_port.o(i._Z23OSAL_PortIsMailBoxEmptyPv)
 <LI><a href="#[fd]">rt_mbx_init</a> from rt_mailbox.o(i.rt_mbx_init) referenced from osal_port.o(i._Z22OSAL_PortMailBoxCreatetPPv)
 <LI><a href="#[100]">rt_mbx_send</a> from rt_mailbox.o(i.rt_mbx_send) referenced from osal_port.o(i._Z26OSAL_PortSendMessageToTaskPvS_)
 <LI><a href="#[fe]">rt_mbx_wait</a> from rt_mailbox.o(i.rt_mbx_wait) referenced from osal_port.o(i._Z22OSAL_PortWaitOnMessagePv)
 <LI><a href="#[f7]">rt_mut_init</a> from rt_mutex.o(i.rt_mut_init) referenced from osal_port.o(i._Z20OSAL_PortMutexCreatePPj)
 <LI><a href="#[fa]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from osal_port.o(i._Z21OSAL_PortMutexReleasePj)
 <LI><a href="#[fa]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from osal_port.o(i._Z26OSAL_PortForceMutexReleasePj)
 <LI><a href="#[f9]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from osal_port.o(i._Z21OSAL_PortMutexCapturePj)
 <LI><a href="#[cf]">rt_sys_init</a> from rt_task.o(i.rt_sys_init) referenced from osal_port.o(i._Z14OSAL_PortStartv)
 <LI><a href="#[d6]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced from osal_port.o(i._Z19OSAL_PortTaskCreatePFvPvEPKatS_tPjS4_)
 <LI><a href="#[d0]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from osal_port.o(i._Z14__keilInitTaskv)
 <LI><a href="#[d0]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from osal_port.o(i._Z19OSAL_PortTaskDeletev)
 <LI><a href="#[10b]">rt_tsk_lock</a> from rt_system.o(i.rt_tsk_lock) referenced from osal_port.o(i._Z33OSAL_PortTaskDisableContextSwitchv)
 <LI><a href="#[10a]">rt_tsk_unlock</a> from rt_system.o(i.rt_tsk_unlock) referenced from osal_port.o(i._Z32OSAL_PortTaskEnableContextSwitchv)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e6]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1e8]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c93]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c94]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c95]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[c96]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[c97]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1e7]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c98]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1e9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c99]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1ed]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SSP_Init(unsigned char, unsigned char, unsigned) &rArr; OSAL_PortMutexCreate(unsigned**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c9a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[238]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1f0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c9b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1f2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c9c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c9d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>OSAL_PortTickerHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal_port.o(i.OSAL_PortTickerHandler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TickerHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mps_cm3.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(.text)
</UL>
<P><STRONG><a name="[1f6]"></a>OSAL_Reset()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_interrupt.o(i._Z10OSAL_Resetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_Reset() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_power_cycle_exec()
</UL>

<P><STRONG><a name="[1f8]"></a>num2decstr2(unsigned long, unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, util.o(i._Z11num2decstr2mPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num2decstr2(unsigned long, unsigned char*) &rArr; num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTimeStamp(unsigned char*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[342]"></a>LED_ColdInit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_api.o(i._Z12LED_ColdInitv))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[2f5]"></a>GetCoreVersion()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintenance.o(i._Z14GetCoreVersionv))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIridiumVersion(unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[1fa]"></a>TimerSetTimeout(SYS_TASK*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, processsystemtask.o(i._Z15TimerSetTimeoutP8SYS_TASKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerSetTimeout(SYS_TASK*, unsigned) &rArr; SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_frame()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_GET_BIT_RESULT_exec()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entry_Exit_Beeps_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRingTone()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingTone_exec()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions_exec()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFtimerInit()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Flash_Sectors_Range_exec()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceLockUnlockCheck_exec()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest_exec()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfParams()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_target(U_UINT32*, unsigned char, unsigned char)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_done(unsigned char*)
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_open_pir()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingCheck()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUnlocked(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToRsuDelayState(DEVICE_REMOTE_UPDATE_STATE_E)
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_video_ack()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[189]"></a>ResetButtonAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z17ResetButtonActionP17S_CPUI_ButtonInfo))
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[af0]"></a>FL_USER_ID2logical(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fl_types.o(i._Z18FL_USER_ID2logicalh))
<BR><BR>[Called By]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_USER_access(S_USER*, unsigned char)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[13a]"></a>RfTaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_manager_task.o(i._Z18RfTaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[822]"></a>InitFit2RulesSearch(unsigned short*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apicmdprocessing.o(i._Z19InitFit2RulesSearchPt))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGetAllCmd(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[136]"></a>CPUITaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpui_task_manager.o(i._Z20CPUITaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>InitTaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_task.o(i._Z20InitTaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>SMT_TaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, smt_task.o(i._Z20SMT_TaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>SSP_SPI_MutexRelease(unsigned*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssp_spi_api.o(i._Z20SSP_SPI_MutexReleasePj))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexRelease(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GeneralAcquireRlease_SSP_Mutex(unsigned char, unsigned char)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AcquireRlease_SSPMutex(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1fe]"></a>TimerTimeoutExpired1(SYS_TASK*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, processsystemtask.o(i._Z20TimerTimeoutExpired1P8SYS_TASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerTimeoutExpired1(SYS_TASK*) &rArr; TimerTimeoutExpired(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_wait4pending()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_GET_BIT_RESULT_exec()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entry_Exit_Beeps_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingTone_exec()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions_exec()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Flash_Sectors_Range_exec()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceLockUnlockCheck_exec()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest_exec()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfParams()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_target(U_UINT32*, unsigned char, unsigned char)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_done(unsigned char*)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingCheck()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffPirIndication_exec()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_handle_call(E_VOICE_DEVICE)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[134]"></a>FlashTaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_manager_task.o(i._Z21FlashTaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>FL_NUMBER_logical_read(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fl_types.o(i._Z22FL_NUMBER_logical_readt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_NUMBER_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_NUMBER_ptr(unsigned short)
</UL>

<P><STRONG><a name="[202]"></a>RadioAPI_FreqToRegister(void*, void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfdrv_api.o(i._Z23RadioAPI_FreqToRegisterPvS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RadioAPI_FreqToRegister(void*, void*, unsigned) &rArr; Radio_ConvertFreqToRegister(void*, void*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ConvertFreqToRegister(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetFrequency(char*, unsigned short, unsigned char)
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
</UL>

<P><STRONG><a name="[204]"></a>RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ram_db.o(i._Z24RAM_DB_num_open_alarm_2Mh20E_DETECTOR_SCAN_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_zone_partition(SECURITY_PARTITION_TYPE_E, unsigned char, E_DETECTOR_SCAN_MODE, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[bad]"></a>WriteVirtualSnObj_Config(TWriteVirtualSnObj*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, virtualsnobj.o(i._Z24WriteVirtualSnObj_ConfigP18TWriteVirtualSnObjj))
<BR><BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSetVirtualSnPoseso(unsigned char*, MSME_MSG_E*, unsigned char*)
</UL>

<P><STRONG><a name="[806]"></a>FL_RF_SEC_ZONE_ID2logical(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fl_types.o(i._Z25FL_RF_SEC_ZONE_ID2logicalh))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustOPDDSensitivity(int, int)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[12c]"></a>GsmStmControlErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z25GsmStmControlErrorHandlerj))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[356]"></a>CPUI_GetLedActionFromTable(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpui_func.o(i._Z26CPUI_GetLedActionFromTableh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[206]"></a>OSAL_PortGetSelfTaskHandle()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal_port.o(i._Z26OSAL_PortGetSelfTaskHandlev))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>

<P><STRONG><a name="[c4c]"></a>DiagTest_CopyBattLevelToRam(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, test_diag.o(i._Z27DiagTest_CopyBattLevelToRamjPhh))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
</UL>

<P><STRONG><a name="[208]"></a>FL_TIME_STRING_logical_read(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fl_types.o(i._Z27FL_TIME_STRING_logical_readt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_TIME_STRING_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_STRING_ptr(unsigned short)
</UL>

<P><STRONG><a name="[12e]"></a>GsmStmStreamingErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gsm_stm_streaming.o(i._Z27GsmStmStreamingErrorHandlerj))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[358]"></a>CPUI_GetLedBlinkTypeFromTable(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpui_func.o(i._Z29CPUI_GetLedBlinkTypeFromTableh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[209]"></a>SECURITY_SetArmAwarnessUpdate()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security.o(i._Z29SECURITY_SetArmAwarnessUpdatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SECURITY_SetArmAwarnessUpdate() &rArr; Timer_InformDeviceArmStatus(unsigned char) &rArr; Timer_SendOpenRx() &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
</UL>

<P><STRONG><a name="[20b]"></a>CPUI_NotifyStateChangeGoodBeep()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpui_api.o(i._Z30CPUI_NotifyStateChangeGoodBeepv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CPUI_NotifyStateChangeGoodBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StartGoodPinCodeFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_TypePinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_RunProgFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[7fb]"></a>FL_DOMAIN_EXTANSION_ID2logical(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fl_types.o(i._Z30FL_DOMAIN_EXTANSION_ID2logicalh))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[35a]"></a>CPUI_GetConEventStatusFromTable(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpui_func.o(i._Z31CPUI_GetConEventStatusFromTableh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[c5d]"></a>CPUI_Buttons_UpdateSlaveCurrentState(S_CPUI_ButtonInfo*, unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z36CPUI_Buttons_UpdateSlaveCurrentStateP17S_CPUI_ButtonInfoh))
<BR><BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse(unsigned char*, int)
</UL>

<P><STRONG><a name="[20d]"></a>GSM_Control_API_ClearCurrentStatistics(MODEM_STATISTICS*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm_api.o(i._Z38GSM_Control_API_ClearCurrentStatisticsP16MODEM_STATISTICS))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[20f]"></a>RPC_init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rpc.o(i._Z8RPC_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RPC_init() &rArr; CopyParamTableFromEpromToRam() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyParamTableFromEpromToRam()
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[24]"></a>I2C_1_ISR()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_isr.o(i._Z9I2C_1_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_1_ISR() &rArr; I2C_ISR(unsigned char) &rArr; SendMessageToI2CTask(unsigned short, unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ISR(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART1_ISR()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_isr.o(i._Z9UART1_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART1_ISR() &rArr; UART_ISR(unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[1df]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1ca]"></a>C2AMess::length()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, c2amess.o(i._ZN7C2AMess6lengthEv))
<BR>[Address Reference Count : 1]<UL><LI> c2amess.o(.constdata__ZTV7C2AMess)
</UL>
<P><STRONG><a name="[1cd]"></a>C2AMess::operator &lang;&lang;(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, c2amess.o(i._ZN7C2AMesslsEi))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c2amess.o(.constdata__ZTV7C2AMess)
</UL>
<P><STRONG><a name="[1d3]"></a>SysSound::setBeepVol(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSound10setBeepVolEi))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[c71]"></a>std::type_info::~type_info()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, type_info_dtor.o(i._ZNSt9type_infoD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info()
</UL>

<P><STRONG><a name="[c9e]"></a>std::type_info::~type_info__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, type_info_dtor.o(i._ZNSt9type_infoD1Ev), UNUSED)

<P><STRONG><a name="[231]"></a>sfx_get_voltage_temperature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sigfox_port.o(i.sfx_get_voltage_temperature), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendOutOfBand
</UL>

<P><STRONG><a name="[1ec]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c9f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ca0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[213]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[ca1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[215]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[ca2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ca3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[217]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[ca4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ca5]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[ca6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ca7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[218]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[ca8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ca9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[caa]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cab]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[cac]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[cad]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[cae]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[caf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[cb0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[cb1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cb2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1f1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[cb3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[cb4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[cb5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[cb6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[cb7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[cb8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[5c9]"></a>__asm___15_flash_iap_api_c_iap_func___Z27OSAL_PortEnableCpuInterruptv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_iap_api.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check_sectors(unsigned, unsigned)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_RAM2Flash(unsigned char*, unsigned char*, unsigned, unsigned)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sectors(unsigned, unsigned)
</UL>

<P><STRONG><a name="[5c8]"></a>__asm___15_flash_iap_api_c_iap_func___Z28OSAL_PortDisableCpuInterruptv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_iap_api.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check_sectors(unsigned, unsigned)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_RAM2Flash(unsigned char*, unsigned char*, unsigned, unsigned)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sectors(unsigned, unsigned)
</UL>

<P><STRONG><a name="[c8e]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[63d]"></a>os_set_env</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortStart()
</UL>

<P><STRONG><a name="[cb9]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[cba]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_Handler &rArr; rt_stk_check &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[21a]"></a>Sys_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[ba2]"></a>__asm___14_ProcessFlash_c_78c4b159___Z27OSAL_PortEnableCpuInterruptv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, processflash.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
</UL>

<P><STRONG><a name="[ba1]"></a>__asm___14_ProcessFlash_c_78c4b159___Z28OSAL_PortDisableCpuInterruptv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, processflash.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
</UL>

<P><STRONG><a name="[c79]"></a>__asm___6_MAIN_C_SysPwr___Z27OSAL_PortEnableCpuInterruptv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cbb]"></a>__asm___6_MAIN_C_SysPwr___Z28OSAL_PortDisableCpuInterruptv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.emb_text), UNUSED)

<P><STRONG><a name="[56b]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortRand()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
</UL>

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SSP1Handler()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER_3_ISR()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART3_ISR()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SSP::SSP0_isr()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Watchdog::WDTHandler()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cstartup_m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[240]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cstartup_m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[21d]"></a>SfxInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sigfox_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SfxInit &rArr; sfx_set_nv_mem &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_set_nv_mem
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_malloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_get_nv_mem
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Pn9
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSFXLibrary()
</UL>

<P><STRONG><a name="[223]"></a>SfxClose</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sigfox_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SfxClose &rArr; sfx_free &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_free
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_close
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[22b]"></a>SfxSendFrame</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, sigfox_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = SfxSendFrame &rArr; MakeFrame &rArr; ComputeAES &rArr; sfx_AES_128_cbc_encrypt &rArr; PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned) &rArr; aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_delay
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeScrambling
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[22f]"></a>SfxSendBit</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sigfox_frame.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_delay
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeScrambling
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_frequency
</UL>

<P><STRONG><a name="[230]"></a>SfxSendOutOfBand</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, sigfox_frame.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_malloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_get_voltage_temperature
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_free
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_delay
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeScrambling
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_frequency
</UL>

<P><STRONG><a name="[232]"></a>SfxTxTestMode</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, sigfox_frame.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_delay
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_change_frequency
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeScrambling
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_frequency
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Pn9
</UL>

<P><STRONG><a name="[cbc]"></a>SfxGetTxState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sigfox_frame.o(.text), UNUSED)

<P><STRONG><a name="[cbd]"></a>SfxGetLibVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sigfox_frame.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>crc16</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, sigfox_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
</UL>

<P><STRONG><a name="[229]"></a>ComputeAES</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, sigfox_hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ComputeAES &rArr; sfx_AES_128_cbc_encrypt &rArr; PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned) &rArr; aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_AES_128_cbc_encrypt
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
</UL>

<P><STRONG><a name="[22c]"></a>ComputeScrambling</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, sigfox_scramb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ComputeScrambling
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendFrame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxTxTestMode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendOutOfBand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendBit
</UL>

<P><STRONG><a name="[235]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArgByte(unsigned char*)
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[bed]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ConvertFreqToRegister(void*, void*, unsigned)
</UL>

<P><STRONG><a name="[cbe]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArgByte(unsigned char*)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectCharBuf(unsigned char*, unsigned short*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[237]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[214]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[1ef]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[275]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialLen(unsigned char*, bool)
</UL>

<P><STRONG><a name="[467]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DecodeIncomingMsgCmd(char*, unsigned short, unsigned short*, char**)
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_handler_exec()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
</UL>

<P><STRONG><a name="[915]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
</UL>

<P><STRONG><a name="[26f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillString(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActivationCode()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentIP(unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[4a7]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*)
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse(unsigned char*, int)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[239]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[cbf]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate(unsigned char*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init(unsigned char*, bool)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyKFEntity(unsigned short, unsigned short, unsigned short)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[cc0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cc1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cc2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_Init(unsigned char)
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CreateTempTaskWithPendingMessage()
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test_exec()
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_ClearCurrentStatistics(MODEM_STATISTICS*)
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_ClearAllDeviceBatteryLevel()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrCreateEntry(unsigned short, unsigned char, unsigned*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage_exec()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions_exec()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[23d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[23c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[233]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_InitComStruct()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_RecognizeButtonPressed()
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_StaticDataPtrSet(void*)
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_ClearAllDeviceBatteryLevel()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_InitInterruptTable()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_GET_BIT_RESULT_exec()
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse(unsigned char*, int)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*)
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearArgsStruct()
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_send_open_rx(unsigned char*, unsigned char*)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAES
</UL>

<P><STRONG><a name="[cc3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cc4]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[cc5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cc6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cc7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[216]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[cc8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cc9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c92]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1f3]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1ea]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[cca]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c45]"></a>OSAL_PortTaskEnterCriticalSectionAsm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_port_asm.o(OSAL_PORT))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
</UL>

<P><STRONG><a name="[c3f]"></a>OSAL_PortTaskExitCriticalSectionAsm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osal_port_asm.o(OSAL_PORT))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>

<P><STRONG><a name="[70d]"></a>OSAL_SetTaskHandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osal_db.o(i.OSAL_SetTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CreateTempTaskWithPendingMessage()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[241]"></a>CLOCK_init(unsigned char*, bool)</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, clock.o(i._Z10CLOCK_initPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLOCK_init(unsigned char*, bool) &rArr; IsValidDate(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CalcDayOfWeek(unsigned short, unsigned char, unsigned char)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeAndDate(RTC_Time_t*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate(unsigned char*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[246]"></a>CODEC_Init(unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, codec_api.o(i._Z10CODEC_Inith))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CODEC_Init(unsigned char) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgToGPIO(unsigned char, unsigned char, unsigned char)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[24b]"></a>Calc_CRC32(unsigned long, unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, processflash.o(i._Z10Calc_CRC32mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Calc_CRC32(unsigned long, unsigned long) &rArr; ActivateCRC32Calc() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateCRC32Calc()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[24d]"></a>Close_LINK()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, link.o(i._Z10Close_LINKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close_LINK() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[286]"></a>CreateNewQ(sEventDrivenQ*, Q_TYPE_E)</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, eventdrivenq.o(i._Z10CreateNewQP13sEventDrivenQ8Q_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmQ()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_Q_init()
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsmeQ()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVideoQ()
<LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfQ()
</UL>

<P><STRONG><a name="[24f]"></a>DialHangUp()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, voice_manager.o(i._Z10DialHangUpv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DialHangUp() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_clear_panic()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDtmfTimout_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[201]"></a>ENTRY_read(unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fl_entry.o(i._Z10ENTRY_readt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRSSIValue(int, int, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSIValue(int, int)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLQValue(int, int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCyberMode(unsigned char*)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_read(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLowBattIndication()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrCreateEntry(unsigned short, unsigned char, unsigned*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxDailySigFoxMessages()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetIsVATDisabled()
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Info_InPanel(unsigned char, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteGroupTypeDevices(unsigned char)
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_read_logic(U_UINT16)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_regular_entry_JD_config(unsigned char*, void*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_comm_dest_JD_config(unsigned char*, void*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialSequencePhoneId(unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_STUN_read()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysinactivity_ptr()
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_comm_status()
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRemoteCallInRings()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VIDEO_DIAL_SEQUENCE_read(unsigned char)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_TIME_STRING_logical_read(unsigned short)
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DATE_STRING_logical_read(unsigned short)
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTENDED_PHONE_NUM_read(unsigned char)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTENDED_CP_PARAMS_READ()
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_label(unsigned char)
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_STRING_logical_read(unsigned short)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NUMBER_logical_read(unsigned short)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_read(unsigned char)
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DIAL_SEQUENCE_read(unsigned char)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PINCODE_read(unsigned char)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RULES_read(unsigned char)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_APN_read(unsigned char)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFibroHeader(unsigned char*)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommStatus(PANEL_COMM_STATE_E)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DOMAIN_EXTANSION_read(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PHONE_NUM_read(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfControlFromPanelEntry(unsigned char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAlwaysAttachMode()
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJammSensitivity()
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJammDetectDur()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustomerCode()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPeriodicRetry(bool)
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_Embedded_Diagnostic_msg(unsigned short, unsigned char)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigFoxEnDis(unsigned char, unsigned char)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMagMsgEnabled()
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamControlPanelClearLowBattIndication()
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_KF_lock_options_ptr()
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetTagOperation()
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_event(E_CONTROL_PANEL_EVENT)
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSK2TestEnabled()
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeakerPhone()
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoiceWindow()
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCyberSequenceDeltaThreshold()
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_save_params()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKeypadEntity(unsigned char*, int*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOldSirenCmd(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_SetSliderWindowTest()
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_IsEfmTr5WithEntryBeeps()
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_tr5_entry_beep_builder(unsigned char*)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_read_logic(unsigned char*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GenIRBlockingWindowConfig(unsigned char*, void*)
</UL>

<P><STRONG><a name="[2b]"></a>EXTI_0_ISR()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hardware_vf.o(i._Z10EXTI_0_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_0_ISR()
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClrPend(unsigned long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI_1_ISR()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hardware_vf.o(i._Z10EXTI_1_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_1_ISR()
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClrPend(unsigned long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI_2_ISR()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rf_isr.o(i._Z10EXTI_2_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI_2_ISR() &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtInt2Polar(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI_3_ISR()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hardware_vf.o(i._Z10EXTI_3_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI_3_ISR() &rArr; BUTTONS_ISR() &rArr; CPUI_NotifyButtonPressed() &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_ISR()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClrPend(unsigned long)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPowerDown()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[25a]"></a>FLASH_Init(unsigned char, unsigned char, unsigned, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, flash_func.o(i._Z10FLASH_Inithhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FLASH_Init(unsigned char, unsigned char, unsigned, unsigned) &rArr; SSP_SetRate(unsigned char, unsigned, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_SetCSHigh(unsigned char)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_SetPins(unsigned char)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SetRate(unsigned char, unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
</UL>

<P><STRONG><a name="[25e]"></a>FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, flash_api.o(i._Z10FLASH_ReadhPhjtjhPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_send_packet_exec()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMap_HardReset_exec()
</UL>

<P><STRONG><a name="[260]"></a>FL_RKP_ers(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z10FL_RKP_ersh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = FL_RKP_ers(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_kpd()
</UL>

<P><STRONG><a name="[262]"></a>FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, preparedatafortransmission.o(i._Z10FillFooterP14S_RfApi_FooterPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char) &rArr; PreparateFooter(S_RfApi_Footer*, unsigned char*, unsigned char) &rArr; RfApi_CRC16(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndBatteryInformation(unsigned char)
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateConfigKF3Msg(unsigned char)
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateKF3Data(unsigned char)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndCopyFromStrg(unsigned char)
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRsuInitData(unsigned char)
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndCalibration(DEVICE_TYPE)
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndBootRequest(unsigned char)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndUpdateFile(unsigned char)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndKillUpdate(unsigned char)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndHandShake(unsigned char)
</UL>

<P><STRONG><a name="[265]"></a>FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, preparedatafortransmission.o(i._Z10FillHeaderP17S_RfApi_MsgHeaderPhhhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustomerCode()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberCheck()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTypedecode()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKf3NeedBatteryInformation()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IfKf3NeedBatteryInformation()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndBatteryInformation(unsigned char)
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateConfigKF3Msg(unsigned char)
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateKF3Data(unsigned char)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndCopyFromStrg(unsigned char)
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRsuInitData(unsigned char)
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndCalibration(DEVICE_TYPE)
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndBootRequest(unsigned char)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndUpdateFile(unsigned char)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndKillUpdate(unsigned char)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndHandShake(unsigned char)
</UL>

<P><STRONG><a name="[270]"></a>GetArgByte(unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, apicmdutilfunc.o(i._Z10GetArgBytePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetArgByte(unsigned char*) &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex(unsigned char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetAllCmd(unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCmdProcess(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[272]"></a>GetCmdCode(unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, process_income_message.o(i._Z10GetCmdCodePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetCmdCode(unsigned char*) &rArr; compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[274]"></a>GetDialLen(unsigned char*, bool)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m_a2g.o(i._Z10GetDialLenPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetDialLen(unsigned char*, bool) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[276]"></a>GetICCcode()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_a2g.o(i._Z10GetICCcodev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetICCcode()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActivationCode()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[c70]"></a>GetRfTxBuf()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queuehandler.o(i._Z10GetRfTxBufv))
<BR><BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfMsg()
</UL>

<P><STRONG><a name="[125]"></a>I2CManager(void*)</STRONG> (Thumb, 586 bytes, Stack size 32 bytes, i2c_manager_task.o(i._Z10I2CManagerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = I2CManager(void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_UpdatePendingRequestCounters(unsigned char, signed char)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init(unsigned char)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendI2CAckToTask(unsigned short, unsigned, unsigned short, unsigned char)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendRequest(unsigned char, unsigned char, unsigned, unsigned, unsigned short, unsigned char, unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[284]"></a>IP_APP_off()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ip_app.o(i._Z10IP_APP_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IP_APP_off() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_MACHINE_exec()
</UL>

<P><STRONG><a name="[a52]"></a>InitPicNum(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process_c_proc_messages.o(i._Z10InitPicNumh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[980]"></a>InitTicker()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, osal_time_mng.o(i._Z10InitTickerv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
</UL>

<P><STRONG><a name="[285]"></a>InitVideoQ()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, videoq.o(i._Z10InitVideoQv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitVideoQ() &rArr; CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3a9]"></a>IsAnnexArm()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, annex.o(i._Z10IsAnnexArmv))
<BR><BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVS_loss_and_inactivity_check()
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_IsArmed()
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_state_LEDS_byte(unsigned)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[5c7]"></a>IsInitDone()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init.o(i._Z10IsInitDonev))
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[c12]"></a>IsMsmeIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msme.o(i._Z10IsMsmeIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[287]"></a>IsRfQEmpty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfq.o(i._Z10IsRfQEmptyv))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_RF_PROC_EVENT()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRFIdle()
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetRfEventToQ(unsigned char*, bool)
</UL>

<P><STRONG><a name="[55c]"></a>IsRkpFault()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ram_rkp.o(i._Z10IsRkpFaultv))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[55d]"></a>IsSecError()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z10IsSecErrorv))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[289]"></a>LegacyFunc()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i._Z10LegacyFuncv))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LegacyFunc() &rArr; GenerateScheduler_exec() &rArr; OperateFunction(void(*)()) &rArr; OperateTimeBasedEvants(tFUNCTIONS_ID) &rArr; LoadNewScenarios(tQ_TYPE) &rArr; LoadHighPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResetWatchdog()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_IsInitComplete()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateScheduler_exec()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IdleTask()
</UL>

<P><STRONG><a name="[28e]"></a>MP_APP_off()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, maintenance.o(i._Z10MP_APP_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MP_APP_off() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_PROTOCL_MACHINE_exec()
</UL>

<P><STRONG><a name="[c40]"></a>MaxHeapify(unsigned short, unsigned short, OSAL_PriorityQueueElement*)</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, osal_priority_queue.o(i._Z10MaxHeapifyttP25OSAL_PriorityQueueElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MaxHeapify(unsigned short, unsigned short, OSAL_PriorityQueueElement*)
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
</UL>

<P><STRONG><a name="[28f]"></a>MuxBuilder(unsigned char, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, gsm_mux_control.o(i._Z10MuxBuilderhP27S_COMM_STM_RX_MNG_RX_BUFFERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MuxBuilder(unsigned char, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short) &rArr; getMuxChannel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuxChannel(unsigned char)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FcsCalc(unsigned char*, unsigned short)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOneLenByte(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MuxSendMessage(unsigned char, unsigned char*, unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[293]"></a>Print2Uart(unsigned char*, unsigned short)</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, internalflash_test.o(i._Z10Print2UartPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Print2Uart(unsigned char*, unsigned short) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
</UL>

<P><STRONG><a name="[296]"></a>RB_APP_off()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rb_app.o(i._Z10RB_APP_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RB_APP_off() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_MACHINE_exec()
</UL>

<P><STRONG><a name="[297]"></a>Radio_Init()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z10Radio_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_Init() &rArr; Radio_Reset() &rArr; Radio_SendStrobe(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortEnableInterrupts(unsigned, unsigned)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetRxGDOs()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_PowerDown()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_PowerUp()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FullInit()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
</UL>

<P><STRONG><a name="[29e]"></a>RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, rfdrv_api.o(i._Z10RfDrv_InithtthjPFvP17OSAL_CyclicBuffertEPFvS0_EhPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvUpdateStatus(unsigned, S_RF_ReqInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitRadio(unsigned char)
</UL>

<P><STRONG><a name="[2a3]"></a>SFD_InitRC()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sfd_func.o(i._Z10SFD_InitRCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SFD_InitRC() &rArr; rc_init(rc_state*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init(rc_state*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFD_ResetCRCCalculator()
</UL>

<P><STRONG><a name="[2a5]"></a>SOUND_Beep(unsigned, int, int, unsigned, int, int, void(*)())</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sound_api.o(i._Z10SOUND_BeepjiijiiPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SOUND_Beep(unsigned, int, int, unsigned, int, int, void(*)()) &rArr; HW_TIMER_Start(unsigned char, unsigned, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_BeepStop()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Start(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
</UL>

<P><STRONG><a name="[2a8]"></a>SOUND_Init()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sound_api.o(i._Z10SOUND_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SOUND_Init() &rArr; HW_TIMER_Init(unsigned char, unsigned short, void(*)()) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Init(unsigned char, unsigned short, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[2aa]"></a>SPEAKER_on()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, control_panel.o(i._Z10SPEAKER_onv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPEAKER_on()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::setSpkVol(int)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmVoiceHandlerOn()
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_open_call(unsigned char*)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover_voice_settings()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_talk()
</UL>

<P><STRONG><a name="[2ac]"></a>SetIMHTime(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i._Z10SetIMHTimet))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SetIMHTime(unsigned short) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[2d9]"></a>SetNPTUser(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, do_it_yourself.o(i._Z10SetNPTUserh))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnNPT(int, int, int*, void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnInput(int, int, int*, void*)
</UL>

<P><STRONG><a name="[6ae]"></a>SetRollKey(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z10SetRollKeyh))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[2ae]"></a>SetSirenOn(unsigned char, bool)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, control_panel.o(i._Z10SetSirenOnhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetSirenOn(unsigned char, bool) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_TestOn(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[271]"></a>String2Hex(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apicmdutilfunc.o(i._Z10String2Hexh))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArgByte(unsigned char*)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectCharBuf(unsigned char*, unsigned short*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[98d]"></a>VAT_Enable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vat_api.o(i._Z10VAT_Enablev))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[51a]"></a>VAT_IsBusy()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vat_api.o(i._Z10VAT_IsBusyv))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover_voice_settings()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteFlashErase(char*, unsigned short, unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundOrVAT_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[2b5]"></a>VOICE_talk()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, voice_manager.o(i._Z10VOICE_talkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = VOICE_talk() &rArr; SetGSMAudioConfig(unsigned char, unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGSMAudioConfig(unsigned char, unsigned char)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
</UL>

<P><STRONG><a name="[84]"></a>Video_exec()</STRONG> (Thumb, 2296 bytes, Stack size 64 bytes, videohandler.o(i._Z10Video_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Video_exec() &rArr; LogVideoEvent(void*, VIDEO_STATUS_E) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLastChannelInDialSequence(COMMUNICATION_CHANNEL_E, unsigned char, unsigned char*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileNameGetState()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileSizeInSectors()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContentLengthOffset()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContentLengthDelta()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileSizeOffset()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPageCounter()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2int(unsigned char*, unsigned char)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCRC(unsigned char*, unsigned)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_clear_VIDEO_ack_nack()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_VIDEO_retry_received()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_VIDEO_nack_received()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_VIDEO_ack_received()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BypassVideoChannel(COMMUNICATION_CHANNEL_E)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_video_ack()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogVideoEvent(void*, VIDEO_STATUS_E)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> videohandler.o(i._Z10Video_execv)
</UL>
<P><STRONG><a name="[737]"></a>calc_crc32(const unsigned char*, unsigned, unsigned*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sfd_func.o(i._Z10calc_crc32PKhjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calc_crc32(const unsigned char*, unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFD_SendCRCData(unsigned char*, unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[2d3]"></a>decstr2int(unsigned char*, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, util.o(i._Z10decstr2intPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2int(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_BuildSimNumberHex(unsigned char*, unsigned char*)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int2(unsigned char*)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndExtractCyberModeLegalParams(unsigned char*, unsigned char*)
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetPhotoDelay(unsigned char*)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNineDigitPhoneNumber()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKeypadEntity(unsigned char*, int*)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeriodic(unsigned short, unsigned char*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progSwitchMode(int, int, int*, void*)
</UL>

<P><STRONG><a name="[b82]"></a>getFuncPtr(const unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z10getFuncPtrPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getFuncPtr(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[2c2]"></a>hexstr2int(unsigned char*, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, util.o(i._Z10hexstr2intPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hexstr2int(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2hex(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFibroHeader(unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSetVirtualSnPoseso(unsigned char*, MSME_MSG_E*, unsigned char*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[e5]"></a>learnInput(int, int, int*, void*)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, kpdprogs.o(i._Z10learnInputiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = learnInput(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_auto_learn(C_DEV_TYPE_E)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNPTUser(unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[d9]"></a>learnPerif(int, int, int*, void*)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, kpdprogs.o(i._Z10learnPerifiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = learnPerif(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_auto_learn(C_DEV_TYPE_E)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTagReaderType(unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[e6]"></a>learnSiren(int, int, int*, void*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, kpdprogs.o(i._Z10learnSireniiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = learnSiren(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_auto_learn(C_DEV_TYPE_E)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[1f9]"></a>num2decstr(unsigned long, unsigned char*, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, util.o(i._Z10num2decstrmPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPhoneOrGprsData(unsigned char*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_update_Timestamp_on_arm_detection(unsigned char*, S_MSME_MSG_EVENT*, bool)
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActivationCode()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr3(unsigned long, unsigned char*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr2(unsigned long, unsigned char*)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardPinCode()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardUser()
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLabRFLine(int, bool, int, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeriodic(unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[2c1]"></a>num2hexstr(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, util.o(i._Z10num2hexstrjPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = num2hexstr(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2ascii(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_BuildSimNumberHex(unsigned char*, unsigned char*)
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIridiumVersion(unsigned char*)
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActivationCode()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
</UL>

<P><STRONG><a name="[e3]"></a>progDimmer(int, int, int*, void*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, kpdprogs.o(i._Z10progDimmeriiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = progDimmer(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[f2]"></a>progGsmLed(int, int, int*, void*)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, kpdprogs.o(i._Z10progGsmLediiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = progGsmLed(int, int, int*, void*) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisableEnableLed(unsigned char, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[e2]"></a>progPinArm(int, int, int*, void*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, kpdprogs.o(i._Z10progPinArmiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = progPinArm(int, int, int*, void*) &rArr; setPINBeforeArm(int, int) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPINBeforeArm(int, int)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[2e1]"></a>AFP_APP_off()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, afp_app.o(i._Z11AFP_APP_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AFP_APP_off() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_MACHINE_exec()
</UL>

<P><STRONG><a name="[2e2]"></a>AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)</STRONG> (Thumb, 10514 bytes, Stack size 80 bytes, msme.o(i._Z11AddArgToMsgP16S_MSME_MSG_EVENTPhS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*) &rArr; GSM_Control_API_GetGsmStatus(S_GSM_STATUS*) &rArr; GSM_Control_StartStopRegDebounceTimer(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC_Ticker()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPermanentStatistics()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPeriodicStatistics()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2hexstr(unsigned, unsigned char*, unsigned)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetAccessTechnology()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetFirmWareVerPtr()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetFirmWareVer()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_GetIdPtr(unsigned short)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_read(unsigned char)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2decstr(unsigned, unsigned char*, unsigned)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_KEY_FOB_status(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBattLowOrEmpty()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_alarm_details(unsigned char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_phone_mute()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_read(unsigned char)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PINCODE_read(unsigned char)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_STRING_ptr(unsigned short)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DOMAIN_EXTANSION_read(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoreSubVersion()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PHONE_NUM_read(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoreVersion()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_update_Timestamp_on_arm_detection(unsigned char*, S_MSME_MSG_EVENT*, bool)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillString(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICCcode()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2ascii(unsigned char)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_GetFogWiredContactType(unsigned char)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_GetFogWiredMode(unsigned char)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCallMeLedArgument()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatusBits(unsigned, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDualSignalDevice(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOPERATORcode()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldAddress(unsigned short, unsigned short, unsigned short)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllianceBits()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimeStamp(unsigned char*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTamperMasked()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTimeStamp(unsigned char*, unsigned char*)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr3(unsigned long, unsigned char*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr2(unsigned long, unsigned char*)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSdEnabled()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEIcode()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sens2Pct(unsigned char)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecAlarmPending(bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSosPending(bool)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentIP(unsigned char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLQIValue(unsigned char, unsigned char)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
</UL>

<P><STRONG><a name="[320]"></a>AddRfMsgLog(unsigned char*, DEVICE_TYPE)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rflogmsg.o(i._Z11AddRfMsgLogPh11DEVICE_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = AddRfMsgLog(unsigned char*, DEVICE_TYPE) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMsgLog(unsigned char*)
</UL>

<P><STRONG><a name="[323]"></a>AnnexDisarm()</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, annex.o(i._Z11AnnexDisarmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = AnnexDisarm() &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_clear_annex_alarm_in_memory()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_last_arm_dev_id()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_SetArmAwarnessUpdate()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_is_new_rf_api()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_force_panic_disarm()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_clear_t_bypass(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pre_alarm_video()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPanelTamperBypass()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrGuardCodeCycleFlag()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoFaultCode(VIDEO_FAULT_CODE_E)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanicAlarm()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDeleteEntryMessages()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexWriteArmFlag(bool, bool)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisarmPanel(char*, unsigned short, unsigned char)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexKf3Disarm(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[259]"></a>BUTTONS_ISR()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, buttons_isr.o(i._Z11BUTTONS_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BUTTONS_ISR() &rArr; CPUI_NotifyButtonPressed() &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_UpdateButtonInterrupt(unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyButtonPressed()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_GetButtonsStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_3_ISR()
</UL>

<P><STRONG><a name="[135]"></a>CPUIManager(void*)</STRONG> (Thumb, 5312 bytes, Stack size 144 bytes, cpui_task_manager.o(i._Z11CPUIManagerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CPUIManager(void*) &rArr; CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char) &rArr; CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char) &rArr; CPUI_StopBeep(unsigned char) &rArr; CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_RecognizeButtonPressed()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EndButtonPressProcess(unsigned*, unsigned*, unsigned char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EnableButtonPress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GetLedState(unsigned char*, unsigned char)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init_Led()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ColdInit()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetElement(OSAL_PriorityQueue*, unsigned short)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::isMicOn()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StopOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StopForceArmWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetNumOfElements(OSAL_PriorityQueue*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateNumOfTicksBetweenPress()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_CheckMasterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ResetNumOfTicksBetweenPress()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetNextActiveEventToRefresh(unsigned short*)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StopGoodPinCodeFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDeleteElement(OSAL_PriorityQueue*, unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateInArrayTurnOnPartLed(unsigned char, unsigned char)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetConEventStatusFromTable(unsigned char)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyLoopIterationState(unsigned char, unsigned short)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_IsLedSetForAllBlinkTypes(unsigned char*, unsigned*, unsigned char)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetLedBlinkTypeFromTable(unsigned char)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetConEventNameFromTable(unsigned char)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetMaxFunc(OSAL_PriorityQueue*, unsigned*, void**)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateInArrayTurnOnLed(unsigned char, unsigned char)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetTriggerOrLevelState(unsigned short)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_InitialBlinkLedAction(unsigned*, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetLedActionFromTable(unsigned char)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeOutEventInQueue(unsigned char, OSAL_PriorityQueue*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetLedColorFromTable(unsigned char)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_SetResetProg(S_CPUI_ButtonInfo*)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsNightModeFunc()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ResetCallBackParams(void**, unsigned*, unsigned char*, unsigned char*)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBlinkAction(unsigned, unsigned char*, unsigned char)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDigitButtonsDisabled()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_WasCallBackCalled(void**, void*, unsigned char)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateStopBeepMsg(unsigned char)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformLoopAction(unsigned*, unsigned char*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLoopTimeoutLeds(unsigned*, unsigned short)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetLEDActionName(unsigned char, unsigned char)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsStateInit(unsigned char*)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetStateTimeOut(unsigned short)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEventsTracker(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateGroupTracker(unsigned short*, unsigned char, unsigned short)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventTrackerZero(unsigned char*)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UnsetLedBlink(unsigned char, unsigned*, unsigned char)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIncludedInGroup(unsigned short, unsigned short*, unsigned char*)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ResetTracker(unsigned*, unsigned char)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLedTracker(unsigned*, unsigned char, unsigned char)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsThereOverWrite(unsigned short, unsigned short)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_CopyTracker(unsigned*, unsigned*, unsigned char)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ResumeBeep()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventInQueue(unsigned short, OSAL_PriorityQueue*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventActive(unsigned char*, unsigned short)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsThereLoop(unsigned short)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init_Variables()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[af2]"></a>C_PROC_init()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, c_proc.o(i._Z11C_PROC_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C_PROC_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[180]"></a>ChimeAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z11ChimeActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ChimeAction(S_CPUI_ButtonInfo*) &rArr; setChimeMask(int, int) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChimeMasked()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChimeMask(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[936]"></a>ClearMntMsg()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z11ClearMntMsgv))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
</UL>

<P><STRONG><a name="[9a2]"></a>ClrBusyFlag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(i._Z11ClrBusyFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[938]"></a>ClrVideoCRC()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, message.o(i._Z11ClrVideoCRCv))
<BR><BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActivationCode()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
</UL>

<P><STRONG><a name="[387]"></a>Config_init()</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, deviceconfigmachine.o(i._Z11Config_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Config_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF3_config_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[389]"></a>EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)</STRONG> (Thumb, 300 bytes, Stack size 88 bytes, eeprom_api.o(i._Z11EEPROM_ReadjPhtthPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_UpdatePendingRequestCounters(unsigned char, signed char)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetNumOfPendingRequests()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_SaveAllBatteryLevelToRam(unsigned char*, unsigned char)
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_CheckIfNewSWLoaded(unsigned char)
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitOffsetArrays()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[261]"></a>ENTRY_erase(unsigned short)</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, fl_entry.o(i._Z11ENTRY_eraset))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRemoteConnection()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_KEY_FOB_status(unsigned char, unsigned char)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntryChangeType(unsigned short)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_supervisory_count_buf()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nible_by_id(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteDevice(char*, unsigned short, unsigned char)
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteGroupTypeDevices(unsigned char)
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_erase(unsigned char)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_erase(unsigned char)
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_ers(unsigned char)
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SIREN_DEV_ers(unsigned char)
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_ers(unsigned char)
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_erase(unsigned char)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_ers(unsigned char)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ers(unsigned char)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_ers(unsigned char)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_delete_range(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[394]"></a>ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)</STRONG> (Thumb, 1334 bytes, Stack size 104 bytes, fl_entry.o(i._Z11ENTRY_writetPhh10U_DEV_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRemoteConnection()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFogWiredCfgMsg(unsigned char, unsigned char, unsigned char)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFibroHeader(unsigned char*)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF3_config_init()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntryChangeType(unsigned short)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_header_build(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_decode_command(unsigned char*)
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTENDED_PHONE_NUM_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PHONE_NUM_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PINCODE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigFoxEnDis(unsigned char, unsigned char)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_save_params()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeriodic(unsigned short, unsigned char*)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanelBeepsConfig(int, int, int*, void*)
</UL>

<P><STRONG><a name="[39f]"></a>EnMuxParser(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, comm_stm_rx_manager.o(i._Z11EnMuxParserj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = EnMuxParser(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[3a0]"></a>EraseSector(unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, internalflash_util.o(i._Z11EraseSectorhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EraseSector(unsigned char, unsigned char) &rArr; preparate_sectors_for_write(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sectors(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeedNextFreePage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Erase()
</UL>

<P><STRONG><a name="[3a3]"></a>FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, flash_api.o(i._Z11FLASH_WritehPhjtjhS_PjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UpdatePendingRequestCounter(unsigned char, signed char)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[3a5]"></a>FL_APN_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z11FL_APN_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_APN_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetApnPtr(unsigned char)
</UL>

<P><STRONG><a name="[108]"></a>FL_RKP_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z11FL_RKP_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_RKP_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_CheckIfDeviceValid(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*)
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rkp_init(unsigned char, unsigned char)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_device_ptr(unsigned char, unsigned short, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_kpd()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
</UL>
<P><STRONG><a name="[3a6]"></a>FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)</STRONG> (Thumb, 586 bytes, Stack size 56 bytes, key_fob.o(i._Z11FillKf3LEdsh16U_KEY_FOB_PARAMS17KEY_FOB_MESSAGE_EP20KEY_FOB_LEDS_STATE_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_open_alarm()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneralSetLeds(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[3ae]"></a>G_PROC_init()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gsm_comm.o(i._Z11G_PROC_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = G_PROC_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b0]"></a>G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, gsm_comm.o(i._Z11G_PROC_send18E_GSM_A2G_COMMANDSPhS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_close_session()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_sms_send()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_close_call(E_VOICE_DEVICE)
</UL>

<P><STRONG><a name="[7f3]"></a>GetCRCState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, processflash.o(i._Z11GetCRCStatev))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[7bc]"></a>GetGPRSPLMN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z11GetGPRSPLMNv))
<BR><BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
</UL>

<P><STRONG><a name="[30d]"></a>GetIMEIcode()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_a2g.o(i._Z11GetIMEIcodev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetIMEIcode()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[4b4]"></a>GetNumOpdds()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z11GetNumOpddsv))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDAcks_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
</UL>

<P><STRONG><a name="[6cc]"></a>GetPriority(sPriorityQ*, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, priorityq.o(i._Z11GetPriorityP10sPriorityQh))
<BR><BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskPriority(sSmartSchedulerQ*, void(*)())
</UL>

<P><STRONG><a name="[939]"></a>GetVideoCRC()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message.o(i._Z11GetVideoCRCv))
<BR><BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActivationCode()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
</UL>

<P><STRONG><a name="[3b2]"></a>INIT_params(unsigned char, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, init.o(i._Z11INIT_paramshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = INIT_params(unsigned char, unsigned char) &rArr; Delete_All_files() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_init_params()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init_params(unsigned char, unsigned char)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileSizeInSectors(int)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_All_files()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileSizeInSectors()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Counter_Sensitivity(unsigned char)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_manager_params(unsigned char)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_init_params()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[afb]"></a>IP_APP_init()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip_app.o(i._Z11IP_APP_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5bb]"></a>InitExtInt0()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardware_vf.o(i._Z11InitExtInt0v))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_VF()
</UL>

<P><STRONG><a name="[3bc]"></a>InitExtInt3()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hardware_vf.o(i._Z11InitExtInt3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitExtInt3() &rArr; BUTTONS_InitButtonInterrupts() &rArr; BUTTONS_UpdateButtonInterrupt(unsigned char) &rArr; HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_InitButtonInterrupts()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_VF()
</UL>

<P><STRONG><a name="[305]"></a>Is220vON_VF()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z11Is220vON_VFv))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBattHandler()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RefreshJDSupervision()
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMainPowerMSGProcess(bool, bool, bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[337]"></a>IsAnnexExit()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, annex.o(i._Z11IsAnnexExitv))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_IsArmed()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneralSetLeds(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_denied_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_state_LEDS_byte(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[3be]"></a>IsBufferInQ(OSAL_PriorityQueue*, unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, comm_stm_rx_manager.o(i._Z11IsBufferInQP18OSAL_PriorityQueuePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsBufferInQ(OSAL_PriorityQueue*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetElement(OSAL_PriorityQueue*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[258]"></a>IsPowerDown()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z11IsPowerDownv))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_3_ISR()
</UL>

<P><STRONG><a name="[3bf]"></a>IsRfDbMatch()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, maintenance.o(i._Z11IsRfDbMatchv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsRfDbMatch()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_get_received_ldevices_ack()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSaveModeSetCount(unsigned char*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerMaintCounters()
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
</UL>

<P><STRONG><a name="[bc9]"></a>IsRsuDevice(unsigned char, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, queuehandler.o(i._Z11IsRsuDevicehh))
<BR><BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfCanPushMessageToQueue(unsigned char)
</UL>

<P><STRONG><a name="[2f8]"></a>IsSdEnabled()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process_income_message.o(i._Z11IsSdEnabledv))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[903]"></a>IsTestAlarm()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, alarm.o(i._Z11IsTestAlarmv))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
</UL>

<P><STRONG><a name="[687]"></a>IsThereBeep(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cpui_func.o(i._Z11IsThereBeept))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsThereBeep(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ResumeBeep()
</UL>

<P><STRONG><a name="[345]"></a>IsThereLoop(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpui_func.o(i._Z11IsThereLoopt))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[242]"></a>IsValidDate(unsigned char*)</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, clock.o(i._Z11IsValidDatePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IsValidDate(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Start()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Stop()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init(unsigned char*, bool)
</UL>

<P><STRONG><a name="[3c5]"></a>IsVoiceIDLE()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, voice_manager.o(i._Z11IsVoiceIDLEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsVoiceIDLE() &rArr; Is_GSM_Ring_on_Background()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_GSM_Ring_on_Background()
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
</UL>

<P><STRONG><a name="[86]"></a>LISTEN_exec()</STRONG> (Thumb, 594 bytes, Stack size 56 bytes, listen.o(i._Z11LISTEN_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = LISTEN_exec() &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrSmsMessageCommInfo()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_gprs_ack()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckServerOnLineFlag(bool)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDateListenStatusBit()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> link.o(i._Z9LINK_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> listen.o(i._Z11LISTEN_execv)
</UL>
<P><STRONG><a name="[279]"></a>OSAL_Assert(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal_debug_services.o(i._Z11OSAL_AsserthPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToFlashManager(unsigned short, S_FLASH_TransferReqInfo*)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFlashAckToTask(unsigned short, unsigned, unsigned short, unsigned char)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MultipleSectorErase(unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsgFromInt()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ISR(unsigned char)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendI2CAckToTask(unsigned short, unsigned, unsigned short, unsigned char)
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_COUNTER_Init(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Stop(unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferInsertOneByteFromISR(OSAL_CyclicBuffer*, unsigned char)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendTxBufferMsgByInterrupt(unsigned, unsigned char, unsigned char*, unsigned)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartAckToTask(unsigned short, unsigned, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_API_GetModemParams()
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_API_SendInitPstn(unsigned char, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommandsTable(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTableCommandIndex(S_GSM_FUNC_TABLE_HANDLE*, unsigned short)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyVirtualButtonPress()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyButtonPressed()
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyPinPressed(unsigned short)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg2RfTask(unsigned short, void*)
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvExtractFromQ(OSAL_PriorityQueue*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferInsert(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferClear(OSAL_CyclicBuffer*)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleAmplifier(E_CC11XX_AMP)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Start(unsigned char, unsigned, unsigned char)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Init(unsigned char, unsigned short, void(*)())
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_TxFifoSendHandler()
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CheckMisoStatus()
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnableBpsk(unsigned char)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGetDataSize(OSAL_CyclicBuffer*)
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicitedPstn(char*, unsigned short)
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_ClearResetCounter()
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmRxManagerErrorHandler(unsigned)
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQMemCopy(OSAL_PriorityQueue*, unsigned char*, unsigned, S_COMM_STM_RX_MNG_BUFFER_WITH_LEN**)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQ(OSAL_PriorityQueue*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_API_PausePstn(unsigned char, unsigned)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmMsgInfo(S_GSM_STM_MSG_INFO*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TimerChangePause(unsigned short, unsigned char)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_On_Packet_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_On_ODM_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_set_nv_mem
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_get_nv_mem
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnG729ADecRun
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnG729ADecInit
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_CLEAR()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector(unsigned char, unsigned char)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_GetIdPtr(unsigned short)
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteId(unsigned short, unsigned char*)
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_ReadPtr(unsigned short, unsigned short)
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_ReadId(unsigned short, unsigned char*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Erase()
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Read(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawData_ADLReportIntervalFunc(unsigned char, unsigned char)
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawData_IsTimeOutFromEEPROM()
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutOfHome_IsInOOHState()
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_SetWasBelowMinEventSent(unsigned char, unsigned char)
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_ReadADLRuleEntry(S_ADLRuleInfo*, unsigned char, unsigned char*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_CloseFTP()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetPartitionPerimeterAnnexZoneLeds(unsigned*)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetOpenZonesOrTamperLeds(unsigned*)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapCheckOverrun(unsigned char*)
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapCheckUsage(unsigned, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CreateTempTaskWithPendingMessage()
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_FreeStackFromDeletedTasks()
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSendMessageToTaskFromInt(void*, void*)
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSendMessageToTask(void*, void*)
<LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSFXLibrary()
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_SendStopBeepMsg()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetAlarmLeds(unsigned*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyLoopIterationState(unsigned char, unsigned short)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeOutEventInQueue(unsigned char, OSAL_PriorityQueue*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventInQueue(unsigned short, OSAL_PriorityQueue*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init_Variables()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerAckToTask(S_TimerInfo*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage_exec()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_RSSI2RLQ(int)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerKeyRequest_exec()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_ReadMsg()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[c32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCorrectLearnInInstallation(unsigned char*, bool, bool)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeAlarmFriendlyMode(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pda_alloc_RX_buff()
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_IsUserArmPermittedByButton(unsigned, unsigned, unsigned char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_tag_present_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCyberMachineActivationModeAndCounters(S_CyberInfo*, E_CYBER_DETECTED_CMD)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveI2CBuffCopy(S_CyberInfo*, unsigned char*)
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacketProcessingStates(unsigned char*)
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_API_processing(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxPacket(unsigned char**)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNextMessageAck()
</UL>

<P><STRONG><a name="[3d0]"></a>OSAL_StrLen(char*, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osal_services.o(i._Z11OSAL_StrLenPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_StrLen(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PrepareAtCommandBuffer(unsigned char, unsigned short*, S_GSM_FUNC_TABLE_HANDLE*, unsigned char, MODEM_COMMAND_E*, unsigned char, unsigned char)
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStrRev(char*, char*, unsigned, unsigned)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQ(OSAL_PriorityQueue*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructData(unsigned char, char*, char**, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PrintMode(unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteHelpOperation(char*, unsigned short, unsigned char)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DecodeIncomingMsgCmd(char*, unsigned short, unsigned short*, char**)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update_Socket_Param(unsigned char*, char*, unsigned char*)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_GetCallingLineNum(unsigned char*)
</UL>

<P><STRONG><a name="[3cf]"></a>OSAL_StrStr(char*, char*, unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, osal_services.o(i._Z11OSAL_StrStrPcS_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ParseSmsMsg(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned char, MODEM*)
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponseLegality(S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseNumOfIndications(char*, char*, unsigned, unsigned char, unsigned char*)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicited(char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructRingNum(unsigned char, char*, char**, unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructData(unsigned char, char*, char**, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short)
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetAttenuation(char*, unsigned short, unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_QueryGsmVersion(char*, unsigned short, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetPowerMode(char*, unsigned short, unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetFrequency(char*, unsigned short, unsigned char)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfStopCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSendCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PowerSaveMode(char*, unsigned short, unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetTxPower(char*, unsigned short, unsigned char)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TestButtons(char*, unsigned short, unsigned char)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TestAllLeds(char*, unsigned short, unsigned char)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PressButton(char*, unsigned short, unsigned char)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisarmPanel(char*, unsigned short, unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetRSSI(char*, unsigned short, unsigned char)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Tamper(char*, unsigned short, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ISN(char*, unsigned short, unsigned char)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfWriteOperation(char*, unsigned short, unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemWriteOperation(char*, unsigned short, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DecodeIncomingMsgCmd(char*, unsigned short, unsigned short*, char**)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetCarrierSense(char*, unsigned short, unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteFlashErase(char*, unsigned short, unsigned char)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SetCommPrintMode(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[8c]"></a>PDA_ReadMsg()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, m_pdaprocess.o(i._Z11PDA_ReadMsgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PDA_ReadMsg() &rArr; PDA_GetBuffer() &rArr; UART_GetCharByInterrupt(int, char*) &rArr; OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPdaReceive(unsigned char*)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_ResetReceiver()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_GetBuffer()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scheduler.o(i._Z24Scheduler_PlugoutActionsv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[11b]"></a>PanicAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z11PanicActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PanicAction(S_CPUI_ButtonInfo*) &rArr; StartSendCmd(unsigned char*, bool) &rArr; InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator =(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::data()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyAction(S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>RAM_DB_exec()</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, ram_db.o(i._Z11RAM_DB_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = RAM_DB_exec() &rArr; RF_SEC_ZONE_monitor() &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTENDED_CP_PARAMS_READ()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTamperState()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_open_alarm()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_monitor()
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_supervisory_fault()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_open_low_bat()
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_tamper_status(unsigned char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_supervisory_fault()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_bat_status(unsigned char)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_DEV_monitor()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_open_low_bat()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRFInputStatus()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_open_low_bat()
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_monitor()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ram_db.o(i._Z11RAM_DB_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[afd]"></a>RB_APP_init()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rb_app.o(i._Z11RB_APP_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3e3]"></a>RFtimerInit()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rfrefreshmachine.o(i._Z11RFtimerInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFtimerInit() &rArr; TimerSetTimeout(SYS_TASK*, unsigned) &rArr; SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInit()
</UL>

<P><STRONG><a name="[3d6]"></a>RKP_monitor()</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ram_rkp.o(i._Z11RKP_monitorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RKP_monitor()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRkpTamperFault(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[3e5]"></a>RTC_SetDate(unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtc_api.o(i._Z11RTC_SetDatehht))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate(unsigned char, unsigned char, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Start()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Stop()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CalcDayOfWeek(unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_set_date(unsigned char*)
</UL>

<P><STRONG><a name="[3e6]"></a>RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rtc_api.o(i._Z11RTC_SetTimehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Start()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_set_time(unsigned char*)
</UL>

<P><STRONG><a name="[29a]"></a>Radio_Reset()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z11Radio_Resetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Radio_Reset() &rArr; Radio_SendStrobe(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_InitComStruct()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_InitLnaPaParams()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtInt2_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init()
</UL>

<P><STRONG><a name="[71c]"></a>RfApi_CRC16(void*, int)</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, rfapi.o(i._Z11RfApi_CRC16Pvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RfApi_CRC16(void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEGCheckCRC(unsigned char*)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[3eb]"></a>RtcDecision(RX_COMMAND, ID_BUFFER, PRIVATE_ID*)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, incomingbufferparser.o(i._Z11RtcDecision10RX_COMMAND9ID_BUFFERP10PRIVATE_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = RtcDecision(RX_COMMAND, ID_BUFFER, PRIVATE_ID*) &rArr; StartRtcMachine(unsigned char*, unsigned char, unsigned) &rArr; CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool) &rArr; LockCfgChanged(unsigned char) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRsuByteValid(unsigned char)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[253]"></a>SPEAKER_off()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, control_panel.o(i._Z11SPEAKER_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPEAKER_off()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover_voice_settings()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialHangUp()
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_handle_call(E_VOICE_DEVICE)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_listen()
</UL>

<P><STRONG><a name="[25c]"></a>SSP_SetRate(unsigned char, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, ssp_spi_func.o(i._Z11SSP_SetRatehjjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SSP_SetRate(unsigned char, unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init(unsigned char, unsigned char, unsigned)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init(unsigned char, unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[530]"></a>SaveDec2Hex(unsigned long, unsigned char*, unsigned short*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, apicmdutilfunc.o(i._Z11SaveDec2HexmPhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveDec2Hex(unsigned long, unsigned char*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTx4Entity(unsigned short, unsigned char, unsigned short*, unsigned char, unsigned char*)
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTxCmd(unsigned char*, unsigned char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[3f0]"></a>SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, eventdrivenq.o(i._Z11SendItemToQP13sEventDrivenQPvhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty(sEventDrivenQ*)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFull(sEventDrivenQ*)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewEvent(t_node*, void*, unsigned char)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetGsmEventToQ(unsigned char*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetRfEventToQ(unsigned char*, bool)
</UL>

<P><STRONG><a name="[3f4]"></a>SendKfRFMsg(unsigned char, unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, key_fob.o(i._Z11SendKfRFMsghPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = SendKfRFMsg(unsigned char, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRsuByteValid(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f7]"></a>Set220vFail()</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, main_power.o(i._Z11Set220vFailv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Set220vFail() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC_Ticker()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomNum(unsigned long, unsigned long)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerSaveWithACTestFlag()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerSaveTestFlag()
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMainPowerMSGProcess(bool, bool, bool)
</UL>

<P><STRONG><a name="[47a]"></a>SetInitMode(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, c_proc.o(i._Z11SetInitModeb))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
</UL>

<P><STRONG><a name="[3fb]"></a>SetSirenOff()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, control_panel.o(i._Z11SetSirenOffv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SetSirenOff() &rArr; CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStop(unsigned char, unsigned char, unsigned*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff_ForModems()
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[402]"></a>SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)</STRONG> (Thumb, 184 bytes, Stack size 288 bytes, incomingbufferparser.o(i._Z11SndAckCheck11DEVICE_TYPE10RX_COMMAND10PRIVATE_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID) &rArr; IPD_Or_PIR_ConfigCheck(unsigned char*) &rArr; RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler2(unsigned char, unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_Or_PIR_ConfigCheck(unsigned char*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHandshakeDecision(RX_COMMAND, PRIVATE_ID)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTypedecode()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUpdates()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[1a]"></a>TIMER_0_ISR()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hw_timer_api.o(i._Z11TIMER_0_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER_0_ISR() &rArr; HW_TIMER_Stop(unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Stop(unsigned char)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortClearInterrupts(unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER_1_ISR()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hw_timer_api.o(i._Z11TIMER_1_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER_1_ISR() &rArr; HW_TIMER_Stop(unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Stop(unsigned char)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortClearInterrupts(unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER_2_ISR()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hw_timer_api.o(i._Z11TIMER_2_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER_2_ISR() &rArr; HW_TIMER_Stop(unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Stop(unsigned char)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortClearInterrupts(unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>TestManager(void*)</STRONG> (Thumb, 522 bytes, Stack size 72 bytes, test_task.o(i._Z11TestManagerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TestManager(void*) &rArr; TEST_HandleReceivedCodecSample() &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskDelete(unsigned char)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_NextCarrierDuty()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteCmd(unsigned short, char*, unsigned short)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2decstr(unsigned, unsigned char*, unsigned)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FinishCodecSampleOperation()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_HandleReceivedCodecSample()
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DecodeIncomingMsgCmd(char*, unsigned short, unsigned short*, char**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>Test_Tamper(char*, unsigned short, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, test_func.o(i._Z11Test_TamperPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Test_Tamper(char*, unsigned short, unsigned char) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperState(int, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[416]"></a>UDP_APP_off()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, udp_app.o(i._Z11UDP_APP_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UDP_APP_off() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_MACHINE_exec()
</UL>

<P><STRONG><a name="[123]"></a>UartManager(void*)</STRONG> (Thumb, 1216 bytes, Stack size 72 bytes, uart_manager_task.o(i._Z11UartManagerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = UartManager(void*) &rArr; SendUartAckToTask(unsigned short, unsigned, unsigned char, unsigned short, unsigned char, unsigned char) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChannelType(unsigned char)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferDelete(OSAL_CyclicBuffer*)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init(unsigned char)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendTxBufferMsgByInterrupt(unsigned, unsigned char, unsigned char*, unsigned)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ResetRxFifoBuffers(unsigned char)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartClearFifoDmaMode(unsigned char)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartAckToTask(unsigned short, unsigned, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate(unsigned char, unsigned char)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDisableInt(unsigned char)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartClearInt(unsigned char)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt(unsigned char)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferCreate(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[98a]"></a>VAT_Disable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vat_api.o(i._Z11VAT_Disablev))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[761]"></a>aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)</STRONG> (Thumb, 692 bytes, Stack size 36 bytes, aescrypt.o(i._Z11aes_encryptPKhPhPK7aes_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*)
</UL>

<P><STRONG><a name="[c0d]"></a>calc_chksum(unsigned char*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, util.o(i._Z11calc_chksumPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_chksum(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PROGARM_TARGET_build_frame(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned long)
</UL>

<P><STRONG><a name="[273]"></a>compare_str(const unsigned char*, const unsigned char*, int)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, util.o(i._Z11compare_strPKhS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDuplicateCUI(unsigned char*, int, int)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDuplicateSN(unsigned char*, int, int)
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare_duress(unsigned char*)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare(unsigned char*)
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_FindSerialNumberInDB(int, unsigned char*, int)
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDBEntry(unsigned char*, const S_RFApiVSEG_DeviceTypeInfo*)
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_compare_password(unsigned char*, S_USER*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdCode(unsigned char*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[264]"></a>copy_buffer(unsigned char*, unsigned char*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, util.o(i._Z11copy_bufferPhS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Info_InPanel(unsigned char, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rkp_data(unsigned char*, unsigned char*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned)
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_RECEIVE_frame(unsigned char*, unsigned char)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_rec_packet(unsigned char*, unsigned char, E_TRANSPORTS)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetGsmEventToQ(unsigned char*)
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPhoneOrGprsData(unsigned char*)
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommFaultTimes(unsigned char*)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookForTheOldstFile_exec()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_ReceiveNewRFProtocolPacket(unsigned char*)
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_BuildSimNumberHex(unsigned char*, unsigned char*)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_handler(unsigned char*, unsigned char)
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoBuffer(unsigned char*)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_DEV_TYPE_send_msg(unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLookingForFile(VIDEO_COMM_SESSION_S*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFailRecord(U_FAILED_VIDEO_RECORD*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFailRecord()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPdaReceive(unsigned char*)
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRFOutputEntry(int, unsigned char*, unsigned char, bool)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillString(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSimNumberToEEProm(unsigned char*, unsigned char)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildDeviceVersion(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOldMGLS(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOldRfInputMGLS(RF_INPUT_ENTRY_S*)
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPreAlarmTicker(unsigned char*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateOldIpLearnTagMsg(unsigned char*, unsigned char*)
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateIpLearnTagMsg(unsigned char*, unsigned char*, bool)
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_decode_command(unsigned char*)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_build(unsigned char*, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfControlFromPanelEntry(unsigned char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMinutesCounter(unsigned char*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSavePeriodicCounters()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimeStamp(unsigned char*)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRamRemoteParamStatTbl(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_send_packet_exec()
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_build_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_String(unsigned char*, int, const SIZED_STRING_S*)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNewRepeaterVersion(unsigned char)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNoHSCamera(unsigned char)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_CopyIdFromRFMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_BuildIdByDevice(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_GenTypeTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_BuildIdForDomo(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*)
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDBEntry(unsigned char*, const S_RFApiVSEG_DeviceTypeInfo*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_TypeTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_SrcBuffCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_DBTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Condensed_RTC(unsigned char*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_Or_PIR_ConfigCheck(unsigned char*)
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateNewDeviceID(int, int, int)
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceInfoResp(unsigned char*)
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDefectTr5Version(DEVICE_TYPE, unsigned char)
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoPacket()
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_save_params()
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeriodic(unsigned short, unsigned char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_tag_present_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenVersionCheck(unsigned char)
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacket2Collect(unsigned char*, unsigned char)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetRfEventToQ(unsigned char*, bool)
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessModifyEntityCmd(unsigned short, unsigned short*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[424]"></a>decstr2int2(unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, util.o(i._Z11decstr2int2Ph))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = decstr2int2(unsigned char*) &rArr; decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIridiumVersion(unsigned char*)
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserId(unsigned char*)
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramUserInterface(unsigned char*, S_POSESO_Reply*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[2e6]"></a>getLQIValue(unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, msme.o(i._Z11getLQIValuehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = getLQIValue(unsigned char, unsigned char) &rArr; RFApiVSEG_GetSNMemoryEntry(unsigned char, unsigned char) &rArr; RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetSNMemoryEntry(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[426]"></a>getRLQValue(int, int)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timer.o(i._Z11getRLQValueii))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getRLQValue(int, int) &rArr; C_PROC_RF_RSSI2RLQ(int) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_RSSI2RLQ(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_BuildInfoBufferToSend(unsigned char*, unsigned short, unsigned char*, unsigned char, unsigned short*)
</UL>

<P><STRONG><a name="[2fe]"></a>get_RKP_ptr(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ram_rkp.o(i._Z11get_RKP_ptrh))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_IsPrevRkpTlbMsgAcked(unsigned char)
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetRkpTlbMsgWaitAck(unsigned char)
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetTlbMsgAckStatus(MSME_MSG_ACK_STATUS_E)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_message()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RkpStatusBuilder(unsigned)
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_kpd()
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreviosTamperState(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[428]"></a>initDataReg(S_COMM_STM_RX_MNG_DATA_REG_INFO***)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, comm_stm_rx_manager.o(i._Z11initDataRegPPP31S_COMM_STM_RX_MNG_DATA_REG_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = initDataReg(S_COMM_STM_RX_MNG_DATA_REG_INFO***) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[429]"></a>init_ram_db(unsigned char, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ram_db.o(i._Z11init_ram_dbhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = init_ram_db(unsigned char, unsigned char) &rArr; FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rkp_init(unsigned char, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_init(unsigned char, unsigned char)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_siren_init(unsigned char, unsigned char)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_output_dev_init(unsigned char, unsigned char)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_input_dev_init(unsigned char, unsigned char)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_key_fob_init(unsigned char)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_user_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rkp_data(unsigned char*, unsigned char*)
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRFOutputEntry(int, unsigned char*, unsigned char, bool)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
</UL>

<P><STRONG><a name="[d8]"></a>learnKeyFob(int, int, int*, void*)</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, kpdprogs.o(i._Z11learnKeyFobiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = learnKeyFob(int, int, int*, void*) &rArr; init_ram_db(unsigned char, unsigned char) &rArr; FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_keyfob(unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[2e4]"></a>num2decstr3(unsigned long, unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, util.o(i._Z11num2decstr3mPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num2decstr3(unsigned long, unsigned char*) &rArr; num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[433]"></a>save_keyfob(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, do_it_yourself.o(i._Z11save_keyfobh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = save_keyfob(unsigned char) &rArr; start_auto_learn(C_DEV_TYPE_E) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_auto_learn(C_DEV_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
</UL>

<P><STRONG><a name="[436]"></a>test_msme_q()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msme_q.o(i._Z11test_msme_qv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_msme_q()
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoRFMachineIdle()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_video_q_empty()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQempty()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommFailed()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_precondition_exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[329]"></a>video_pause(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, videoengine.o(i._Z11video_pauseb))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeter_entry_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[43d]"></a>A2G_CheckSum(unsigned char*, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m_a2g.o(i._Z12A2G_CheckSumPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = A2G_CheckSum(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[10e]"></a>A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, m_a2g.o(i._Z12A2G_WriteMsghPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = A2G_WriteMsg(unsigned char, unsigned char*, unsigned short) &rArr; InsetGsmEventToQ(unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDelete(OSAL_PriorityQueue*)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_connection_closed(unsigned char)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetGsmEventToQ(unsigned char*)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Set_Socket_Failure()
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_CheckSum(unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i._Z9Init_execv)
</UL>
<P><STRONG><a name="[440]"></a>ALARM_TestOn(unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, alarm.o(i._Z12ALARM_TestOnhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ALARM_TestOn(unsigned char, unsigned char) &rArr; SetSirenOn(unsigned char, bool) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOnWitoutInitCodec()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOn(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[442]"></a>AP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, maintenance.o(i._Z12AP_APP_startPhS_13TimerStruct_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AP_APP_start(unsigned char*, unsigned char*, TimerStruct_S) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[443]"></a>AddKfCUIUser(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, apicopyuiprocessing.o(i._Z12AddKfCUIUserttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AddKfCUIUser(unsigned short, unsigned short, unsigned short) &rArr; CopyKFEntity(unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyKFEntity(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddKfCUIUser(unsigned short, unsigned short*)
</UL>

<P><STRONG><a name="[2b2]"></a>CODEC_SetMux(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, codec_api.o(i._Z12CODEC_SetMuxh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CODEC_SetMux(unsigned char) &rArr; HAL_SetGPOPin(unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetGPOPin(unsigned char, unsigned char, unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Power_Off(unsigned char)
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOnWitoutInitCodec()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOn(unsigned char, bool)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_process_exec()
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceVerificationOption(unsigned char)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularCallOption(unsigned char)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpyModeOption(unsigned char)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RejectOption(unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::setMicVol(int)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
</UL>

<P><STRONG><a name="[449]"></a>CP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, maintenance.o(i._Z12CP_APP_startPhS_13TimerStruct_SP19U_MAINTENANCE_FLAGS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[44a]"></a>CheckBootMsg(bool)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, init.o(i._Z12CheckBootMsgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = CheckBootMsg(bool) &rArr; INIT_set_new_image_c(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_open_protocol_F()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJDNag(unsigned)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendCommunicationProtocolInf_ICI()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_new_image_c(unsigned char)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_new_image_a(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[4a2]"></a>CheckFieldId(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, apicmdutilfunc.o(i._Z12CheckFieldIdt))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[451]"></a>ConcMsgFromQ(OSAL_PriorityQueue*, unsigned char*, unsigned, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, comm_stm_rx_manager.o(i._Z12ConcMsgFromQP18OSAL_PriorityQueuePhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ConcMsgFromQ(OSAL_PriorityQueue*, unsigned char*, unsigned, unsigned char) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[446]"></a>CopyKFEntity(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, apicopyuiprocessing.o(i._Z12CopyKFEntityttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CopyKFEntity(unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKfCUIUser(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[113]"></a>DisarmAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, kpdoutstub.o(i._Z12DisarmActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DisarmAction(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterWasAlarm()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinCodeEntryTime()
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullArmAction(S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[458]"></a>EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, eeprom_api.o(i._Z12EEPROM_Read1jPhttPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_get_nv_mem
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceBatteryInfReq_exec()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookForTheOldstFile_exec()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInf_exec()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeveFileName_exec()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_EX_EEPROM_read(unsigned char*, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSimNumberFromEEProm()
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAlliance()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoFailRetrieve_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdatesMachine()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFail_Exec()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSecurity_exec()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdParamTable_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Specific_Device_Machine_Exec()
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Exec(TReadVirtualSnObj*)
</UL>

<P><STRONG><a name="[459]"></a>EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)</STRONG> (Thumb, 412 bytes, Stack size 104 bytes, eeprom_api.o(i._Z12EEPROM_WritejPhtthhPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_UpdatePendingRequestCounters(unsigned char, signed char)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetNumOfPendingRequests()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_set_nv_mem
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_CheckIfNewSWLoaded(unsigned char)
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOffsetArrayElement(unsigned char)
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitOffsetArrays()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfWriteOperation(char*, unsigned short, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceBatteryInfReq_exec()
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFileName_exec()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeveFileName_exec()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdatesMachine()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFail_Exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFrequencyOffsetArray()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Specific_Device_Machine_Exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[a8b]"></a>EnApiSupport(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, apipckprocessing.o(i._Z12EnApiSupportPh))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[3e7]"></a>ExtInt2_Init()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_isr.o(i._Z12ExtInt2_Initv))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reset()
</UL>

<P><STRONG><a name="[42c]"></a>FL_RKP_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fl_types.o(i._Z12FL_RKP_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rkp_data(unsigned char*, unsigned char*)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[45b]"></a>FL_STUN_read()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fl_types.o(i._Z12FL_STUN_readv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_STUN_read() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_STUN(S_MESSAGE_COMM_INFO*)
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_SendSTUNIfConfigured()
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[301]"></a>FL_USER_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z12FL_USER_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_USER_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserId(unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
</UL>

<P><STRONG><a name="[45c]"></a>FillDataBase()</STRONG> (Thumb, 566 bytes, Stack size 36 bytes, checkdevicetype.o(i._Z12FillDataBasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FillDataBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecDeviceTypeInterpreter(RF_SEC_ZONE_TYPE_E)
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDeviceTypeInterpreter(RF_OUTPUT_DEV_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[45f]"></a>FillRuleArgs(unsigned char*, unsigned short*, rules_arg_t*)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, apipckprocessing.o(i._Z12FillRuleArgsPhPtP11rules_arg_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FillRuleArgs(unsigned char*, unsigned short*, rules_arg_t*) &rArr; GetHexPerByte(unsigned char*, unsigned short*) &rArr; isxdigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[461]"></a>FindFreeKfId()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, apicmdutilfunc.o(i._Z12FindFreeKfIdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FindFreeKfId() &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfId(unsigned char)
</UL>

<P><STRONG><a name="[133]"></a>FlashManager(void*)</STRONG> (Thumb, 1098 bytes, Stack size 48 bytes, flash_manager_task.o(i._Z12FlashManagerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = FlashManager(void*) &rArr; ExecuteCommand(S_FLASH_TransferReqInfo*) &rArr; Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*) &rArr; Flash_WriteEnable(unsigned char) &rArr; Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitTxFIFOIsEmpty(unsigned char)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitIsNotBusy(unsigned char)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_SetCSHigh(unsigned char)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GeneralAcquireRlease_SSP_Mutex(unsigned char, unsigned char)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTaskBusyPollAfterCapture(unsigned, unsigned, unsigned char)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToFlashManager(unsigned short, S_FLASH_TransferReqInfo*)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFlashAckToTask(unsigned short, unsigned, unsigned short, unsigned char)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteDisable(unsigned char)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteCommand(S_FLASH_TransferReqInfo*)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init(unsigned char, unsigned char, unsigned, unsigned)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UpdatePendingRequestCounter(unsigned char, signed char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[6c5]"></a>Get220Status()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main_power.o(i._Z12Get220Statusv))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[ace]"></a>GetCRCResult()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, processflash.o(i._Z12GetCRCResultv))
<BR><BR>[Called By]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[72c]"></a>GetCRCStatus()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, processflash.o(i._Z12GetCRCStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[30f]"></a>GetCurrentIP(unsigned char*)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, msme.o(i._Z12GetCurrentIPPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCurrentIP(unsigned char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPRSDyamicIP()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[46c]"></a>GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, c_proc.o(i._Z12GetItrStatusP25Inf4SendTechinfInfoTask_tP11ItrStatus_tPhS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*) &rArr; C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool) &rArr; Timer_GetRssiIndBmValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUT_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_siren_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_STATUS_panel(ItrStatus_t*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
</UL>

<P><STRONG><a name="[474]"></a>GetKf3Status(S_KEY_FOB_ENTRY*, U_KEY_FOB_PARAMS*)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, key_fob.o(i._Z12GetKf3StatusP15S_KEY_FOB_ENTRYP16U_KEY_FOB_PARAMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetKf3Status(S_KEY_FOB_ENTRY*, U_KEY_FOB_PARAMS*)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
</UL>

<P><STRONG><a name="[abc]"></a>GetManufData()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, c_proc.o(i._Z12GetManufDatav))
<BR><BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
</UL>

<P><STRONG><a name="[792]"></a>GetMsmeFlags()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msme.o(i._Z12GetMsmeFlagsv))
<BR><BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[a91]"></a>GetOpddArray()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z12GetOpddArrayv))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDAcks_exec()
</UL>

<P><STRONG><a name="[8f0]"></a>GetPirIDList()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, videoengine.o(i._Z12GetPirIDListv))
<BR><BR>[Called By]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
</UL>

<P><STRONG><a name="[3fa]"></a>GetRandomNum(unsigned long, unsigned long)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, util.o(i._Z12GetRandomNummm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetRandomNum(unsigned long, unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[7cc]"></a>GetSosStatus()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z12GetSosStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos_polling(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[bcc]"></a>GetVectorPtr()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rb_app.o(i._Z12GetVectorPtrv))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
</UL>

<P><STRONG><a name="[475]"></a>IP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ip_app.o(i._Z12IP_APP_startPhS_13TimerStruct_SP19U_MAINTENANCE_FLAGS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*) &rArr; C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_open_protocol_F()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_get_tx_driver()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[478]"></a>InitAlliance()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rkp.o(i._Z12InitAlliancev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = InitAlliance() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[b4e]"></a>InitTxParams(unsigned char*, FLAG_FIELD*, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, apipckprocessing.o(i._Z12InitTxParamsPhP10FLAG_FIELDS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitTxParams(unsigned char*, FLAG_FIELD*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
</UL>

<P><STRONG><a name="[479]"></a>Init_Rf_exec()</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, init.o(i._Z12Init_Rf_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = Init_Rf_exec() &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_C_PROC_Q_empty()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSync()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInitMode(bool)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfControlFromPanelEntry(unsigned char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateC()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfDbMatch()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_rf_subsystem_updated(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[8b8]"></a>IsAnnexAlarm()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, annex.o(i._Z12IsAnnexAlarmv))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entry_Exit_Beeps_exec()
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[868]"></a>IsAnnexEntry()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, annex.o(i._Z12IsAnnexEntryv))
<BR><BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[437]"></a>IsCommFailed()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msme.o(i._Z12IsCommFailedv))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msme_q()
</UL>

<P><STRONG><a name="[aaa]"></a>IsCommandArm(unsigned char*)</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, cybermachine.o(i._Z12IsCommandArmPh))
<BR><BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCyberDetectedCmd(unsigned char*)
</UL>

<P><STRONG><a name="[7bb]"></a>IsGSMJamming()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_comm.o(i._Z12IsGSMJammingv))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJammingEventAction(S_CPUI_ButtonInfo*)
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBypassIndication()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[4e6]"></a>IsGsmEnabled()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gsm_comm.o(i._Z12IsGsmEnabledv))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_open_call(unsigned char*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIDEO_channel_select(S_MESSAGE_COMM_INFO*, COMMUNICATION_CHANNEL_E)
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_STATUS_exec()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_supervision_test()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[438]"></a>IsMsmeQempty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msme_q.o(i._Z12IsMsmeQemptyv))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAlarmMsgesFromQ()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msme_q()
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_power_cycle_exec()
</UL>

<P><STRONG><a name="[485]"></a>IsNoHSCamera(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ram_rf_sec_zone.o(i._Z12IsNoHSCamerah))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsNoHSCamera(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[291]"></a>IsOneLenByte(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_mux_control.o(i._Z12IsOneLenBytet))
<BR><BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MuxSendMessage(unsigned char, unsigned char*, unsigned short*, unsigned short*)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxAllocateBuffer(unsigned char, unsigned short)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxBuilder(unsigned char, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
</UL>

<P><STRONG><a name="[486]"></a>IsPanelArmed()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, util.o(i._Z12IsPanelArmedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsPanelArmed()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_SendSTUNIfConfigured()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUpdates()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[326]"></a>IsPanicAlarm()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, security.o(i._Z12IsPanicAlarmv))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_clear_annex_alarm_in_memory()
</UL>

<P><STRONG><a name="[487]"></a>IsPowerMsgEn()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main_power.o(i._Z12IsPowerMsgEnv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsPowerMsgEn() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
</UL>
<BR>[Called By]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainPowerMsgStatus()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcMsgToBeSent()
</UL>

<P><STRONG><a name="[55b]"></a>IsSirenError()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ram_siren.o(i._Z12IsSirenErrorv))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[488]"></a>IsSystemIdle()</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, rb_app.o(i._Z12IsSystemIdlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsSystemIdle()
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAllPendingReqEmpty()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_DIAL_RETRY_Idle()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_DIAL_PHONE_NUM_Idle()
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataLinkIdle()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmVoiceHandlerOn()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_G_PROC_Q_empty()
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_VOICE_TRANSMIT_Idle()
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_VOICE_RECEIVE_Idle()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_SMS_MESSAGE_Idle()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_GSM_MESSAGE_Idle()
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPdaPlugedOut()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_G_PROC_TRANSMIT_Idle()
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommStateIdle()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_C_PROC_Q_empty()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSaveFileIdle()
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfTransmitIdle()
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfReciveIdle()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGetPictureIdle()
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_IP_APP_COMMAND_idle()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoVideoIdle()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_RAM_DB_Idle()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoRFMachineIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[49c]"></a>JammingCheck()</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, jammingcheck.o(i._Z12JammingCheckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JammingCheck() &rArr; I2CWriteBuffer(I2C_COMMAND_WRITE) &rArr; IsNeedCyberProcess(unsigned char*) &rArr; CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD) &rArr; SaveI2CBuffCopy(S_CyberInfo*, unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioAPI_GetLastSecMsgRSSI()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingClearData()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
</UL>

<P><STRONG><a name="[368]"></a>LED_Init_Led()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, led_api.o(i._Z12LED_Init_Ledv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init_Led() &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init()
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init_Param()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[4a0]"></a>MP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, maintenance.o(i._Z12MP_APP_startPhS_13TimerStruct_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MP_APP_start(unsigned char*, unsigned char*, TimerStruct_S) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[4a1]"></a>ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)</STRONG> (Thumb, 374 bytes, Stack size 328 bytes, apicmdprocessing.o(i._Z12ModifyFieldsttPhtPt19API_CallModifySrc_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValue(unsigned short, unsigned char*, unsigned char*, unsigned short*)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateKF3ConfigBit(unsigned short, unsigned short)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFieldId(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiModifyHandler_exec()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityCmd_exec()
</UL>

<P><STRONG><a name="[255]"></a>NVIC_ClrPend(unsigned long)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardware_vf.o(i._Z12NVIC_ClrPendm))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetRxGDOs()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_3_ISR()
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_1_ISR()
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_0_ISR()
</UL>

<P><STRONG><a name="[322]"></a>OSAL_MemCopy(void*, void*, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, osal_services.o(i._Z12OSAL_MemCopyPvS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MuxSendMessage(unsigned char, unsigned char*, unsigned short*, unsigned short*)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PrepareAtCommandBuffer(unsigned char, unsigned short*, S_GSM_FUNC_TABLE_HANDLE*, unsigned char, MODEM_COMMAND_E*, unsigned char, unsigned char)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveIpUnnecessaryZeros(unsigned char, unsigned char**, unsigned char*, unsigned short*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ParseSmsMsg(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned char, MODEM*)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferInsert(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadStatistics(S_RF_ReqInfo*)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicited(char*, unsigned short)
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQMemCopy(OSAL_PriorityQueue*, unsigned char*, unsigned, S_COMM_STM_RX_MNG_BUFFER_WITH_LEN**)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmConfig(char*, unsigned char, char*, unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructRingNum(unsigned char, char*, char**, unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_AES_128_cbc_encrypt
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FlashDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Read(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGet(OSAL_CyclicBuffer*, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIDValid()
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_PrintMessage(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBlinkAction(unsigned, unsigned char*, unsigned char)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformLoopAction(unsigned*, unsigned char*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_regular_entry_JD_config(unsigned char*, void*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_customer_code_JD_config(unsigned char*, void*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_comm_dest_JD_config(unsigned char*, void*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMajorAndMinorVersions(unsigned char, unsigned char)
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update_Socket_Param(unsigned char*, char*, unsigned char*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VerifyCorrectISNVersion(unsigned char)
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages_exec()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage_exec()
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_Ask4TimeStamp(unsigned char*)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTimeStamp(unsigned char*, unsigned char*)
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_Create_POSESO_Reply(unsigned char*, unsigned short)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triggger_Program_Flash_Subpage(unsigned long, unsigned char*, int)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_LearnDeviceOnHandshake(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_RelayPOSESOMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_HandleTagInterface(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDBEntry(unsigned char*, const S_RFApiVSEG_DeviceTypeInfo*)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_HandleInterface(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacketToLogger(unsigned char*, unsigned char)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfMsgLog(unsigned char*, DEVICE_TYPE)
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_Open_data_connection(unsigned char*)
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_GetCallingLineNum(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIdBuffer(unsigned char*)
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVirusMsgThisPanel(unsigned char*)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusMessage(unsigned char*)
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCyberMachineActivationModeAndCounters(S_CyberInfo*, E_CYBER_DETECTED_CMD)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveI2CBuffCopy(S_CyberInfo*, unsigned char*)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRandomSlotVector(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Config(TVirusCryptObj*, unsigned)
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Exec(TReadVirtualSnObj*)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutBufferByInterrupt(int, char*, int)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildMasterLearnPayLoad(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[27c]"></a>OSAL_MsgFree(OSAL_Msg*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, osal_msg.o(i._Z12OSAL_MsgFreeP8OSAL_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSAL_MsgFree(OSAL_Msg*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_UartInit()
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_CheckIfNewSWLoaded(unsigned char)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitRadio(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
</UL>

<P><STRONG><a name="[410]"></a>OSAL_StrCopy(char*, const char*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, osal_services.o(i._Z12OSAL_StrCopyPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_StrCopy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQ(OSAL_PriorityQueue*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructData(unsigned char, char*, char**, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicesSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
</UL>

<P><STRONG><a name="[c61]"></a>PSM_RTC_Tick()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z12PSM_RTC_Tickv))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR()
</UL>

<P><STRONG><a name="[4a8]"></a>PartArmPanel(int, S_CPUI_ButtonInfo*)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, kpdoutstub.o(i._Z12PartArmPaneliP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PartArmPanel(int, S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator =(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::data()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator &lang;&lang;(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmNightAction(S_CPUI_ButtonInfo*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmDayAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[116]"></a>PerArmAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, kpdoutstub.o(i._Z12PerArmActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = PerArmAction(S_CPUI_ButtonInfo*) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator =(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::data()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[4ae]"></a>PerimeterArm(PerimeterArmTrigger_U)</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, prealarm_handler.o(i._Z12PerimeterArm21PerimeterArmTrigger_U))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = PerimeterArm(PerimeterArmTrigger_U) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumOpdds()
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrPreLogOffset()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDQAcks()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_perimeter_arm_status(unsigned char)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_ovds()
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Perimeter_window_value()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_panel_notification(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPreArmStatus(bool)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[483]"></a>QueueHandler(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queuehandler.o(i._Z12QueueHandlerhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandlerStarvationActions()
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandlerFinishSending(unsigned char, unsigned char)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfCanPushMessageToQueue(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler2(unsigned char, unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler3()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[4ba]"></a>RB_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rb_app.o(i._Z12RB_APP_startPhS_13TimerStruct_SP19U_MAINTENANCE_FLAGS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RB_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[4bb]"></a>RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rkp.o(i._Z12RKP_send_msg13RKP_MESSAGE_EP13RKP_MSG_VAL_Uhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_message()
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_KPD_Ack(int)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
</UL>

<P><STRONG><a name="[4bd]"></a>RSU_CloseFTP()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rsu_task.o(i._Z12RSU_CloseFTPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RSU_CloseFTP() &rArr; GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[4bf]"></a>Radio_GotoRx(unsigned char)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z12Radio_GotoRxh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetRxGDOs()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FlushFifo(unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalExec()
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleAmplifier(E_CC11XX_AMP)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsRxTxOverflow(unsigned char, unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
</UL>

<P><STRONG><a name="[4c5]"></a>Radio_GotoTx(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z12Radio_GotoTxh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Radio_GotoTx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalExec()
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleAmplifier(E_CC11XX_AMP)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendMsg(unsigned char*, unsigned, unsigned)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
</UL>

<P><STRONG><a name="[4c6]"></a>RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gsm_api.o(i._Z12RegForRxDatahtPjPtPFvhPhtE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short)) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[ac6]"></a>RstSdEnabled()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process_income_message.o(i._Z12RstSdEnabledv))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[4c7]"></a>SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, smt_api.o(i._Z12SMT_RegisterPhPtjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxDailySigFoxMessages()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_set_DailyMsgCounter(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[4cb]"></a>SPI_RxTxData(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, rfdrv_func.o(i._Z12SPI_RxTxDatajPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[4cc]"></a>SPI_SendByte(unsigned char, unsigned char*)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, rfdrv_func.o(i._Z12SPI_SendBytehPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxTxData(unsigned, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[4cd]"></a>SSP_SendData(unsigned char, unsigned char*, unsigned)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ssp_spi_api.o(i._Z12SSP_SendDatahPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitIsNotBusy(unsigned char)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitTxFIFOIsNotFull(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
</UL>

<P><STRONG><a name="[531]"></a>SaveByte2Hex(unsigned long, unsigned char*, unsigned short*, unsigned char, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, apicmdutilfunc.o(i._Z12SaveByte2HexmPhPthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SaveByte2Hex(unsigned long, unsigned char*, unsigned short*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTx4Entity(unsigned short, unsigned char, unsigned short*, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[4cf]"></a>SaveScenario(tSCENARIO_ID)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, smartscheduler.o(i._Z12SaveScenario12tSCENARIO_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
</UL>

<P><STRONG><a name="[ab]"></a>SendRfParams()</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sendrfparameters.o(i._Z12SendRfParamsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = SendRfParams() &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[4d1]"></a>SendTxPacket(unsigned char**)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sendrfmsg.o(i._Z12SendTxPacketPPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandlerFinishSending(unsigned char, unsigned char)
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSyncTxPacket(unsigned char**, unsigned char*, bool*, unsigned char)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[4d3]"></a>Send_KPD_Ack(int)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, security.o(i._Z12Send_KPD_Acki))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Send_KPD_Ack(int) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_duration()
</UL>
<BR>[Called By]<UL><LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[a55]"></a>SetBattFlags(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bat.o(i._Z12SetBattFlagsh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[4d5]"></a>SetCyberMode(unsigned char*)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, cybermachine.o(i._Z12SetCyberModePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = SetCyberMode(unsigned char*) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitOffsetArrays()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[4d7]"></a>SetDelayTask(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, processsystemtask.o(i._Z12SetDelayTaskj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetDelayTask(unsigned) &rArr; SystemTaskReady(SYS_TASK*, unsigned) &rArr; SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTaskReady(SYS_TASK*, unsigned)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[779]"></a>SetGsmStatus(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_comm.o(i._Z12SetGsmStatusb))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
</UL>

<P><STRONG><a name="[95b]"></a>SetSosStatus(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z12SetSosStatusi))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Perform_DTMF_Code_Actions()
</UL>

<P><STRONG><a name="[88a]"></a>SetVideoDone(unsigned char, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, filehandler.o(i._Z12SetVideoDonehh))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c1e]"></a>Set_INT_type(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardware_vf.o(i._Z12Set_INT_typeh))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[76e]"></a>ShiftFitList(FitEntitiesList_t*, unsigned short*)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, apicmdprocessing.o(i._Z12ShiftFitListP17FitEntitiesList_tPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ShiftFitList(FitEntitiesList_t*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityGroup2List(unsigned short, rules_arg_t*, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntities2List(rules_arg_t*, FitEntitiesList_t*, unsigned short*)
</UL>

<P><STRONG><a name="[4d9]"></a>SndHandShake(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, preparedatafortransmission.o(i._Z12SndHandShakeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SndHandShake(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d4]"></a>StartSendCmd(unsigned char*, bool)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sendi2ccmd.o(i._Z12StartSendCmdPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = StartSendCmd(unsigned char*, bool) &rArr; InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetRfEventToQ(unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanicAction(S_CPUI_ButtonInfo*)
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SecEngMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*)
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommandsParser()
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpdCommandsParser()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoPacket()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEntryTime(int, int, int*, void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progExitTime(int, int, int*, void*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[47d]"></a>StartUpdateC()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, maintenance.o(i._Z12StartUpdateCv))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
</UL>

<P><STRONG><a name="[4db]"></a>StopRingTone(bool)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, control_panel.o(i._Z12StopRingToneb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = StopRingTone(bool) &rArr; CODEC_DisconnectPCMOutput(int, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_DisconnectPCMOutput(int, unsigned char, unsigned*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::stop()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
</UL>

<P><STRONG><a name="[1bb]"></a>Test_GetRSSI(char*, unsigned short, unsigned char)</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, test_func.o(i._Z12Test_GetRSSIPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Test_GetRSSI(char*, unsigned short, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Num2MinimalDecStr(unsigned, unsigned char*, unsigned)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetSNMemoryEntry(unsigned char, unsigned char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>Test_ReadRTC(char*, unsigned short, unsigned char)</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, test_func.o(i._Z12Test_ReadRTCPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Test_ReadRTC(char*, unsigned short, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2decstr(unsigned, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[3af]"></a>TimerSetZero(TimerStruct_S*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._Z12TimerSetZeroP13TimerStruct_S))
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartAlarm()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_init()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages_exec()
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_close_connection()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ABORT_time_out()
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_SAFETY_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSafetySnooze(unsigned char, unsigned char)
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AccessOnlyEntry(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AccessOnlyExit(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[4de]"></a>UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, uart_api.o(i._Z12UART_AcquirehhhhtthPFvP17OSAL_CyclicBuffertEhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationDeactivate()
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_UartInit()
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationActivate()
</UL>

<P><STRONG><a name="[afc]"></a>UDP_APP_init()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, udp_app.o(i._Z12UDP_APP_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[41d]"></a>UartClearInt(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart_func.o(i._Z12UartClearInth))
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortClearInterrupts(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
</UL>

<P><STRONG><a name="[3fc]"></a>VAT_PlayStop(unsigned char, unsigned char, unsigned*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, vat_api.o(i._Z12VAT_PlayStophhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = VAT_PlayStop(unsigned char, unsigned char, unsigned*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
</UL>

<P><STRONG><a name="[4df]"></a>VOICE_listen()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, voice_manager.o(i._Z12VOICE_listenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = VOICE_listen() &rArr; SetGSMAudioConfig(unsigned char, unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGSMAudioConfig(unsigned char, unsigned char)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[4a5]"></a>WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, apicmdprocessing.o(i._Z12WriteFieldIDtttmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelAllHandler_exec()
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyUsersByDevices(unsigned char*, bool)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyAllCUI2UIStates(unsigned short)
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddKfCUIUser(unsigned short, unsigned short*)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPinCUIUser(unsigned short, unsigned short*)
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelParallel_UI_Entity(unsigned)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBody(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
</UL>

<P><STRONG><a name="[4e3]"></a>flush_msme_q()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, videoengine.o(i._Z12flush_msme_qv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flush_msme_q()
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_G_PROC_TRANSMIT_Idle()
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGeneralStatusOk()
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQEmptyOrDeleted()
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_get_busy()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[4e9]"></a>getRSSIValue(int, int)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, timer.o(i._Z12getRSSIValueii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getRSSIValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_BuildInfoBufferToSend(unsigned char*, unsigned short, unsigned char*, unsigned char, unsigned short*)
</UL>

<P><STRONG><a name="[4ea]"></a>get_USER_ptr(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ram_user.o(i._Z12get_USER_ptrh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_USER_ptr(unsigned char) &rArr; FL_USER_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnNPT(int, int, int*, void*)
</UL>

<P><STRONG><a name="[d7]"></a>progEditUser(int, int, int*, void*)</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, kpdprogs.o(i._Z12progEditUseriiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = progEditUser(int, int, int*, void*) &rArr; create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEntryDeletion(unsigned short, unsigned short)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare(unsigned char*)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[dd]"></a>progExitTime(int, int, int*, void*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, kpdprogs.o(i._Z12progExitTimeiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = progExitTime(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator &lang;&lang;(const char*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator =(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::data()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[da]"></a>progLearnTag(int, int, int*, void*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, kpdprogs.o(i._Z12progLearnTagiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = progLearnTag(int, int, int*, void*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[430]"></a>ram_rkp_init(unsigned char, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ram_rkp.o(i._Z12ram_rkp_inithh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ram_rkp_init(unsigned char, unsigned char) &rArr; FL_RKP_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
</UL>

<P><STRONG><a name="[386]"></a>setChimeMask(int, int)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, kpdoutstub.o(i._Z12setChimeMaskii))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = setChimeMask(int, int) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_chime_inactivity_cnt(bool)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChimeAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[4ef]"></a>setMutePhone(int, int)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, kpdoutstub.o(i._Z12setMutePhoneii))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = setMutePhone(int, int) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[4f0]"></a>setSwBootSrc(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, maintenance.o(i._Z12setSwBootSrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = setSwBootSrc(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
</UL>

<P><STRONG><a name="[3cd]"></a>A2G_PutBuffer(char**, unsigned*, unsigned short*)</STRONG> (Thumb, 1304 bytes, Stack size 88 bytes, m_a2g.o(i._Z13A2G_PutBufferPPcPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetAudioConfiguration(unsigned char, unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallClose(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallDial(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageReadyForCommand()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmControlReadyForCommand()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_CloseOdmGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmListenReadyForCommand()
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_AnswerCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendSMS(unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Control_Write_Status(unsigned char)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialLen(unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGSMAudioConfig(unsigned char, unsigned char)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceVerificationOption(unsigned char)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpyModeOption(unsigned char)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RejectOption(unsigned char)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[508]"></a>AFP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, afp_app.o(i._Z13AFP_APP_startPhS_13TimerStruct_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AFP_APP_start(unsigned char*, unsigned char*, TimerStruct_S) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[9bd]"></a>ASCII2Integer(char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, comm_common_funcs.o(i._Z13ASCII2IntegerPc))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[509]"></a>AcMsgToBeSent()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main_power.o(i._Z13AcMsgToBeSentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AcMsgToBeSent() &rArr; IsPowerMsgEn() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerSaveWithACTestFlag()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerSaveTestFlag()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTamperState()
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPowerMsgEn()
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
</UL>

<P><STRONG><a name="[50a]"></a>AddEntityBody(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, apicmdprocessing.o(i._Z13AddEntityBodyttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = AddEntityBody(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCUIUserType(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[444]"></a>AddEntityHead(unsigned short, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, apicmdprocessing.o(i._Z13AddEntityHeadtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = AddEntityHead(unsigned short, unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanFieldByte(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardUser()
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyKeypadEntity(int*, int, unsigned char*, bool)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPinCUIUser(unsigned short, unsigned short*)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKfCUIUser(unsigned short, unsigned short, unsigned short)
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[50d]"></a>AddPinCUIUser(unsigned short, unsigned short*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, apicopyuiprocessing.o(i._Z13AddPinCUIUsertPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = AddPinCUIUser(unsigned short, unsigned short*) &rArr; CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDevicesPerUser(unsigned short, unsigned short*, unsigned char*, bool)
</UL>

<P><STRONG><a name="[50e]"></a>AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, c_proc_q.o(i._Z13AddRfEventToQPhh18A2C_PROC_MESSAGE_E12C_DEV_TYPE_Ehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextCprocLocationInPool()
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_DEV_TYPE_send_msg(unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[510]"></a>AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, apicopyuiprocessing.o(i._Z13AddTagCUIUsertPttPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool) &rArr; CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyTagEntity(unsigned char*, unsigned short, bool)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyUsersByDevices(unsigned char*, bool)
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDevicesPerUser(unsigned short, unsigned short*, unsigned char*, bool)
</UL>

<P><STRONG><a name="[ade]"></a>AnnexWasAlarm()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, annex.o(i._Z13AnnexWasAlarmv))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[512]"></a>ApiCmdProcess(unsigned char*, unsigned char*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, apipckprocessing.o(i._Z13ApiCmdProcessPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = ApiCmdProcess(unsigned char*, unsigned char*) &rArr; ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*) &rArr; FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*) &rArr; AddEntities2List(rules_arg_t*, FitEntitiesList_t*, unsigned short*) &rArr; CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*) &rArr; CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArgByte(unsigned char*)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetAllCmd(unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNextMessageAck()
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessNextModifyMsg(unsigned char*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddEntityCmd(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
</UL>

<P><STRONG><a name="[519]"></a>CMNG_InitDone(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemparam.o(i._Z13CMNG_InitDoneh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMNG_InitDone(unsigned char) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[381]"></a>CPUI_StopBeep(unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cpui_func.o(i._Z13CPUI_StopBeeph))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CPUI_StopBeep(unsigned char) &rArr; CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_BeepStop()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_IsBusy()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover_voice_settings()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingTonePlaying()
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[51d]"></a>CP_OpenTamper()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security.o(i._Z13CP_OpenTamperv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CP_OpenTamper() &rArr; get_CONTROL_PANEL_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[51f]"></a>C_PROC_Q_init()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, c_proc_q.o(i._Z13C_PROC_Q_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = C_PROC_Q_init() &rArr; CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[706]"></a>Calc_Checksum(unsigned char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, util.o(i._Z13Calc_ChecksumPhj))
<BR><BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_build_frame(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_build_frame(unsigned char*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[186]"></a>CallCmsAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z13CallCmsActionP17S_CPUI_ButtonInfo))
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[3b7]"></a>Change_volume(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, control_panel.o(i._Z13Change_volumeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Change_volume(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::setBeepVol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[61d]"></a>CheckStatuses()</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, checkstatuses.o(i._Z13CheckStatusesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckStatuses()
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>

<P><STRONG><a name="[520]"></a>ClearEEramMem(bool)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, security.o(i._Z13ClearEEramMemb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ClearEEramMem(bool) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[522]"></a>ClearMsgFromQ(OSAL_PriorityQueue*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, comm_stm_rx_manager.o(i._Z13ClearMsgFromQP18OSAL_PriorityQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearMsgFromQ(OSAL_PriorityQueue*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[a84]"></a>ClrOffsetSave()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, log.o(i._Z13ClrOffsetSavev))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[c0f]"></a>ClrPwrMsgFlag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_power.o(i._Z13ClrPwrMsgFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[511]"></a>CopyTagEntity(unsigned char*, unsigned short, bool)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, apicopyuiprocessing.o(i._Z13CopyTagEntityPhtb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = CopyTagEntity(unsigned char*, unsigned short, bool) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)
</UL>

<P><STRONG><a name="[2ad]"></a>EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, eeprom_api.o(i._Z13EEPROM_Write1jPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SaveCurrentStatistics()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetFrequency(char*, unsigned short, unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSendCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetTxPower(char*, unsigned short, unsigned char)
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_ClearAllDeviceBatteryLevel()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexWriteArmFlag(bool, bool)
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBatteryStatus(DEVICE_TYPE, unsigned char, C_DEV_TYPE_E, unsigned char)
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInitJdItrAvaible(unsigned char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMutePhone(int, int)
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSavePeriodicCounters()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMap_HardReset_exec()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIMHTime(unsigned short)
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageBeforeReset(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TriggerRFresetCounter()
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetRFresetCounter()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTag8ByteUpdateReset(int, int, int*, void*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progMMUpdateReset(int, int, int*, void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGsmLed(int, int, int*, void*)
</UL>

<P><STRONG><a name="[38f]"></a>EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, eeprom_api.o(i._Z13EEPROM_Write2jPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSwBootSrc(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_AdvanceSigFoxCounter()
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_set_DailyMsgCounter(unsigned char, unsigned char)
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_TestApplicationOnOff(unsigned char, bool)
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_is_backup_valid_bit(unsigned char)
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValToPrintGSM(unsigned char, bool)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_Pic_last_index(unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_All_files()
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSimNumberToEEProm(unsigned char*, unsigned char)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_EX_EEPROM_write(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerHandler_exec()
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_clear()
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSavePreOffset()
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLogEvent(unsigned char*)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSaveOffset()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPINBeforeArm(int, int)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperMask(int, int)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxtMsgBits(unsigned char*, bool)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChimeMask(int, int)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_installation_completed(unsigned char)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_rf_subsystem_updated(unsigned char)
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_boot_verbose_mode(unsigned char)
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_boot_request_main(unsigned char, bool)
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_target_is_image(unsigned char)
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MM_update_table_num()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_new_image_c(unsigned char)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_new_image_a(unsigned char)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMap_HardReset_exec()
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamControlPanelClearLowBattIndication()
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAlliance(unsigned char, unsigned char)
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertSecStateToQ()
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_Exec(TWriteVirtualSnObj*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[5e9]"></a>EL_L2_reset_F()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z13EL_L2_reset_Fv))
<BR><BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_open(unsigned char*, unsigned char*)
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_driver_init()
</UL>

<P><STRONG><a name="[523]"></a>EL_fake_scptr(unsigned char*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, el_v2_driver.o(i._Z13EL_fake_scptrPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EL_fake_scptr(unsigned char*) &rArr; EL_verify_crc_F(unsigned char*) &rArr; calc_chksum16(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_verify_crc_F(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
</UL>

<P><STRONG><a name="[525]"></a>EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z13EL_send_cmd_FPhhP16EL_DRIVER_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_SendPacketOverConnection(unsigned char*, unsigned char)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_send(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_handler_F(unsigned char*, unsigned char*)
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_nack()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_CP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_receive()
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_tag(unsigned char*, unsigned char)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndUdpMsg(FLAG_FIELD*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[528]"></a>FL_RULES_read(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fl_types.o(i._Z13FL_RULES_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_RULES_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
</UL>

<P><STRONG><a name="[109]"></a>FL_SIREN_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z13FL_SIREN_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_SIREN_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_CheckIfDeviceValid(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*)
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMajorAndMinorVersions(unsigned char, unsigned char)
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VerifyCorrectISNVersion(unsigned char)
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SIREN_DEV_ers(unsigned char)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDeviceBatteryLevelTable(Inf4SendTechinfInfoTask_t*)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_siren_init(unsigned char, unsigned char)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidSirenEntry()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOldSirenCmd(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_sirens()
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenVersionCheck(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
</UL>
<P><STRONG><a name="[529]"></a>FL_USER_erase(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fl_types.o(i._Z13FL_USER_eraseh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FL_USER_erase(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
</UL>

<P><STRONG><a name="[52a]"></a>FL_USER_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fl_types.o(i._Z13FL_USER_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_USER_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[c4f]"></a>FillItrBuffer(unsigned char*, Inf4SendTechinfInfoTask_t*, ItrStatus_t*)</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, c_proc.o(i._Z13FillItrBufferPhP25Inf4SendTechinfInfoTask_tP11ItrStatus_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FillItrBuffer(unsigned char*, Inf4SendTechinfInfoTask_t*, ItrStatus_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
</UL>

<P><STRONG><a name="[52b]"></a>FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, c_proc.o(i._Z13FillIvsBufferPhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardwareVersion()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoreSubVersion()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoreVersion()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_GetDeviceVersionCode(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicesSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions_exec()
</UL>

<P><STRONG><a name="[52e]"></a>FillTx4Entity(unsigned short, unsigned char, unsigned short*, unsigned char, unsigned char*)</STRONG> (Thumb, 850 bytes, Stack size 96 bytes, apicmdprocessing.o(i._Z13FillTx4EntitythPthPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FillTx4Entity(unsigned short, unsigned char, unsigned short*, unsigned char, unsigned char*) &rArr; GetPrintEntity(unsigned char) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveByte2Hex(unsigned long, unsigned char*, unsigned short*, unsigned char, unsigned char)
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDec2Hex(unsigned long, unsigned char*, unsigned short*)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrintEntity(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
</UL>

<P><STRONG><a name="[456]"></a>FullArmAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z13FullArmActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FullArmAction(S_CPUI_ButtonInfo*) &rArr; StartSendCmd(unsigned char*, bool) &rArr; InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator =(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::data()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[532]"></a>GSM_Power_Off(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, comm_common_funcs.o(i._Z13GSM_Power_Offh))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GSM_Power_Off(unsigned char) &rArr; GSM_Control_API_SaveCurrentStatistics() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableUart1Tx()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPermanentStatistics()
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SaveCurrentStatistics()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPeriodicStatistics()
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[aa1]"></a>GetDeviceGTID(unsigned char, unsigned char)</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, do_it_yourself.o(i._Z13GetDeviceGTIDhh))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[6b4]"></a>GetEncryptBIT()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z13GetEncryptBITv))
<BR><BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_handler_F(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[716]"></a>GetFunctionId(void(*)())</STRONG> (Thumb, 1672 bytes, Stack size 0 bytes, scenarios.o(i._Z13GetFunctionIdPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFromScheduler(void(*)(), tQ_TYPE)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateFunction(void(*)())
</UL>

<P><STRONG><a name="[460]"></a>GetHexPerByte(unsigned char*, unsigned short*)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, apipckprocessing.o(i._Z13GetHexPerBytePhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetHexPerByte(unsigned char*, unsigned short*) &rArr; isxdigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex(unsigned char)
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessModifyEntityCmd(unsigned short, unsigned short*, unsigned char*, unsigned char*)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddEntityCmd(unsigned char*, unsigned char*)
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRuleArgs(unsigned char*, unsigned short*, rules_arg_t*)
</UL>

<P><STRONG><a name="[5a7]"></a>GetIVDentryId(SEQUENCER_LABEL_E)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, videoengine.o(i._Z13GetIVDentryId17SEQUENCER_LABEL_E))
<BR><BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompensateForNoVidReady(VIDEO_RF_TRANSFER_S*)
</UL>

<P><STRONG><a name="[3c7]"></a>GetLinkStatus()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, link.o(i._Z13GetLinkStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Poseso_LISTEN_exec()
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_handler(unsigned char*, unsigned char)
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDateListenStatusBit()
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_LISTEN_mode()
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_LISTEN_mode()
</UL>

<P><STRONG><a name="[1b7]"></a>GetPanelSwVer(char*, unsigned short, unsigned char)</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, test_func.o(i._Z13GetPanelSwVerPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GetPanelSwVer(char*, unsigned short, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDecStingLen(unsigned)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2decstr(unsigned, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[3d2]"></a>GetPdaReceive(unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, el_v2_driver.o(i._Z13GetPdaReceivePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetPdaReceive(unsigned char*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_ReadMsg()
</UL>

<P><STRONG><a name="[539]"></a>GetTargetType(unsigned char, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, deviceupdatemachine.o(i._Z13GetTargetTypehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetTargetType(unsigned char, unsigned char) &rArr; ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[6cb]"></a>GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, smartscheduler.o(i._Z13GetTaskQIndexPFvvEP16sSmartSchedulerQ7tQ_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFromScheduler(void(*)(), tQ_TYPE)
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskPriority(sSmartSchedulerQ*, void(*)())
</UL>

<P><STRONG><a name="[53c]"></a>GetVideoEntry(unsigned char, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fl_types.o(i._Z13GetVideoEntryhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetVideoEntry(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpddAckReceived(unsigned char, unsigned char, bool)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetPhotoDelay(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngine_BuildVidParamsBuffer(unsigned char*, unsigned char, RF_SEC_ZONE_TYPE_E)
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompensateForNoVidReady(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoRequest(unsigned char)
</UL>

<P><STRONG><a name="[c1b]"></a>Get_EINT_type()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardware_vf.o(i._Z13Get_EINT_typev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[53d]"></a>HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, hal_api.o(i._Z13HAL_CfgGPIPinhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_UpdateButtonInterrupt(unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_HwPowerSaveControl(unsigned char)
</UL>

<P><STRONG><a name="[247]"></a>HAL_CfgToGPIO(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hal_api.o(i._Z13HAL_CfgToGPIOhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CfgToGPIO(unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PatformSpecificInit()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_Init(unsigned char)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_InitButtonInterrupts()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_HwPowerSaveControl(unsigned char)
</UL>

<P><STRONG><a name="[53e]"></a>HAL_ClrGPIInt(unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_api.o(i._Z13HAL_ClrGPIInthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ClrGPIInt(unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_ClearButtonInterrupt()
</UL>

<P><STRONG><a name="[448]"></a>HAL_SetGPOPin(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_api.o(i._Z13HAL_SetGPOPinhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SetGPOPin(unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PatformSpecificInit()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_UpdateButtonEntries(unsigned char)
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
</UL>

<P><STRONG><a name="[2a9]"></a>HW_TIMER_Init(unsigned char, unsigned short, void(*)())</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, hw_timer_api.o(i._Z13HW_TIMER_InithtPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_TIMER_Init(unsigned char, unsigned short, void(*)()) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnablePeripheralPower(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_Init()
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnableBpsk(unsigned char)
</UL>

<P><STRONG><a name="[409]"></a>HW_TIMER_Stop(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hw_timer_api.o(i._Z13HW_TIMER_Stoph))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_TIMER_Stop(unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortDisableInterrupts(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_2_ISR()
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_1_ISR()
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_0_ISR()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_D2ACodecCallBack()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_BeepStop()
</UL>

<P><STRONG><a name="[87b]"></a>HWcalculation(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, c_proc.o(i._Z13HWcalculationh))
<BR><BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[541]"></a>InitGsmConfig(char*, unsigned char, char*, unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, gsm_stm_control.o(i._Z13InitGsmConfigPchS_hS_hhhht))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitGsmConfig(char*, unsigned char, char*, unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[545]"></a>InitPriorityQ(sPriorityQ*, Q_TYPE_E)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, priorityq.o(i._Z13InitPriorityQP10sPriorityQ8Q_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitScheduler()
</UL>

<P><STRONG><a name="[542]"></a>InitRamMemMap()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rammemorymap.o(i._Z13InitRamMemMapv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitRamMemMap() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[543]"></a>InitScheduler()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, smartscheduler.o(i._Z13InitSchedulerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitScheduler() &rArr; init_Software_Modules(unsigned char, unsigned char) &rArr; RPC_init() &rArr; CopyParamTableFromEpromToRam() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInit()
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSchenarioTable()
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPriorityQ(sPriorityQ*, Q_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[614]"></a>Integer2ASCII(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, comm_common_funcs.o(i._Z13Integer2ASCIIPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Integer2ASCII(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[99e]"></a>IsAttackExist(TAttackDataBase*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cyberattackstates.o(i._Z13IsAttackExistP15TAttackDataBase))
<BR><BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementExec(TAttackDataBase*, bool)
</UL>

<P><STRONG><a name="[c17]"></a>IsClearToSend()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardware_vf.o(i._Z13IsClearToSendv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[ac7]"></a>IsDebugMsgDis()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z13IsDebugMsgDisv))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[348]"></a>IsEventActive(unsigned char*, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cpui_func.o(i._Z13IsEventActivePht))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
</UL>

<P><STRONG><a name="[548]"></a>IsFoundRegEnd(unsigned char*, unsigned, unsigned char)</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, comm_stm_rx_manager.o(i._Z13IsFoundRegEndPhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IsFoundRegEnd(unsigned char*, unsigned, unsigned char) &rArr; RxMngGetbufferLen(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStrRev(char*, char*, unsigned, unsigned)
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGetbufferLen(unsigned char*, unsigned char)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngHexSearch(unsigned char*, unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
</UL>

<P><STRONG><a name="[60f]"></a>IsGSMPrintDis()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z13IsGSMPrintDisv))
<BR><BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_PrintMessage(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleGsmPrintAction(S_CPUI_ButtonInfo*)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutBufferByInterrupt(int, char*, int)
</UL>

<P><STRONG><a name="[521]"></a>IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z13IsMode2DeviceP21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDeleteEntryMessages()
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVS_loss_and_inactivity_check()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_update_Timestamp_on_arm_detection(unsigned char*, S_MSME_MSG_EVENT*, bool)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_build_msg(unsigned char*, unsigned char*, S_SEC_ZONE_ENTRY_DATA*, unsigned char)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_bypass(unsigned char, bool)
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_chime(unsigned char, bool)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEEramMem(bool)
</UL>

<P><STRONG><a name="[a7e]"></a>IsPSM_STUN_On()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z13IsPSM_STUN_Onv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[396]"></a>IsSessionOpen()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_link_manager.o(i._Z13IsSessionOpenv))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[3ad]"></a>KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)</STRONG> (Thumb, 674 bytes, Stack size 48 bytes, key_fob.o(i._Z13KfLedsInErrorP16U_KEY_FOB_PARAMShP20KEY_FOB_LEDS_STATE_Sj))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFLowBat(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
</UL>

<P><STRONG><a name="[54e]"></a>LED_TurnOnLed(unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led_api.o(i._Z13LED_TurnOnLedhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LED_TurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_TurnOnPartLed(unsigned char, unsigned char)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_TurnOnLed(unsigned char, unsigned char)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformLoopAction(unsigned*, unsigned char*)
</UL>

<P><STRONG><a name="[54f]"></a>LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, log.o(i._Z13LOG_RFM_event10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUTPUT_signals(S_RF_OUTPUT_DEV*, U_DEV_TYPE, unsigned char, RF_OUTPUT_SIGNALS_E)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
</UL>

<P><STRONG><a name="[550]"></a>LOG_add_event(E_LOG_EVENT, unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, log.o(i._Z13LOG_add_event11E_LOG_EVENTPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLogEvent(unsigned char*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[6c2]"></a>LOG_get_flags()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, log.o(i._Z13LOG_get_flagsv))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[74]"></a>LOG_init_exec()</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, log.o(i._Z13LOG_init_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = LOG_init_exec() &rArr; InitPreArmStatus(bool) &rArr; PerimeterArm(PerimeterArmTrigger_U) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPreAlarmTicker(unsigned char*)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPreAlarmStatus(bool)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPreArmStatus(bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> log.o(i._Z13LOG_init_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[556]"></a>LogSaveOffset()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, log.o(i._Z13LogSaveOffsetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = LogSaveOffset() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[2c7]"></a>LogVideoEvent(void*, VIDEO_STATUS_E)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, videoengine.o(i._Z13LogVideoEventPv14VIDEO_STATUS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = LogVideoEvent(void*, VIDEO_STATUS_E) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraTypeForLog(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[c0c]"></a>MP_FLASH_read(unsigned char*, unsigned long, unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintenance.o(i._Z13MP_FLASH_readPhmh))
<BR><BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PROGARM_TARGET_build_frame(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned long)
</UL>

<P><STRONG><a name="[4e5]"></a>MSME_get_busy()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, msme.o(i._Z13MSME_get_busyv))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_precondition_exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_power_cycle_exec()
</UL>

<P><STRONG><a name="[558]"></a>MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, msme.o(i._Z13MSME_send_msg10MSME_MSG_E15CODE_ARGUMENT_U10U_DEV_TYPEhmbP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBattEmptyOrMissing()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsThereFogSetBitPanelInFault()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTamperState()
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_input_dev_GetRFInputError()
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_STUN_msg_in_Q()
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSirenError()
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSecError()
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRkpFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_JammingRestoreActions()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeypadPosese(unsigned char*, int, int, S_POSESO_Reply*, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[563]"></a>MoveGuardUser(unsigned short, unsigned short*, unsigned short*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, apicopyuiprocessing.o(i._Z13MoveGuardUsertPtS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MoveGuardUser(unsigned short, unsigned short*, unsigned short*) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyUsersByDevices(unsigned char*, bool)
</UL>

<P><STRONG><a name="[697]"></a>Mux_Buff_Size(unsigned char*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, comm_stm_rx_manager.o(i._Z13Mux_Buff_SizePht))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[63c]"></a>OSAL_HeapInit()</STRONG> (Thumb, 532 bytes, Stack size 20 bytes, osal_heap.o(i._Z13OSAL_HeapInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSAL_HeapInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortStart()
</UL>

<P><STRONG><a name="[564]"></a>OSAL_IdleTask()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osal_idle_task.o(i._Z13OSAL_IdleTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = OSAL_IdleTask() &rArr; LegacyFunc() &rArr; GenerateScheduler_exec() &rArr; OperateFunction(void(*)()) &rArr; OperateTimeBasedEvants(tFUNCTIONS_ID) &rArr; LoadNewScenarios(tQ_TYPE) &rArr; LoadHighPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegacyFunc()
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_DebugCheckHeapOverflow()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapCheckOverrun(unsigned char*)
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_DebugCheckStackOverflow()
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CreateTempTaskWithPendingMessage()
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_FreeStackFromDeletedTasks()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[56a]"></a>OSAL_PortRand()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal_port.o(i._Z13OSAL_PortRandv))
<BR><BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusPayload(unsigned char*)
</UL>

<P><STRONG><a name="[11c]"></a>OutCallAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, kpdoutstub.o(i._Z13OutCallActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = OutCallAction(S_CPUI_ButtonInfo*) &rArr; CloseVoiceCall(S_CPUI_ButtonInfo*) &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceOn()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelInAlarmInMem()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_DIAL_RETRY_Idle()
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StartOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingTonePlaying()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVoiceCall()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyAction(S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[3d1]"></a>PDA_GetBuffer()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, m_pdaprocess.o(i._Z13PDA_GetBufferv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PDA_GetBuffer() &rArr; UART_GetCharByInterrupt(int, char*) &rArr; OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetCharByInterrupt(int, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_ReadMsg()
</UL>

<P><STRONG><a name="[3f3]"></a>PlaceEventInQ(sEventDrivenQ*, t_node*)</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, eventdrivenq.o(i._Z13PlaceEventInQP13sEventDrivenQP6t_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[574]"></a>ProgramKeyPad(unsigned char*, S_POSESO_Reply*, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, process_income_message.o(i._Z13ProgramKeyPadPhP14S_POSESO_Replyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = ProgramKeyPad(unsigned char*, S_POSESO_Reply*, unsigned char) &rArr; ModifyKeypadEntity(int*, int, unsigned char*, bool) &rArr; AddEntityHead(unsigned short, unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceNotDuplicate(unsigned char*, int, int)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyKeypadEntity(int*, int, unsigned char*, bool)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeypadPosese(unsigned char*, int, int, S_POSESO_Reply*, bool)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKeypadEntity(unsigned char*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[405]"></a>QueueHandler1(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queuehandler.o(i._Z13QueueHandler1h))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfParams()
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoReplyMessage(RX_COMMAND*, unsigned char)
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommandsParser()
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceInfoResp(unsigned char*)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[406]"></a>QueueHandler2(unsigned char, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queuehandler.o(i._Z13QueueHandler2hh))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = QueueHandler2(unsigned char, unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGetBatteryInfoRfMsg()
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
</UL>

<P><STRONG><a name="[579]"></a>QueueHandler3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queuehandler.o(i._Z13QueueHandler3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = QueueHandler3() &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[57a]"></a>RKP_build_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, rkp.o(i._Z13RKP_build_msg13RKP_MESSAGE_EP13RKP_MSG_VAL_U))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RKP_build_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_message()
</UL>

<P><STRONG><a name="[57b]"></a>Radio_CalFreq(unsigned)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z13Radio_CalFreqj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalExec()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ConvertFreqToRegister(void*, void*, unsigned)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBpskFreq(unsigned char*)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
</UL>

<P><STRONG><a name="[57e]"></a>Radio_Carrier(unsigned, unsigned)</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z13Radio_Carrierjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Radio_Carrier(unsigned, unsigned) &rArr; Radio_GotoIdle() &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetModulation(unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetTxPower(signed char)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetTxGain(unsigned char)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoTx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[582]"></a>Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z13Radio_DrvInitP18OSAL_PriorityQueueP18S_Radio_StaticDataP12S_RF_ReqInfoP21SAVE_LAST_RF_PARAMS_Sh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char) &rArr; Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferCreate(unsigned char, unsigned short)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferClear(OSAL_CyclicBuffer*)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetCallBackFunction(void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*))
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetTxPower(signed char)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnableBpsk(unsigned char)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[586]"></a>Radio_GotoOff()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z13Radio_GotoOffv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Radio_GotoOff() &rArr; Radio_GotoIdle() &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[299]"></a>Radio_PowerUp()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cc11xxdrvfncvfii.o(i._Z13Radio_PowerUpv))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init()
</UL>

<P><STRONG><a name="[587]"></a>Radio_SendMsg(unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z13Radio_SendMsgPhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Radio_SendMsg(unsigned char*, unsigned, unsigned) &rArr; Radio_GotoIdle() &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FlushFifo(unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoTx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2e8]"></a>ReadTimeStamp(unsigned char*, unsigned char*)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cybermachine.o(i._Z13ReadTimeStampPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadTimeStamp(unsigned char*, unsigned char*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr2(unsigned long, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[96c]"></a>ResetCounters()</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, entercounterstodatabase.o(i._Z13ResetCountersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ResetCounters()
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[588]"></a>ResetPackProc()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, apipckprocessing.o(i._Z13ResetPackProcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ResetPackProc() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetApi()
</UL>

<P><STRONG><a name="[52]"></a>RingTone_exec()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, control_panel.o(i._Z13RingTone_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RingTone_exec() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> control_panel.o(i._Z12StopRingToneb)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[589]"></a>RxMngPauseGSM(unsigned char, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gsm_api.o(i._Z13RxMngPauseGSMhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = RxMngPauseGSM(unsigned char, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortForceMutexRelease(unsigned*)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCapture(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_CommControl(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[3d7]"></a>SIREN_monitor()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ram_siren.o(i._Z13SIREN_monitorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SIREN_monitor()
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenTamperFault(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[83]"></a>SaveFile_exec()</STRONG> (Thumb, 2274 bytes, Stack size 64 bytes, filehandler.o(i._Z13SaveFile_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = SaveFile_exec() &rArr; CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLastAckedPacket()
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_ack(C_PROC_ACK_E)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_perimeter_time_from_last_detection()
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Erase_Flash_Sectors(unsigned char, unsigned char)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashEraserStatus()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileSizeInSectors()
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSaveFlashAddress()
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCameraCommand(void*, unsigned char, unsigned char)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSavePicture(unsigned char*)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSaveFileState()
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScenarioType(SEQUENCER_LABEL_E)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastPicIndex()
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionFailed()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_InitAutoSend(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_FileComplete(unsigned char*, unsigned)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFailRecord()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> filehandler.o(i._Z13SaveFile_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[538]"></a>SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, smartscheduler.o(i._Z13SaveToGeneralh13tFUNCTIONS_ID7tQ_TYPEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScenario(tSCENARIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBootHandler(bool)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInactivityMachine()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPdaReceive(unsigned char*)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInit()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRemoteBootTrigger()
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllUpdates(bool)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[59f]"></a>SendGuardCode()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ram_user.o(i._Z13SendGuardCodev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendGuardCode() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[5a0]"></a>SendOpenRxCmd(unsigned char, unsigned char)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, process_income_message.o(i._Z13SendOpenRxCmdhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SendOpenRxCmd(unsigned char, unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_GET_BIT_RESULT_exec()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
</UL>

<P><STRONG><a name="[5a1]"></a>SendSirenTest(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, siren.o(i._Z13SendSirenTesthhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SendSirenTest(unsigned char, unsigned char, unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest_exec()
</UL>

<P><STRONG><a name="[597]"></a>SessionFailed()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, videohandler.o(i._Z13SessionFailedv))
<BR><BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[73d]"></a>SetRfTxRevive()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i._Z13SetRfTxRevivev))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[e7]"></a>SetSirensOper(int, int, int*, void*)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, kpdprogs.o(i._Z13SetSirensOperiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SetSirensOper(int, int, int*, void*) &rArr; SIREN_send_cmd(E_SIREN_RF_COMMANDS) &rArr; ALARM_on(ALRAM_TYPE_E, unsigned char, bool) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[2f3]"></a>SetSosPending(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z13SetSosPendingb))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Perform_DTMF_Code_Actions()
</UL>

<P><STRONG><a name="[1fb]"></a>SetSystemTask(SYS_TASK*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, processsystemtask.o(i._Z13SetSystemTaskP8SYS_TASKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDelayTask(unsigned)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTaskReady(SYS_TASK*, unsigned)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemTask()
</UL>

<P><STRONG><a name="[5a3]"></a>SetTxtMsgBits(unsigned char*, bool)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, process_income_message.o(i._Z13SetTxtMsgBitsPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SetTxtMsgBits(unsigned char*, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[5a4]"></a>SetVideoReady(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 986 bytes, Stack size 64 bytes, videoq.o(i._Z13SetVideoReadyhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = SetVideoReady(unsigned char, unsigned char, unsigned char*) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Types_CheckDeviceType(unsigned char, unsigned char)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhotoPriority(SEQUENCER_LABEL_E)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_OldSpecialVideoReady(unsigned char)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPreAlarmEntry()
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDetectionMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAllVideosReady(bool)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_entry_start()
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverwriteVideoId(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char, bool)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIVDentryId(SEQUENCER_LABEL_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5b3]"></a>SndKillUpdate(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, preparedatafortransmission.o(i._Z13SndKillUpdateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SndKillUpdate(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5b4]"></a>SndUpdateFile(unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 240 bytes, preparedatafortransmission.o(i._Z13SndUpdateFileh))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsuPacketSize32Byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5b8]"></a>StartRingTone()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, control_panel.o(i._Z13StartRingTonev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = StartRingTone() &rArr; CODEC_DisconnectPCMOutput(int, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_DisconnectPCMOutput(int, unsigned char, unsigned*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
</UL>

<P><STRONG><a name="[5b9]"></a>SystemInit_VF()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hardware_vf.o(i._Z13SystemInit_VFv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemInit_VF() &rArr; InitExtInt3() &rArr; BUTTONS_InitButtonInterrupts() &rArr; BUTTONS_UpdateButtonInterrupt(unsigned char) &rArr; HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemTask()
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStartupDelay()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExtInt3()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExtInt0()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5bd]"></a>SystemPowerUp()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hardware_vf.o(i._Z13SystemPowerUpv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemPowerUp() &rArr; UART_EnableUart1Tx() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableUart1Tx()
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableUart0Tx()
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOS_Go_Power_Save(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[2ee]"></a>TimerSubtract(unsigned long, unsigned long)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, util.o(i._Z13TimerSubtractmm))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartJammingHandler(bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_update_Timestamp_on_arm_detection(unsigned char*, S_MSME_MSG_EVENT*, bool)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
</UL>

<P><STRONG><a name="[5c1]"></a>UDP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, udp_app.o(i._Z13UDP_APP_startPhS_13TimerStruct_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UDP_APP_start(unsigned char*, unsigned char*, TimerStruct_S) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[184]"></a>UpgradeAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z13UpgradeActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UpgradeAction(S_CPUI_ButtonInfo*) &rArr; VOICE_verification_window_on(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[5c2]"></a>VAT_InitCodec()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, vat_func.o(i._Z13VAT_InitCodecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = VAT_InitCodec() &rArr; SysSound::muteSpk(int, unsigned*) &rArr; CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetGPOPin(unsigned char, unsigned char, unsigned char)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int, unsigned*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteMic()
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPstnModuleEnable()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[c66]"></a>VAT_InitFlags()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vat_api.o(i._Z13VAT_InitFlagsv))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[5c6]"></a>VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, vat_api.o(i._Z13VAT_PlayStarthththPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInitDone()
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundOrVAT_exec()
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
</UL>

<P><STRONG><a name="[6c4]"></a>calc_chksum16(unsigned char*, unsigned char, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, util.o(i._Z13calc_chksum16Phht))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_chksum16(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_verify_crc_F(unsigned char*)
</UL>

<P><STRONG><a name="[3a2]"></a>erase_sectors(unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flash_iap_api.o(i._Z13erase_sectorsjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = erase_sectors(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_flash_iap_api_c_iap_func___Z28OSAL_PortDisableCpuInterruptv
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_flash_iap_api_c_iap_func___Z27OSAL_PortEnableCpuInterruptv
</UL>
<BR>[Called By]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_CLEAR()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[290]"></a>getMuxChannel(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, gsm_mux_control.o(i._Z13getMuxChannelh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getMuxChannel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommandRespondTime(unsigned char, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxBuilder(unsigned char, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[391]"></a>get_SIREN_ptr(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ram_siren.o(i._Z13get_SIREN_ptrh))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_siren_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_IsPrevSirenTlbMsgAcked(unsigned char)
<LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetSirenTlbMsgWaitAck(unsigned char)
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetTlbMsgAckStatus(MSME_MSG_ACK_STATUS_E)
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenStatusBuilder(unsigned)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_sirens()
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreviosTamperState(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a53]"></a>init2byteflag(unsigned short*, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, init.o(i._Z13init2byteflagPtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init2byteflag(unsigned short*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[385]"></a>isChimeMasked()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z13isChimeMaskedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isChimeMasked()
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInactivityButtonStatus()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChimeAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[5ca]"></a>is_ligal_char(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, process_income_message.o(i._Z13is_ligal_charh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_ligal_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_letter(unsigned char)
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2f9]"></a>is_phone_mute()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z13is_phone_mutev))
<BR><BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[dc]"></a>progEntryTime(int, int, int*, void*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, kpdprogs.o(i._Z13progEntryTimeiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = progEntryTime(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator &lang;&lang;(const char*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator =(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::data()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[f0]"></a>progHardReset(int, int, int*, void*)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, kpdprogs.o(i._Z13progHardResetiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = progHardReset(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMap_StartHardReset()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[42b]"></a>ram_user_init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ram_user.o(i._Z13ram_user_initv))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5ce]"></a>save_rkp_data(unsigned char*, unsigned char*)</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, do_it_yourself.o(i._Z13save_rkp_dataPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = save_rkp_data(unsigned char*, unsigned char*) &rArr; init_ram_db(unsigned char, unsigned char) &rArr; FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
</UL>

<P><STRONG><a name="[5cf]"></a>setTamperMask(int, int)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, kpdoutstub.o(i._Z13setTamperMaskii))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = setTamperMask(int, int) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTamperMask(int, int, int*, void*)
</UL>

<P><STRONG><a name="[719]"></a>set_fast_dial()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_comm.o(i._Z13set_fast_dialv))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTest(int, int, int*, void*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVoiceCall()
</UL>

<P><STRONG><a name="[3ce]"></a>wait_gprs_ack()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, videohandler.o(i._Z13wait_gprs_ackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wait_gprs_ack()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
</UL>

<P><STRONG><a name="[181]"></a>AccessOnAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z14AccessOnActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AccessOnAction(S_CPUI_ButtonInfo*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>AnnexArmAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z14AnnexArmActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = AnnexArmAction(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator =(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::data()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>AnnexExit_exec()</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, annex.o(i._Z14AnnexExit_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = AnnexExit_exec() &rArr; AnnexArm(int) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Entry_Exit_Beeps(unsigned char)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDeleteEntryMessages()
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartAlarm()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> annex.o(i._Z11AnnexDisarmv)
<LI> annex.o(i._Z14AnnexExit_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[5d5]"></a>AnnexKf3Disarm(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, process_c_proc_messages.o(i._Z14AnnexKf3DisarmP9S_KEY_FOBP16U_KEY_FOB_PARAMShh10U_DEV_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = AnnexKf3Disarm(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
</UL>

<P><STRONG><a name="[5d6]"></a>AnnexStartExit(bool)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, annex.o(i._Z14AnnexStartExitb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnnexStartExit(bool) &rArr; FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char) &rArr; FOR_ALL_RF_SEC_ZONES_set_t_bypass2(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[bc0]"></a>Button2Command(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, deviceconfigmachine.o(i._Z14Button2Commandh))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceLockUnlockCheck_exec()
</UL>

<P><STRONG><a name="[5d8]"></a>CLOCK_get_date(unsigned char*)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, clock.o(i._Z14CLOCK_get_datePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_get_date(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[5d9]"></a>CLOCK_get_time(unsigned char*)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, clock.o(i._Z14CLOCK_get_timePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_get_time(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[5da]"></a>CLOCK_set_date(unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, clock.o(i._Z14CLOCK_set_datePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_set_date(unsigned char*) &rArr; RTC_SetDate(unsigned char, unsigned char, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate(unsigned char, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init_params(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5db]"></a>CLOCK_set_time(unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock.o(i._Z14CLOCK_set_timePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_set_time(unsigned char*) &rArr; RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init_params(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5dc]"></a>CMNG_InitStart(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, systemparam.o(i._Z14CMNG_InitStarth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CMNG_InitStart(unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[5dd]"></a>CODEC_MicOnOff(int, unsigned char, unsigned*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, codec_api.o(i._Z14CODEC_MicOnOffihPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CODEC_MicOnOff(int, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteMic()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::setMicVol(int)
</UL>

<P><STRONG><a name="[5de]"></a>CPUI_TurnOnLed(unsigned char, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cpui_func.o(i._Z14CPUI_TurnOnLedhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CPUI_TurnOnLed(unsigned char, unsigned char) &rArr; LED_TurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOnLed(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[50c]"></a>CleanFieldByte(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, apicmdprocessing.o(i._Z14CleanFieldBytettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CleanFieldByte(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[7b9]"></a>ClearMsgStruct()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, msme.o(i._Z14ClearMsgStructv))
<BR><BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[56f]"></a>CloseVoiceCall(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, kpdoutstub.o(i._Z14CloseVoiceCallP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = CloseVoiceCall(S_CPUI_ButtonInfo*) &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceOn()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StopOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_voice(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceCallAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[932]"></a>ClrCommMsgFlag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z14ClrCommMsgFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
</UL>

<P><STRONG><a name="[5e1]"></a>CollectCharBuf(unsigned char*, unsigned short*, unsigned char, unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, apipckprocessing.o(i._Z14CollectCharBufPhPthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CollectCharBuf(unsigned char*, unsigned short*, unsigned char, unsigned char) &rArr; isxdigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex(unsigned char)
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValue(unsigned short, unsigned char*, unsigned char*, unsigned short*)
</UL>

<P><STRONG><a name="[5e2]"></a>CommHexStr2Num(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, comm_common_funcs.o(i._Z14CommHexStr2NumPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CommHexStr2Num(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2Digit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[5e4]"></a>ConfigAlliance(unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rkp.o(i._Z14ConfigAlliancehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ConfigAlliance(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[5e5]"></a>ConfigPeriodic(unsigned short, unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, process_income_message.o(i._Z14ConfigPeriodictPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ConfigPeriodic(unsigned short, unsigned char*) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_STRING_ptr(unsigned short)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[3f2]"></a>CreateNewEvent(t_node*, void*, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eventdrivenq.o(i._Z14CreateNewEventP6t_nodePvh))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[594]"></a>CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)</STRONG> (Thumb, 1768 bytes, Stack size 408 bytes, videohandler.o(i._Z14CreateStampStrPhS_P21ServiceDataRegister_SP21VideoCommonRegister_Sii))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr3(unsigned long, unsigned char*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr2(unsigned long, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[b66]"></a>DATALINK_reset()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, data_link_manager.o(i._Z14DATALINK_resetv))
<BR><BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
</UL>

<P><STRONG><a name="[965]"></a>DeleteDataBase()</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, checkdevicetype.o(i._Z14DeleteDataBasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeleteDataBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[5e6]"></a>DeviceUnlocked(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, deviceconfigmachine.o(i._Z14DeviceUnlockedhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DeviceUnlocked(unsigned char, unsigned char, unsigned char) &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[5e7]"></a>EL_driver_init()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, el_v2_driver.o(i._Z14EL_driver_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EL_driver_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_reset_state()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_reset_F()
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5e8]"></a>EL_reset_state()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z14EL_reset_statev))
<BR><BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_close()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_driver_init()
</UL>

<P><STRONG><a name="[5ea]"></a>EnTransparency(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, comm_stm_rx_manager.o(i._Z14EnTransparencyj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = EnTransparency(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[464]"></a>ExecuteCommand(S_FLASH_TransferReqInfo*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, flash_func.o(i._Z14ExecuteCommandP23S_FLASH_TransferReqInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ExecuteCommand(S_FLASH_TransferReqInfo*) &rArr; Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*) &rArr; Flash_WriteEnable(unsigned char) &rArr; Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorEraseFunc(unsigned char, unsigned)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_BulkEraseFunc(unsigned char)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
</UL>

<P><STRONG><a name="[5ef]"></a>FL_KEY_FOB_ers(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fl_types.o(i._Z14FL_KEY_FOB_ersh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FL_KEY_FOB_ers(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOffsetArrayElement(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindKfId(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERS_all_devices_exec()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
</UL>

<P><STRONG><a name="[5f2]"></a>FL_SIREN_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fl_types.o(i._Z14FL_SIREN_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_SIREN_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[5f3]"></a>FillKF2UserMap()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, apicmdutilfunc.o(i._Z14FillKF2UserMapv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FillKF2UserMap() &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[5eb]"></a>Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, flash_func.o(i._Z14Flash_ReadFunchjPhjhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitTxFIFOIsEmpty(unsigned char)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearReceiveSSPFIFO(unsigned char)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnable(unsigned char)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteCommand(S_FLASH_TransferReqInfo*)
</UL>

<P><STRONG><a name="[5f8]"></a>ForceAlarm_Off()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alarm.o(i._Z14ForceAlarm_Offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ForceAlarm_Off() &rArr; ALARM_off() &rArr; SetSirenOff() &rArr; CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRepeatRkpStatus()
</UL>

<P><STRONG><a name="[62]"></a>GSM_VOICE_exec()</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, gsm_voice.o(i._Z14GSM_VOICE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = GSM_VOICE_exec() &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmModuleInPowerSaveMode()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageDuringVoiceAvailable()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_establish_call(E_VOICE_DEVICE)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmTransimitSuccess()
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmTransimitFail()
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DRIVER_open()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gsm_voice.o(i._Z14GSM_VOICE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[2cc]"></a>GSM_get_status()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm_comm.o(i._Z14GSM_get_statusv))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_close_call(E_VOICE_DEVICE)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_video_ack()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_gprs_ack()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[3aa]"></a>GeneralSetLeds(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, key_fob.o(i._Z14GeneralSetLedsP22KEY_FOB_SYSTEM_STATE_SP20KEY_FOB_LEDS_STATE_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GeneralSetLeds(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKFLowBattPrevent()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
</UL>

<P><STRONG><a name="[268]"></a>GenerateOffset(unsigned char)</STRONG> (Thumb, 248 bytes, Stack size 28 bytes, checkdevicetype.o(i._Z14GenerateOffseth))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GenerateOffset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSupervisory(unsigned char)
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberCheck()
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCountersToDataBase()
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIdBuffer(unsigned char*)
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCountersFromDataBase()
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCommandToDataBase()
</UL>

<P><STRONG><a name="[421]"></a>GetChannelType(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma_api.o(i._Z14GetChannelTypeh))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
</UL>

<P><STRONG><a name="[931]"></a>GetCommMsgFlag()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, msme.o(i._Z14GetCommMsgFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[a2e]"></a>GetCurrChannel()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dial_phone_num.o(i._Z14GetCurrChannelv))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[b21]"></a>GetDeviceIndex(DEVICE_TYPE, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z14GetDeviceIndex11DEVICE_TYPEh))
<BR><BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedDeviceApprove(unsigned char, unsigned char)
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[600]"></a>GetJDZoneEntry()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, c_proc.o(i._Z14GetJDZoneEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetJDZoneEntry() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialSequencePhoneId(unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJDNag(unsigned)
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_Reset_Jamming_Detector()
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDNag()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[919]"></a>GetLastClipIVD()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, videoengine.o(i._Z14GetLastClipIVDv))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
</UL>

<P><STRONG><a name="[2bb]"></a>GetPageCounter()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filehandler.o(i._Z14GetPageCounterv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[8b3]"></a>GetParserState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, process_income_message.o(i._Z14GetParserStatev))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[52f]"></a>GetPrintEntity(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, apicmdprocessing.o(i._Z14GetPrintEntityh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GetPrintEntity(unsigned char) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTx4Entity(unsigned short, unsigned char, unsigned short*, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[6f3]"></a>GetRfPriority_(I2C_COMMAND_WRITE)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfq.o(i._Z14GetRfPriority_17I2C_COMMAND_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetRfEventToQ(unsigned char*, bool)
</UL>

<P><STRONG><a name="[658]"></a>GetSleepStatus()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, incomingbufferparser.o(i._Z14GetSleepStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSleepStatus(unsigned char)
</UL>

<P><STRONG><a name="[2ec]"></a>GetTimerTicker()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._Z14GetTimerTickerv))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityISNSirenAfterSafety(unsigned char)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSupervisory(unsigned char)
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_JammingRestoreActions()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartJammingHandler(bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_update_Timestamp_on_arm_detection(unsigned char*, S_MSME_MSG_EVENT*, bool)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_input_dev_init(unsigned char, unsigned char)
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddVideoDetection(unsigned char)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecentVideoDetectionMessage(POSESO_CMD_TYPE_E)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[601]"></a>GetVideoBuffer(unsigned char*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, filehandler.o(i._Z14GetVideoBufferPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetVideoBuffer(unsigned char*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[c2d]"></a>GetWindowIndex()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rb_app.o(i._Z14GetWindowIndexv))
<BR><BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triggger_Program_Flash_Subpage(unsigned long, unsigned char*, int)
</UL>

<P><STRONG><a name="[602]"></a>GsmGetBuildVer()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsm_api.o(i._Z14GsmGetBuildVerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GsmGetBuildVer() &rArr; OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[12f]"></a>Gsm_STM_Listen(void*)</STRONG> (Thumb, 1494 bytes, Stack size 32 bytes, gsm_stm_listen.o(i._Z14Gsm_STM_ListenPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Gsm_STM_Listen(void*) &rArr; GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char) &rArr; GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetNumOfPendingRequests(unsigned char)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortForceMutexRelease(unsigned*)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTableHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned short, unsigned short)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCapture(unsigned*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlClearResetCounter()
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageFullCycle()
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngRegForCommTask(unsigned char, unsigned short)
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LsnSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LsnSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmLsnInfo(S_GSM_STM_LSN_INFO*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)</STRONG> (Thumb, 2724 bytes, Stack size 176 bytes, gsm_module_funcs_he910.o(i._Z14HE910_WriteCmdhP23S_GSM_FUNC_TABLE_HANDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*) &rArr; GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char) &rArr; GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetNumOfPendingRequests(unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxEndIndication(unsigned char)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnTransparency(unsigned)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PrepareAtCommandBuffer(unsigned char, unsigned short*, S_GSM_FUNC_TABLE_HANDLE*, unsigned char, MODEM_COMMAND_E*, unsigned char, unsigned char)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveIpUnnecessaryZeros(unsigned char, unsigned char**, unsigned char*, unsigned short*)
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTableCommandIndex(S_GSM_FUNC_TABLE_HANDLE*, unsigned short)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910SetDTRLine(unsigned char)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Integer2ASCII(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetFirmWareVer()
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetBuildVer()
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnFullTransparency(unsigned)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxParsingSkip(unsigned char)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoiceWindowStatus()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[a81]"></a>HW_COUNTER_Get(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_timer_api.o(i._Z14HW_COUNTER_Geth))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[2a7]"></a>HW_TIMER_Start(unsigned char, unsigned, unsigned char)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, hw_timer_api.o(i._Z14HW_TIMER_Starthjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_TIMER_Start(unsigned char, unsigned, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortEnableInterrupts(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PatformSpecificInit()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_D2ACodecCallBack()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_Beep(unsigned, int, int, unsigned, int, int, void(*)())
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadNextBpskSymbol()
</UL>

<P><STRONG><a name="[49e]"></a>I2CWriteBuffer(I2C_COMMAND_WRITE)</STRONG> (Thumb, 1512 bytes, Stack size 64 bytes, i2cwritebuffer.o(i._Z14I2CWriteBuffer17I2C_COMMAND_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2CWriteBuffer(I2C_COMMAND_WRITE) &rArr; IsNeedCyberProcess(unsigned char*) &rArr; CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD) &rArr; SaveI2CBuffCopy(S_CyberInfo*, unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_GetCyberFlags()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildOPDISecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberCheck()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTypedecode()
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedCyberProcess(unsigned char*)
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStatuses()
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfParams()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingCheck()
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceInfoResp(unsigned char*)
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer1()
</UL>

<P><STRONG><a name="[620]"></a>INIT_InitRadio(unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, init_func.o(i._Z14INIT_InitRadioh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = INIT_InitRadio(unsigned char) &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[622]"></a>IP_FLASH_build(unsigned char*, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ip_app.o(i._Z14IP_FLASH_buildPhhS_hS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IP_FLASH_build(unsigned char*, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[624]"></a>InitSFXLibrary()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, smt_task.o(i._Z14InitSFXLibraryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = InitSFXLibrary() &rArr; SfxInit &rArr; sfx_set_nv_mem &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_initDataBase
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_GetIdPtr(unsigned short)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[5bc]"></a>InitSystemTask()</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, processsystemtask.o(i._Z14InitSystemTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitSystemTask() &rArr; SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_VF()
</UL>

<P><STRONG><a name="[552]"></a>InsertLogEvent(unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, log.o(i._Z14InsertLogEventPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
</UL>

<P><STRONG><a name="[979]"></a>IsAlreadyInMem(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, security.o(i._Z14IsAlreadyInMemh))
<BR><BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
</UL>

<P><STRONG><a name="[4d0]"></a>IsAlreadySaved(tSCENARIO_ID)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smartscheduler.o(i._Z14IsAlreadySaved12tSCENARIO_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScenario(tSCENARIO_ID)
</UL>

<P><STRONG><a name="[626]"></a>IsCommBypassed(COMMUNICATION_CHANNEL_E)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gsm_comm.o(i._Z14IsCommBypassed23COMMUNICATION_CHANNEL_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsCommBypassed(COMMUNICATION_CHANNEL_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
</UL>

<P><STRONG><a name="[9b6]"></a>IsDataLinkFree()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, data_link_manager.o(i._Z14IsDataLinkFreev))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[48d]"></a>IsDataLinkIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, data_link_manager.o(i._Z14IsDataLinkIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[34a]"></a>IsEventInQueue(unsigned short, OSAL_PriorityQueue*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cpui_func.o(i._Z14IsEventInQueuetP18OSAL_PriorityQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IsEventInQueue(unsigned short, OSAL_PriorityQueue*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetElement(OSAL_PriorityQueue*, unsigned short)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetNumOfElements(OSAL_PriorityQueue*)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetMaxFunc(OSAL_PriorityQueue*, unsigned*, void**)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[862]"></a>IsItLastPacket(unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apipckprocessing.o(i._Z14IsItLastPacketPh))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiModifyHandler_exec()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityCmd_exec()
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacketProcessingStates(unsigned char*)
</UL>

<P><STRONG><a name="[627]"></a>IsNonChimeZone(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ram_rf_sec_zone.o(i._Z14IsNonChimeZoneh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsNonChimeZone(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[489]"></a>IsPdaPlugedOut()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scheduler.o(i._Z14IsPdaPlugedOutv))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[3a7]"></a>IsPerimeterArm()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z14IsPerimeterArmv))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_IsArmed()
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneralSetLeds(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKf3Status(S_KEY_FOB_ENTRY*, U_KEY_FOB_PARAMS*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_perimeter_arm_status(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char)
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRepeatRkpStatus()
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_state_LEDS_byte(unsigned)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
</UL>

<P><STRONG><a name="[98b]"></a>IsPossesoVoice()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, voice_manager.o(i._Z14IsPossesoVoicev))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[48b]"></a>IsRfReciveIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, c_proc.o(i._Z14IsRfReciveIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[3ec]"></a>IsRsuByteValid(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, deviceupdatemachine.o(i._Z14IsRsuByteValidh))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKfRFMsg(unsigned char, unsigned char*)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForJDRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHandshakeDecision(RX_COMMAND, PRIVATE_ID)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDecision(RX_COMMAND, ID_BUFFER, PRIVATE_ID*)
</UL>

<P><STRONG><a name="[490]"></a>IsSaveFileIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filehandler.o(i._Z14IsSaveFileIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[2b1]"></a>IsTimerExpired(TimerStruct_S*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i._Z14IsTimerExpiredP13TimerStruct_S))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOn(unsigned char, bool)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoCommBypassed(COMMUNICATION_CHANNEL_E)
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommBypassed(COMMUNICATION_CHANNEL_E)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_exec()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_STATUS_exec()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages_exec()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerHandler_exec()
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_wait4c()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeter_entry_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_voice_window_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerKeyRequest_exec()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDtmfTimout_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_force_arm_desicion_4_open_zone_proc(U_KEY_FOB_STATUS*, SECURITY_EVENT_E*)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre_alarm_indication_exec()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDAcks_exec()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_power_cycle_exec()
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSecurityTimerExpired()
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test_exec()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_video_ack()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_gprs_ack()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[498]"></a>Is_RAM_DB_Idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ram_db.o(i._Z14Is_RAM_DB_Idlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[628]"></a>LockCfgChanged(unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, deviceconfigmachine.o(i._Z14LockCfgChangedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LockCfgChanged(unsigned char) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_KF_lock_options_ptr()
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[62a]"></a>MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, msme.o(i._Z14MSME_build_msgP16S_MSME_MSG_EVENTPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*) &rArr; AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*) &rArr; GSM_Control_API_GetGsmStatus(S_GSM_STATUS*) &rArr; GSM_Control_StartStopRegDebounceTimer(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read_device_version(unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTPUT_read_device_version(unsigned char, unsigned char)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INPUT_read_device_version(unsigned char, unsigned char)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read_device_version(unsigned char, unsigned char)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read_device_version(unsigned char, unsigned char)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIridiumVersion(unsigned char*)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildDeviceVersion(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfId(unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[5e0]"></a>MSME_pause_msg(unsigned char, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msme.o(i._Z14MSME_pause_msghh))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IsCSDVoiceWindow()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_exec()
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_JammingRestoreActions()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_start()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_precondition_exec()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_sms_send()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_To_Voice_Mode()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[38e]"></a>MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, msme.o(i._Z14MSME_send_msg110MSME_MSG_E15CODE_ARGUMENT_U10U_DEV_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPoseseICI()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_SendSTUNIfConfigured()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStateChangeMsg()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommunicationProtocolInf_ICI_exec()
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage_exec()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_key_fob_data()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerHandler_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_Embedded_Diagnostic_msg(unsigned short, unsigned char)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_supervision_test()
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetSKMaskingDelay(unsigned char)
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecentVideoDetectionMessage(POSESO_CMD_TYPE_E)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageBeforeReset(unsigned char)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[634]"></a>MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, msme.o(i._Z14MSME_send_msg210MSME_MSG_E15CODE_ARGUMENT_U10U_DEV_TYPEP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions_exec()
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramUserInterface(unsigned char*, S_POSESO_Reply*)
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[2cf]"></a>MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, msme.o(i._Z14MSME_send_msg310MSME_MSG_E15CODE_ARGUMENT_U10U_DEV_TYPEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rkp_data(unsigned char*, unsigned char*)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_deployment_key(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_camera_cover_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_BIT_Result_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_SKC_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_Fog_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInf_exec()
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_config_resp(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_OPDI_status(unsigned char*)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRFOutputEntry(int, unsigned char*, unsigned char, bool)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoFailRetrieve_Exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char)
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrongCodeMessage(unsigned char)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDetectionMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRxPeripheralFail(unsigned char, eDetection_source)
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetPhotoDelay(unsigned char*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_perform_duress_actions(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AccessOnlyEntry(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AccessOnlyExit(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[635]"></a>ModifyCUIEntry(int*, unsigned char*, bool*)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, process_income_message.o(i._Z14ModifyCUIEntryPiPhPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = ModifyCUIEntry(int*, unsigned char*, bool*) &rArr; AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramUserInterface(unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[61b]"></a>MuxParsingSkip(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comm_stm_rx_manager.o(i._Z14MuxParsingSkiph))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = MuxParsingSkip(unsigned char) &rArr; SetMaxEndIndication(unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxEndIndication(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[639]"></a>OSAL_ErrorExec(unsigned char, unsigned, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, osal_error_mng.o(i._Z14OSAL_ErrorExechjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSAL_ErrorExec(unsigned char, unsigned, unsigned char) &rArr; OSAL_MsgFree(OSAL_Msg*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskDelete(unsigned char)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Reset()
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IsMailBoxEmpty(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_SendAckUpdateStatus(S_VAT_Info*, unsigned short, unsigned char)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_SessionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteResetOperation(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[63b]"></a>OSAL_PortStart()</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, osal_port.o(i._Z14OSAL_PortStartv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSAL_PortStart() &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapInit()
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34c]"></a>OSAL_StopTimer(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, osal_time_mng.o(i._Z14OSAL_StopTimert))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OSAL_StopTimer(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleUnKnownGDOEvent()
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleTraffic()
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartProtectedFullCycle(unsigned)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStmMessageErrorHandler(unsigned)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[549]"></a>OSAL_StrStrRev(char*, char*, unsigned, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, osal_services.o(i._Z14OSAL_StrStrRevPcS_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OSAL_StrStrRev(char*, char*, unsigned, unsigned) &rArr; OSAL_StrLen(char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegEnd(unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[636]"></a>PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, process_income_message.o(i._Z14PerformParsingPK20PARSER_INSTRUCTION_SPhiiPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchValue2List(const LIST_S*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyKeypadEntity(int*, int, unsigned char*, bool)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyCUIEntry(int*, unsigned char*, bool*)
</UL>

<P><STRONG><a name="[63f]"></a>PrintLabRFLine(int, bool, int, bool)</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, process_c_proc_messages.o(i._Z14PrintLabRFLineibib))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = PrintLabRFLine(int, bool, int, bool) &rArr; SERIAL_PDA_send(unsigned char*, unsigned char) &rArr; UART_PutBufferByInterrupt(int, char*, int) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_IsTestApplicationActive()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_send(unsigned char*, unsigned char)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_String(unsigned char*, int, const SIZED_STRING_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
</UL>

<P><STRONG><a name="[641]"></a>RF_INPUT_valid(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ram_rf_input_dev.o(i._Z14RF_INPUT_validh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_INPUT_valid(unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_DEV_monitor()
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
</UL>

<P><STRONG><a name="[ae9]"></a>RKP_get_status(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_rkp.o(i._Z14RKP_get_statush))
<BR><BR>[Called By]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_device_status(U_DEV_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[642]"></a>RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, rsu_task.o(i._Z14RSU_SendPosesehhhP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDevTypeSecondChar(unsigned char)
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDevTypeFirstChar(unsigned char)
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetTargetCpuEsi(unsigned char)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetMsmeMessage(unsigned char)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDeviceType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[29b]"></a>Radio_FullInit()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z14Radio_FullInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Radio_FullInit() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FillPaTable()
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init()
</UL>

<P><STRONG><a name="[64a]"></a>Radio_ReadRSSI()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z14Radio_ReadRSSIv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Radio_ReadRSSI() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
</UL>

<P><STRONG><a name="[251]"></a>RemoveFunction(void(*)())</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smartscheduler.o(i._Z14RemoveFunctionPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFromScheduler(void(*)(), tQ_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceBatteryInfReq_exec()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_exec()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_exec()
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInactivityButtonStatus()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_exec()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_RECEIVE_exec()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_process_exec()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_GET_BIT_RESULT_exec()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff_ForModems()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundOrVAT_exec()
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRingTone(bool)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommunicationProtocolInf_ICI_exec()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages_exec()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage_exec()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions_exec()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInf_exec()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFileName_exec()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeveFileName_exec()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERS_all_devices_exec()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_PROTOCL_MACHINE_exec()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_PROTOCL_MACHINE_exec()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_PROTOCL_MACHINE_exec()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerHandler_exec()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeter_entry_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_fail()
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_done()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Flash_Sectors_Range_exec()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceLockUnlockCheck_exec()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_TIMER_exec()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_precondition_exec()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_voice_window_exec()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoFailRetrieve_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerKeyRequest_exec()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelAllHandler_exec()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdatesMachine()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest_exec()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFail_Exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSecurity_exec()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_exec()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_exec()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_send_packet_exec()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdParamTable_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUserGuard_exec()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre_alarm_indication_exec()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDAcks_exec()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUnlocked(unsigned char, unsigned char, unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffPirIndication_exec()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialHangUp()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_power_cycle_exec()
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Specific_Device_Machine_Exec()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test_exec()
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCopyAllCUI2UIHandler()
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetModifyHandler()
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGetHandler()
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDelHandler()
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAddEntity()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPackProc()
</UL>

<P><STRONG><a name="[64d]"></a>ResetAddEntity()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, apipckprocessing.o(i._Z14ResetAddEntityv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ResetAddEntity() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetApi()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityCmd_exec()
</UL>

<P><STRONG><a name="[9b4]"></a>RstAckNackFlag()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsmq.o(i._Z14RstAckNackFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[54b]"></a>RxMngHexSearch(unsigned char*, unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, comm_stm_rx_manager.o(i._Z14RxMngHexSearchPhS_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RxMngHexSearch(unsigned char*, unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegStart(unsigned char*, unsigned)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegEnd(unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[af3]"></a>SEC_EVENT_init()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sec_event_q.o(i._Z14SEC_EVENT_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEC_EVENT_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5a2]"></a>SIREN_send_cmd(E_SIREN_RF_COMMANDS)</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, siren.o(i._Z14SIREN_send_cmd19E_SIREN_RF_COMMANDS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = SIREN_send_cmd(E_SIREN_RF_COMMANDS) &rArr; ALARM_on(ALRAM_TYPE_E, unsigned char, bool) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidSirenEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest_exec()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticAlarmDingDong(unsigned char*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_star_button(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirensOper(int, int, int*, void*)
</UL>

<P><STRONG><a name="[2a6]"></a>SOUND_BeepStop()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sound_api.o(i._Z14SOUND_BeepStopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SOUND_BeepStop() &rArr; HW_TIMER_Stop(unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Stop(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_Beep(unsigned, int, int, unsigned, int, int, void(*)())
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::stop()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
</UL>

<P><STRONG><a name="[650]"></a>SaveCommStatus(PANEL_COMM_STATE_E)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z14SaveCommStatus18PANEL_COMM_STATE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SaveCommStatus(PANEL_COMM_STATE_E) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommStatusInMemMap()
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPanelCommState(PANEL_COMM_STATE_E)
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePanelState(PANEL_COMM_STATE_E)
</UL>

<P><STRONG><a name="[59b]"></a>SaveFailRecord()</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, filehandler.o(i._Z14SaveFailRecordv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SaveFailRecord() &rArr; SaveVideoFailRecord(U_FAILED_VIDEO_RECORD*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFailRecord(U_FAILED_VIDEO_RECORD*)
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[652]"></a>SavePanelState(PANEL_COMM_STATE_E)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, communicationstate.o(i._Z14SavePanelState18PANEL_COMM_STATE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SavePanelState(PANEL_COMM_STATE_E) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommStatus(PANEL_COMM_STATE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
</UL>

<P><STRONG><a name="[24e]"></a>SaveToGeneral1(unsigned char, tFUNCTIONS_ID)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smartscheduler.o(i._Z14SaveToGeneral1h13tFUNCTIONS_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateResetMachine(unsigned char)
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_open_call(unsigned char*)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupRamMemMap()
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSirenTest(unsigned char, unsigned short)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOn(unsigned char, bool)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBattHandler()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Entry_Exit_Beeps(unsigned char)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCode()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartAlarm()
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartExit(bool)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_send_msg(S_MESSAGE_COMM_INFO*, DRIVER_STATE_E, unsigned char)
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_voice_call(S_MESSAGE_COMM_INFO*)
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_video_call(S_MESSAGE_COMM_INFO*, VIDEO_SCENARIO_TYPE_E)
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_STUN(S_MESSAGE_COMM_INFO*)
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIDEO_channel_select(S_MESSAGE_COMM_INFO*, COMMUNICATION_CHANNEL_E)
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_exec_start(S_MESSAGE_COMM_INFO*)
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_rec_packet(unsigned char*, unsigned char, E_TRANSPORTS)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetGsmEventToQ(unsigned char*)
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_enable_gsm_comm()
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_receive_call(E_VOICE_DEVICE)
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_start()
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRingProcess()
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRequestServerKeyFog(unsigned char, eRequestServerKeyFogType)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRingTone()
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Poseso_LISTEN_exec()
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStateChangeMsg()
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPanelCommState(PANEL_COMM_STATE_E)
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDeviceBatteryLevelTable(Inf4SendTechinfInfoTask_t*)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_handler(unsigned char*, unsigned char)
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_MESSAGE(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*, bool)
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendCommunicationProtocolInf_ICI()
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages(unsigned char)
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_DEV_TYPE_send_msg(unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartJammingHandler(bool)
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_ack(C_PROC_ACK_E)
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLookingForFile(VIDEO_COMM_SESSION_S*)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFailRecord(U_FAILED_VIDEO_RECORD*)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSavePicture(unsigned char*)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRFProcess(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPdaReceive(unsigned char*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ers_all_devices()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_auto_learn(C_DEV_TYPE_E)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerSaveMode(unsigned)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_decode_command(unsigned char*)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_MACHINE_exec()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_COMMAND_exec()
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
<LI><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init()
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSecurityInit()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRamMemMap()
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInit()
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartReadSysFlags()
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pre_arm_exit(PRE_ARM_EXIT_SCENARIO_E)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDQAcks()
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEntryDeletion(unsigned short, unsigned short)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_TIMER_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyParamTableFromEpromToRam()
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMap_StartHardReset()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_open_pir()
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLabRFLine(int, bool, int, bool)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_entry_start()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUnlocked(unsigned char, unsigned char, unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffPirIndication_exec()
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_Open_data_connection(unsigned char*)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveFailedVideo(unsigned char, unsigned char)
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCheckTemporaryBypass()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRstAfterNumOfSVLost(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUpdates()
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickRfSequenceMachine()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateFlashProgrammer()
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateFlashEraser()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateCRC32Calc()
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Perform_DTMF_Code_Actions()
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_open_call(unsigned)
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoToStation(S_MESSAGE_COMM_INFO*)
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVideoCommMachine()
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVideoRFMahcine()
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacketProcessingStates(unsigned char*)
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_LISTEN_mode()
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_LISTEN_mode()
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LINK_exec(E_TRANSPORTS, bool)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_LINK()
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickRfParamsMachine()
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyAllCUI2UIStates(unsigned short)
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteAllCmd(unsigned char, unsigned char*)
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessModifyEntityCmd(unsigned short, unsigned short*, unsigned char*, unsigned char*)
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteEntityCmd(unsigned short, unsigned char*)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGetEntityCmd(unsigned char*)
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGetAllCmd(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[653]"></a>SendMsg2RfTask(unsigned short, void*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rfdrv_api.o(i._Z14SendMsg2RfTasktPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SendMsg2RfTask(unsigned short, void*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*)
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribProcessingSend(S_Radio_ComFifo*)
</UL>

<P><STRONG><a name="[654]"></a>SendOpddConfig(int)</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, ram_rf_sec_zone.o(i._Z14SendOpddConfigi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendOpddConfig(int) &rArr; C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
</UL>

<P><STRONG><a name="[b9]"></a>SendRfSequence()</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, sendrfsequence.o(i._Z14SendRfSequencev))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = SendRfSequence() &rArr; QueueHandler2(unsigned char, unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler2(unsigned char, unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForRepeaterinDB()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> sendrfsequence.o(i._Z14SendRfSequencev)
</UL>
<P><STRONG><a name="[656]"></a>Set220vRestore()</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, main_power.o(i._Z14Set220vRestorev))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Set220vRestore() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC_Ticker()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomNum(unsigned long, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMainPowerMSGProcess(bool, bool, bool)
</UL>

<P><STRONG><a name="[887]"></a>SetBootResults(bool)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, init.o(i._Z14SetBootResultsb))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[50b]"></a>SetCUIUserType(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, apicmdprocessing.o(i._Z14SetCUIUserTypettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SetCUIUserType(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBody(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[657]"></a>SetSleepStatus(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, incomingbufferparser.o(i._Z14SetSleepStatush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetSleepStatus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSleepStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
</UL>

<P><STRONG><a name="[a04]"></a>SliderTestDone()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i._Z14SliderTestDonev))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[659]"></a>SndBootRequest(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, preparedatafortransmission.o(i._Z14SndBootRequesth))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SndBootRequest(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsuPacketSize32Byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[65a]"></a>SndCalibration(DEVICE_TYPE)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, preparedatafortransmission.o(i._Z14SndCalibration11DEVICE_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SndCalibration(DEVICE_TYPE) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[65b]"></a>SndRsuInitData(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, preparedatafortransmission.o(i._Z14SndRsuInitDatah))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SndRsuInitData(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[65c]"></a>StartRFProcess(VIDEO_RF_TRANSFER_S*)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, filehandler.o(i._Z14StartRFProcessP19VIDEO_RF_TRANSFER_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartRFProcess(VIDEO_RF_TRANSFER_S*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_IsArmed()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[65e]"></a>StartSirenTest(unsigned char, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, siren.o(i._Z14StartSirenTestht))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartSirenTest(unsigned char, unsigned short) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenVersionCheck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ISN(char*, unsigned short, unsigned char)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
</UL>

<P><STRONG><a name="[5ac]"></a>Start_prealarm(unsigned char, unsigned char)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, prealarm_handler.o(i._Z14Start_prealarmhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Entry_Exit_Beeps(unsigned char)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[660]"></a>TAMPER_actions(SECURITY_STATES_E)</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, security.o(i._Z14TAMPER_actions17SECURITY_STATES_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TAMPER_actions(SECURITY_STATES_E) &rArr; send_gsm_coverage_message(unsigned char) &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCode()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmsSendTtrOpenBackTamper()
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGuardCodeCycleFlag()
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[1aa]"></a>Test_AddDevice(char*, unsigned short, unsigned char)</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, test_func.o(i._Z14Test_AddDevicePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Test_AddDevice(char*, unsigned short, unsigned char) &rArr; save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*) &rArr; CreateRFOutputEntry(int, unsigned char*, unsigned char, bool) &rArr; init_ram_db(unsigned char, unsigned char) &rArr; FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceGroupType(unsigned char)
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipCommaAndWhiteSps(char*, char*)
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSubDeviceAndMode(unsigned char, RF_SEC_ZONE_TYPE_E*, RF_INPUT_DEV_TYPE_E*, SIREN_TYPE_E*, unsigned char*)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rkp_data(unsigned char*, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>TimerTick_exec()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i._Z14TimerTick_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = TimerTick_exec() &rArr; TimerOperationChecks() &rArr; StartPowerHandler() &rArr; Set220vRestore() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[41a]"></a>UartDisableInt(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart_func.o(i._Z14UartDisableInth))
<BR><BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortDisableInterrupts(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
</UL>

<P><STRONG><a name="[66d]"></a>UnRegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gsm_api.o(i._Z14UnRegForRxDatahtPjPtPFvhPhtE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = UnRegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short)) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[57c]"></a>UpdateBpskFreq(unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z14UpdateBpskFreqPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateBpskFreq(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
</UL>

<P><STRONG><a name="[66e]"></a>UpdateIdBuffer(unsigned char*)</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, deviceupdatemachine.o(i._Z14UpdateIdBufferPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UpdateIdBuffer(unsigned char*) &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2b6]"></a>VOICE_mute_mic(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, voice_manager.o(i._Z14VOICE_mute_mich))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = VOICE_mute_mic(unsigned char) &rArr; SysSound::setMicVol(int) &rArr; CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteMic()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::setMicVol(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_listen()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_talk()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[c07]"></a>WhileLoopDelay(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash_func.o(i._Z14WhileLoopDelayt))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTaskBusyPollAfterCapture(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[ce]"></a>__keilInitTask()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal_port.o(i._Z14__keilInitTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __keilInitTask() &rArr; OSAL_Init() &rArr; OSAL_TaskCreate(unsigned char) &rArr; OSAL_PortMailBoxCreate(unsigned short, void**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z14OSAL_PortStartv)
</UL>
<P><STRONG><a name="[7cf]"></a>check_for_ivds()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z14check_for_ivdsv))
<BR><BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[4af]"></a>check_for_ovds()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z14check_for_ovdsv))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoPerimeterArmEnabled()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[670]"></a>copy_RAM2Flash(unsigned char*, unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, flash_iap_api.o(i._Z14copy_RAM2FlashPhS_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = copy_RAM2Flash(unsigned char*, unsigned char*, unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_flash_iap_api_c_iap_func___Z28OSAL_PortDisableCpuInterruptv
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_flash_iap_api_c_iap_func___Z27OSAL_PortEnableCpuInterruptv
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*)
</UL>

<P><STRONG><a name="[3da]"></a>getTamperState()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z14getTamperStatev))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcMsgToBeSent()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[671]"></a>getVoiceWindow()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z14getVoiceWindowv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getVoiceWindow() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
</UL>

<P><STRONG><a name="[672]"></a>get_NUMBER_ptr(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ram_number.o(i._Z14get_NUMBER_ptrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_NUMBER_ptr(unsigned short) &rArr; FL_NUMBER_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NUMBER_logical_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_manager_params(unsigned char)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[673]"></a>get_STRING_ptr(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ram_strings.o(i._Z14get_STRING_ptrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_STRING_ptr(unsigned short) &rArr; FL_STRING_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_STRING_logical_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_SIM_CENTER_code()
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_PIN_code()
</UL>

<P><STRONG><a name="[316]"></a>isTamperMasked()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z14isTamperMaskedv))
<BR><BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperState(int, bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[3a8]"></a>perimeter_exit()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z14perimeter_exitv))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_IsArmed()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneralSetLeds(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_perimeter_arm_status(unsigned char)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char)
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRepeatRkpStatus()
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_denied_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_state_LEDS_byte(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[df]"></a>progDelIncNumb(int, int, int*, void*)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kpdprogs.o(i._Z14progDelIncNumbiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = progDelIncNumb(int, int, int*, void*) &rArr; FL_INCOMING_PHONE_erase(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_erase(unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[eb]"></a>progSwitchMode(int, int, int*, void*)</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, kpdprogs.o(i._Z14progSwitchModeiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = progSwitchMode(int, int, int*, void*) &rArr; StartChangePanelState(PANEL_COMM_STATE_E) &rArr; VOICE_verification_window_on(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[ef]"></a>progTamperMask(int, int, int*, void*)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, kpdprogs.o(i._Z14progTamperMaskiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = progTamperMask(int, int, int*, void*) &rArr; setTamperMask(int, int) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperMask(int, int)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[431]"></a>ram_siren_init(unsigned char, unsigned char)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ram_siren.o(i._Z14ram_siren_inithh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ram_siren_init(unsigned char, unsigned char) &rArr; FL_SIREN_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[415]"></a>setTamperState(int, bool)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kpdoutstub.o(i._Z14setTamperStateib))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setTamperState(int, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTamperMasked()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Tamper(char*, unsigned short, unsigned char)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[2ba]"></a>wait_video_ack()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, videohandler.o(i._Z14wait_video_ackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wait_video_ack() &rArr; calc_next_ack_state() &rArr; GetGSMModuleType() &rArr; CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_next_ack_state()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[182]"></a>AccessOffAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z15AccessOffActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AccessOffAction(S_CPUI_ButtonInfo*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>AnnexAlarm_exec()</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, annex.o(i._Z15AnnexAlarm_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = AnnexAlarm_exec() &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityISNSirenAfterSafety(unsigned char)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGuardCodeFlag()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCode()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexSendEntryMessages()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> annex.o(i._Z11AnnexDisarmv)
<LI> annex.o(i._Z15AnnexAlarm_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[5d4]"></a>AnnexStartAlarm()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, annex.o(i._Z15AnnexStartAlarmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AnnexStartAlarm() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexInstantAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
</UL>

<P><STRONG><a name="[681]"></a>BackupRamMemMap()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rammemorymap.o(i._Z15BackupRamMemMapv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BackupRamMemMap() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SaveFactorySettings(char*, unsigned short, unsigned char)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
</UL>

<P><STRONG><a name="[682]"></a>BypassToChannel(COMMUNICATION_CHANNEL_E)</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gsm_comm.o(i._Z15BypassToChannel23COMMUNICATION_CHANNEL_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BypassToChannel(COMMUNICATION_CHANNEL_E) &rArr; get_CONTROL_PANEL_comm_status() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_comm_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[6ff]"></a>CLOCK_get_count()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._Z15CLOCK_get_countv))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
</UL>

<P><STRONG><a name="[684]"></a>CODEC_SetSpkVol(signed char, unsigned char, unsigned*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, codec_api.o(i._Z15CODEC_SetSpkVolahPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CODEC_SetSpkVol(signed char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int, unsigned*)
</UL>

<P><STRONG><a name="[685]"></a>CPUI_Init_Param()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cpui_api.o(i._Z15CPUI_Init_Paramv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_Init_Param() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init_Led()
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init()
</UL>

<P><STRONG><a name="[382]"></a>CPUI_ResumeBeep()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cpui_func.o(i._Z15CPUI_ResumeBeepv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CPUI_ResumeBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsThereBeep(unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[59c]"></a>C_PROC_send_ack(C_PROC_ACK_E)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, c_proc.o(i._Z15C_PROC_send_ack12C_PROC_ACK_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C_PROC_send_ack(C_PROC_ACK_E) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[482]"></a>C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, c_proc.o(i._Z15C_PROC_send_msg18A2C_PROC_MESSAGE_EPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_close_session(RPC_RESULT_E)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSync()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_send_packet_exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_done(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[962]"></a>CheckDeviceType()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z15CheckDeviceTypev))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[407]"></a>CheckForUpdates()</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, deviceupdatemachine.o(i._Z15CheckForUpdatesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CheckForUpdates() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskIsActiveFlag(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
</UL>

<P><STRONG><a name="[689]"></a>CheckSameSerial(unsigned char*, unsigned short)</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, apipckprocessing.o(i._Z15CheckSameSerialPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CheckSameSerial(unsigned char*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[68a]"></a>CleanMsgBuffers(unsigned, unsigned, S_RF_ReqInfo*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rfdrv_func.o(i._Z15CleanMsgBuffersjjP12S_RF_ReqInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CleanMsgBuffers(unsigned, unsigned, S_RF_ReqInfo*) &rArr; RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*) &rArr; SendMsg2RfTask(unsigned short, void*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[68c]"></a>ClearAllUpdates(bool)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, deviceupdatemachine.o(i._Z15ClearAllUpdatesb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ClearAllUpdates(bool) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[68d]"></a>ClearArgsStruct()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, process_income_message.o(i._Z15ClearArgsStructv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ClearArgsStruct() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[c77]"></a>ClearIsInitDone()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init.o(i._Z15ClearIsInitDonev))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b2]"></a>ClrPreLogOffset()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, log.o(i._Z15ClrPreLogOffsetv))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
</UL>

<P><STRONG><a name="[129]"></a>Comm_Rx_Manager(void*)</STRONG> (Thumb, 3800 bytes, Stack size 64 bytes, comm_stm_rx_manager.o(i._Z15Comm_Rx_ManagerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Comm_Rx_Manager(void*) &rArr; GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_GetModemGsmStatus()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_API_SendInitPstn(unsigned char, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuxChannel(unsigned char)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxParser(unsigned char*, unsigned short, unsigned short*, unsigned char*)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlClearResetCounter()
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicitedPstn(char*, unsigned short)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDelete(OSAL_PriorityQueue*)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_ClearResetCounter()
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxAllocateBuffer(unsigned char, unsigned short)
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngSwitchTransparenceMode(unsigned char, unsigned)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseNumOfIndications(char*, char*, unsigned, unsigned char, unsigned char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmRxManagerErrorHandler(unsigned)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicited(char*, unsigned short)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRegTaskIndications(S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegTaskByTaskId(unsigned char)
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQMemCopy(OSAL_PriorityQueue*, unsigned char*, unsigned, S_COMM_STM_RX_MNG_BUFFER_WITH_LEN**)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDataRegConfig(S_COMM_STM_RX_MNG_DATA_REG_CONFIG_INFO***)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMsgFromMuxQ(OSAL_PriorityQueue*)
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCommTaskReg(S_COMM_STM_RX_MNG_COMM_TASK_REG***)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegStart(unsigned char*, unsigned)
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mux_Buff_Size(unsigned char*, unsigned short)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMsgFromQ(OSAL_PriorityQueue*)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQ(OSAL_PriorityQueue*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDataReg(S_COMM_STM_RX_MNG_DATA_REG_INFO***)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferInQ(OSAL_PriorityQueue*, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[890]"></a>Correct_rpc_ack(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rpc.o(i._Z15Correct_rpc_ackt))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2e7]"></a>CreateTimeStamp(unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cybermachine.o(i._Z15CreateTimeStampPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CreateTimeStamp(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusPayload(unsigned char*)
</UL>

<P><STRONG><a name="[5c]"></a>DIAL_RETRY_exec()</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, dial_retry.o(i._Z15DIAL_RETRY_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = DIAL_RETRY_exec() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_send_msg(S_MESSAGE_COMM_INFO*, DRIVER_STATE_E, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> dial_retry.o(i._Z15DIAL_RETRY_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[af5]"></a>DIAL_RETRY_init()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dial_retry.o(i._Z15DIAL_RETRY_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6a7]"></a>DMA_Device_Init()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma_api.o(i._Z15DMA_Device_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Device_Init() &rArr; HAL_EnablePeripheralPower(unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortEnableInterrupts(unsigned, unsigned)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnablePeripheralPower(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init()
</UL>

<P><STRONG><a name="[6a8]"></a>EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)</STRONG> (Thumb, 634 bytes, Stack size 112 bytes, maintenance.o(i._Z15EL_AP_handler_FPhS_P16EL_DRIVER_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_clear_packet_pending()
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_packet_pending()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketTimeout(TimerStruct_S*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_get_serial_number()
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRollKey(unsigned char)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_PROTOCL_MACHINE_exec()
</UL>

<P><STRONG><a name="[6b0]"></a>EL_CP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, maintenance.o(i._Z15EL_CP_handler_FPhS_P16EL_DRIVER_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = EL_CP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_PROTOCL_MACHINE_exec()
</UL>

<P><STRONG><a name="[6b1]"></a>EL_L2_handler_F(unsigned char*, unsigned char*)</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, el_v2_driver.o(i._Z15EL_L2_handler_FPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = EL_L2_handler_F(unsigned char*, unsigned char*) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_free_buffer(unsigned char*)
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_flag_parser_F(unsigned char*)
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncryptBIT()
</UL>
<BR>[Called By]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_frame()
</UL>

<P><STRONG><a name="[6b5]"></a>EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)</STRONG> (Thumb, 926 bytes, Stack size 128 bytes, maintenance.o(i._Z15EL_MP_handler_FPhS_P16EL_DRIVER_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*) &rArr; MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPermanentStatistics()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPeriodicStatistics()
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_BuildInfoBufferToSend(unsigned char*, unsigned short, unsigned char*, unsigned char, unsigned short*)
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawData_IsTimeOutFromEEPROM()
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutOfHome_IsInOOHState()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_gsm_level()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_get_sofware_version()
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_BIT_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, unsigned char*)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_EX_EEPROM_write(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_EX_EEPROM_read(unsigned char*, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_clear()
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_get_log_ptr()
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_get_flags()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICCcode()
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_rf_subsystem_updated()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_PROTOCL_MACHINE_exec()
</UL>

<P><STRONG><a name="[524]"></a>EL_verify_crc_F(unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, el_v2_driver.o(i._Z15EL_verify_crc_FPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EL_verify_crc_F(unsigned char*) &rArr; calc_chksum16(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_fake_scptr(unsigned char*)
</UL>

<P><STRONG><a name="[ba0]"></a>ENTRY_data_size(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fl_entry.o(i._Z15ENTRY_data_sizeh))
<BR><BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_save_params()
</UL>

<P><STRONG><a name="[188]"></a>EmergencyAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z15EmergencyActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = EmergencyAction(S_CPUI_ButtonInfo*) &rArr; OutCallAction(S_CPUI_ButtonInfo*) &rArr; CloseVoiceCall(S_CPUI_ButtonInfo*) &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoiceWindowStatus()
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceOn()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanicAction(S_CPUI_ButtonInfo*)
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get220Status()
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeakerPhone()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>FL_KEY_FOB_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z15FL_KEY_FOB_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_KEY_FOB_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_KEY_FOB_ptr(unsigned char)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_device_ptr(unsigned char, unsigned short, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
</UL>
<P><STRONG><a name="[303]"></a>FL_PINCODE_read(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fl_types.o(i._Z15FL_PINCODE_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_PINCODE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare_duress(unsigned char*)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare(unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[3cc]"></a>GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, videohandler.o(i._Z15GPRS_APN_config20DIAL_SEQUENCE_TYPE_EPcPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*) &rArr; GetApnPtr(unsigned char) &rArr; FL_APN_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetApnPtr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_Open_data_connection(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
</UL>

<P><STRONG><a name="[5fa]"></a>GSM_DRIVER_open()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gsm_comm.o(i._Z15GSM_DRIVER_openv))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_exec()
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_close_call(E_VOICE_DEVICE)
</UL>

<P><STRONG><a name="[310]"></a>GetAllianceBits()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rkp.o(i._Z15GetAllianceBitsv))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[6c8]"></a>GetCurrentEvent(sEventDrivenQ*)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, eventdrivenq.o(i._Z15GetCurrentEventP13sEventDrivenQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetCurrentEvent(sEventDrivenQ*)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsmeGetCurrentEvent()
</UL>

<P><STRONG><a name="[1b8]"></a>GetDevicesSwVer(char*, unsigned short, unsigned char)</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, test_func.o(i._Z15GetDevicesSwVerPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GetDevicesSwVer(char*, unsigned short, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDecStingLen(unsigned)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2decstr(unsigned, unsigned char*, unsigned)
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[312]"></a>GetFieldAddress(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, apicmdutilfunc.o(i._Z15GetFieldAddressttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetFieldAddress(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDuplicateCUI(unsigned char*, int, int)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDuplicateSN(unsigned char*, int, int)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[46b]"></a>GetGPRSDyamicIP()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z15GetGPRSDyamicIPv))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentIP(unsigned char*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[982]"></a>GetGSMProcFlags()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_comm.o(i._Z15GetGSMProcFlagsv))
<BR><BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[7e1]"></a>GetIsRkpInstall()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_rkp.o(i._Z15GetIsRkpInstallv))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
</UL>

<P><STRONG><a name="[58d]"></a>GetLastPicIndex()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z15GetLastPicIndexv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[99f]"></a>GetManufacturer()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, maintenance.o(i._Z15GetManufacturerv))
<BR><BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIridiumVersion(unsigned char*)
</UL>

<P><STRONG><a name="[2f1]"></a>GetOPERATORcode()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_a2g.o(i._Z15GetOPERATORcodev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetOPERATORcode()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[7e]"></a>GetPicture_exec()</STRONG> (Thumb, 566 bytes, Stack size 40 bytes, filesystemmanagment.o(i._Z15GetPicture_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GetPicture_exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileNameQueryCompliance(unsigned char*, unsigned char*)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScenarioType(SEQUENCER_LABEL_E)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> filesystemmanagment.o(i._Z15GetPicture_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[bb4]"></a>GetRamMemMapPtr()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rammemorymap.o(i._Z15GetRamMemMapPtrv))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read_device_version(unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTPUT_read_device_version(unsigned char, unsigned char)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INPUT_read_device_version(unsigned char, unsigned char)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read_device_version(unsigned char, unsigned char)
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read_device_version(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[59a]"></a>GetScenarioType(SEQUENCER_LABEL_E)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, videohandler.o(i._Z15GetScenarioType17SEQUENCER_LABEL_E))
<BR><BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
</UL>

<P><STRONG><a name="[6ca]"></a>GetTaskPriority(sSmartSchedulerQ*, void(*)())</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, smartscheduler.o(i._Z15GetTaskPriorityP16sSmartSchedulerQPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetTaskPriority(sSmartSchedulerQ*, void(*)()) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPriority(sPriorityQ*, unsigned char)
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHighPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowPrioTasksScenario(tSCENARIO_ID)
</UL>

<P><STRONG><a name="[12b]"></a>Gsm_STM_Control(void*)</STRONG> (Thumb, 4714 bytes, Stack size 48 bytes, gsm_stm_control.o(i._Z15Gsm_STM_ControlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Gsm_STM_Control(void*) &rArr; GSM_Power_Off(unsigned char) &rArr; GSM_Control_API_SaveCurrentStatistics() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetNumOfPendingRequests(unsigned char)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SaveCurrentStatistics()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortForceMutexRelease(unsigned*)
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnTransparency(unsigned)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleFunctionRow(unsigned char)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTableHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned short, unsigned short)
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Power_Off(unsigned char)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCapture(unsigned*)
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCreate(unsigned**)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_End_CSD_Full_Msg_Cycle()
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetFwUpInProgress(unsigned)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageFullCycle()
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks1(unsigned char)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngRegForCommTask(unsigned char, unsigned short)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnFullTransparency(unsigned)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnMuxParser(unsigned)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TimerChangePause(unsigned short, unsigned char)
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_GetPowerOffTime(unsigned char)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Control_Write_Status(unsigned char)
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmCtrlInfo(S_GSM_STM_CTRL_INFO*, unsigned)
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_Init_flags()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>Gsm_STM_Message(void*)</STRONG> (Thumb, 2760 bytes, Stack size 56 bytes, gsm_stm_message.o(i._Z15Gsm_STM_MessagePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Gsm_STM_Message(void*) &rArr; AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short) &rArr; GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; GSM_StrmResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_End_TCP_Full_Msg_Cycle()
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortForceMutexRelease(unsigned*)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTableHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned short, unsigned short)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCapture(unsigned*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks1(unsigned char)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngRegForCommTask(unsigned char, unsigned short)
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartProtectedFullCycle(unsigned)
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmMsgInfo(S_GSM_STM_MSG_INFO*)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Control_Write_Status(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[617]"></a>HE910SetDTRLine(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, comm_common_funcs.o(i._Z15HE910SetDTRLineh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HE910SetDTRLine(unsigned char) &rArr; OSAL_PortSuspendTask(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTR_OnOff(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[6e2]"></a>HE910SetRTSLine(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, comm_common_funcs.o(i._Z15HE910SetRTSLineh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HE910SetRTSLine(unsigned char) &rArr; OSAL_PortSuspendTask(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTS_OnOff(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_HwPowerSaveControl(unsigned char)
</UL>

<P><STRONG><a name="[6e4]"></a>HW_COUNTER_Init(unsigned char, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, hw_timer_api.o(i._Z15HW_COUNTER_Iniththh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HW_COUNTER_Init(unsigned char, unsigned short, unsigned char, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnablePeripheralPower(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PatformSpecificInit()
</UL>

<P><STRONG><a name="[6e5]"></a>I2CWriteBuffer1()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cwritebuffer.o(i._Z15I2CWriteBuffer1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2CWriteBuffer1() &rArr; I2CWriteBuffer(I2C_COMMAND_WRITE) &rArr; IsNeedCyberProcess(unsigned char*) &rArr; CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD) &rArr; SaveI2CBuffCopy(S_CyberInfo*, unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[283]"></a>I2C_SendRequest(unsigned char, unsigned char, unsigned, unsigned, unsigned short, unsigned char, unsigned, unsigned char*)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, i2c_func.o(i._Z15I2C_SendRequesthhjjthjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SendRequest(unsigned char, unsigned char, unsigned, unsigned, unsigned short, unsigned char, unsigned, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBaudRate(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
</UL>

<P><STRONG><a name="[6e6]"></a>I2C_SetBaudRate(unsigned char, unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, i2c_func.o(i._Z15I2C_SetBaudRateht))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init(unsigned char)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendRequest(unsigned char, unsigned char, unsigned, unsigned, unsigned short, unsigned char, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[be]"></a>INACTIVITY_exec()</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, inactivity.o(i._Z15INACTIVITY_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = INACTIVITY_exec() &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVS_loss_and_inactivity_check()
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_inactivity()
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChimeOrInactivityCntBit()
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInactivityButtonStatus()
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_InActivity_Counters()
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralInactivity()
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetlInactivityWin()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> inactivity.o(i._Z15INACTIVITY_execv)
<LI> inactivity.o(i._Z25GetInactivityButtonStatusv)
<LI> process_income_message.o(i._Z16OperatePosesoCmdh17POSESO_CMD_TYPE_EPhP14S_POSESO_Reply)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[6ee]"></a>IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, ip_app.o(i._Z15IP_FLASH_update10U_DEV_TYPEhPhhS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char) &rArr; FL_RF_OUTPUT_DEV_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_build(unsigned char*, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
</UL>

<P><STRONG><a name="[603]"></a>InitTableHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, comm_common_funcs.o(i._Z15InitTableHandleP23S_GSM_FUNC_TABLE_HANDLEtt))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[4da]"></a>InsetRfEventToQ(unsigned char*, bool)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, rfq.o(i._Z15InsetRfEventToQPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfQEmpty()
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRfprocLocationInPool()
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfPriority_(I2C_COMMAND_WRITE)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
</UL>

<P><STRONG><a name="[6f4]"></a>IsBootCondition()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rb_app.o(i._Z15IsBootConditionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsBootCondition()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[48c]"></a>IsCommStateIdle()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, communicationstate.o(i._Z15IsCommStateIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[aa9]"></a>IsCommandDisarm(unsigned char*)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cybermachine.o(i._Z15IsCommandDisarmPh))
<BR><BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCyberDetectedCmd(unsigned char*)
</UL>

<P><STRONG><a name="[6a1]"></a>IsFoundRegStart(unsigned char*, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, comm_stm_rx_manager.o(i._Z15IsFoundRegStartPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IsFoundRegStart(unsigned char*, unsigned) &rArr; RxMngHexSearch(unsigned char*, unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngHexSearch(unsigned char*, unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[6f5]"></a>IsMagMsgEnabled()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z15IsMagMsgEnabledv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsMagMsgEnabled() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3fd]"></a>IsOutgoingVoice()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, control_panel.o(i._Z15IsOutgoingVoicev))
<BR><BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceOn()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[746]"></a>IsPowerSaveMode()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z15IsPowerSaveModev))
<BR><BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSafetySnooze(unsigned char, unsigned char)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
</UL>

<P><STRONG><a name="[5aa]"></a>IsPreAlarmEntry()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z15IsPreAlarmEntryv))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[9e9]"></a>IsPriorityQFull(sPriorityQ*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, priorityq.o(i._Z15IsPriorityQFullP10sPriorityQ))
<BR><BR>[Called By]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6f6]"></a>IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, timer.o(i._Z15IsSendConfigDevP21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PollIPDEWindowStates(unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_send_open_rx(unsigned char*, unsigned char*)
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SendOpenRx()
</UL>

<P><STRONG><a name="[a07]"></a>IsSessionFailed()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, videohandler.o(i._Z15IsSessionFailedv))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[c7]"></a>JD_MESSAGE_exec()</STRONG> (Thumb, 312 bytes, Stack size 208 bytes, c_proc.o(i._Z15JD_MESSAGE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = JD_MESSAGE_exec() &rArr; MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool) &rArr; Message_BuildSimNumberHex(unsigned char*, unsigned char*) &rArr; decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_clear_nack_received()
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_clear_ack_received()
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_nack_received()
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_ack_received()
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z15JD_MESSAGE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[6fc]"></a>JD_MESSAGE_send(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, c_proc.o(i._Z15JD_MESSAGE_sendP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JD_MESSAGE_send(S_MESSAGE_COMM_INFO*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_driver_mux(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[388]"></a>KF3_config_init()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, deviceconfigmachine.o(i._Z15KF3_config_initv))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_init()
</UL>

<P><STRONG><a name="[a0d]"></a>KPDFuncRegister(int(*)(int, int, int*, void*), const char*, void*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kpdoutstub.o(i._Z15KPDFuncRegisterPFiiiPiPvEPKcS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KPDFuncRegister(int(*)(int, int, int*, void*), const char*, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIntefaceMachine()
</UL>

<P><STRONG><a name="[361]"></a>LED_GetLedState(unsigned char*, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, led_api.o(i._Z15LED_GetLedStatePhh))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBlinkAction(unsigned, unsigned char*, unsigned char)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformLoopAction(unsigned*, unsigned char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[366]"></a>LED_SetLedState(unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, led_api.o(i._Z15LED_SetLedStatePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitTxFIFOIsEmpty(unsigned char)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitIsNotBusy(unsigned char)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData(unsigned char, unsigned char*, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AcquireRlease_SSPMutex(unsigned char, unsigned char)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OperateLedLatch()
</UL>
<BR>[Called By]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateBlinkLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init_Led()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[6c1]"></a>LOG_get_log_ptr()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log.o(i._Z15LOG_get_log_ptrv))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[6b8]"></a>MSME_gen_status(unsigned char*)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, msme.o(i._Z15MSME_gen_statusPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSME_gen_status(unsigned char*) &rArr; num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_partition_to_num(SECURITY_PARTITION_TYPE_E)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_count()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr3(unsigned long, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[701]"></a>MSME_state_done()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, msme.o(i._Z15MSME_state_donev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = MSME_state_done() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQEmptyOrDeleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_exec()
</UL>

<P><STRONG><a name="[702]"></a>MSME_state_fail()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, msme.o(i._Z15MSME_state_failv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MSME_state_fail() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsmeGetCurrentEvent()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_exec()
</UL>

<P><STRONG><a name="[63e]"></a>MatchValue2List(const LIST_S*, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, process_income_message.o(i._Z15MatchValue2ListPK6LIST_Sh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MatchValue2List(const LIST_S*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramUserInterface(unsigned char*, S_POSESO_Reply*)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)
</UL>

<P><STRONG><a name="[704]"></a>ModifyGuardUser()</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ram_user.o(i._Z15ModifyGuardUserv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = ModifyGuardUser() &rArr; AddEntityHead(unsigned short, unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUserGuard_exec()
</UL>

<P><STRONG><a name="[705]"></a>Msg_build_frame(unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, c_proc.o(i._Z15Msg_build_framePhS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Msg_build_frame(unsigned char*, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Checksum(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[11d]"></a>NightModeAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z15NightModeActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = NightModeAction(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[707]"></a>OSAL_ListCreate(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osal_list.o(i._Z15OSAL_ListCreateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSAL_ListCreate(unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[708]"></a>OSAL_ListDelete(OSAL_List*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, osal_list.o(i._Z15OSAL_ListDeleteP9OSAL_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSAL_ListDelete(OSAL_List*) &rArr; OSAL_ListDeleteHead(OSAL_List*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDeleteHead(OSAL_List*)
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
</UL>

<P><STRONG><a name="[281]"></a>OSAL_StartTimer(unsigned short, unsigned, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, osal_time_mng.o(i._Z15OSAL_StartTimertjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EndButtonPressProcess(unsigned*, unsigned*, unsigned char*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
<LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_StartStopJamDetectTimer(unsigned)
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetFwUpInProgress(unsigned)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartProtectedFullCycle(unsigned)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_NextCarrierDuty()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PressButton(char*, unsigned short, unsigned char)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StartOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StartGoodPinCodeFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_SetResetProg(S_CPUI_ButtonInfo*)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDigitButtonsDisabled(bool)
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForceArmWindowAction(S_CPUI_ButtonInfo*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTestAllLeds(int, int, int*, void*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelAllPerif(int, int, int*, void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progSwitchMode(int, int, int*, void*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progHardReset(int, int, int*, void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnPerif(int, int, int*, void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnInput(int, int, int*, void*)
</UL>

<P><STRONG><a name="[70a]"></a>OSAL_TaskCreate(unsigned char)</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, osal_task_util.o(i._Z15OSAL_TaskCreateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSAL_TaskCreate(unsigned char) &rArr; OSAL_PortMailBoxCreate(unsigned short, void**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskStackSize(unsigned char)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMailBoxCreate(unsigned short, void**)
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskCreate(void(*)(void*), const signed char*, unsigned short, void*, unsigned short, unsigned*, unsigned*)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SetTaskHandle
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskActiveOnInitFlag(unsigned char)
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskHeapSize(unsigned char)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Init()
</UL>

<P><STRONG><a name="[40b]"></a>OSAL_TaskDelete(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, osal_task_util.o(i._Z15OSAL_TaskDeleteh))
<BR><BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskDelete()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
</UL>

<P><STRONG><a name="[31b]"></a>OSAL_num2decstr(unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, osal_services.o(i._Z15OSAL_num2decstrjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_num2decstr(unsigned, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicesSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReadRTC(char*, unsigned short, unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[31a]"></a>OSAL_num2hexstr(unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, osal_services.o(i._Z15OSAL_num2hexstrjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSAL_num2hexstr(unsigned, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_PrintMessage(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[a3a]"></a>Old_RfApi_CRC16(void*, int)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, incomingbufferparser.o(i._Z15Old_RfApi_CRC16Pvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Old_RfApi_CRC16(void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_NewProtocolCalcCrc(unsigned char*, bool, bool, bool)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[712]"></a>OpddAckReceived(unsigned char, unsigned char, bool)</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, prealarm_handler.o(i._Z15OpddAckReceivedhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = OpddAckReceived(unsigned char, unsigned char, bool) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[715]"></a>OperateFunction(void(*)())</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, smartscheduler.o(i._Z15OperateFunctionPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OperateFunction(void(*)()) &rArr; OperateTimeBasedEvants(tFUNCTIONS_ID) &rArr; LoadNewScenarios(tQ_TYPE) &rArr; LoadHighPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionId(void(*)())
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateTimeBasedEvants(tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateScheduler_exec()
</UL>

<P><STRONG><a name="[572]"></a>OutputVoiceCall()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z15OutputVoiceCallv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OutputVoiceCall() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_read(unsigned char)
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_open_call(unsigned char*)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fast_dial()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[4ac]"></a>PerimeterDisarm(bool)</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, prealarm_handler.o(i._Z15PerimeterDisarmb))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = PerimeterDisarm(bool) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_last_arm_dev_id()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_is_new_rf_api()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_clear_t_bypass(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pre_alarm_video()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrGuardCodeCycleFlag()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoFaultCode(VIDEO_FAULT_CODE_E)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumOpdds()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDQAcks()
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_perimeter_arm_status(unsigned char)
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Last_perimeter_Detection()
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[263]"></a>PreparateFooter(S_RfApi_Footer*, unsigned char*, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, preparedatafortransmission.o(i._Z15PreparateFooterP14S_RfApi_FooterPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PreparateFooter(S_RfApi_Footer*, unsigned char*, unsigned char) &rArr; RfApi_CRC16(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioAPI_GetLastPacketMsgLQI()
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApi_CRC16(void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[71d]"></a>RAM_DB_open_pir()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ram_db.o(i._Z15RAM_DB_open_pirv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RAM_DB_open_pir() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[71e]"></a>RB_program_done(unsigned char*)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rb_app.o(i._Z15RB_program_donePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RB_program_done(unsigned char*) &rArr; C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_sofware_update(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_COMMAND_wait_for_comm(unsigned char*)
</UL>

<P><STRONG><a name="[720]"></a>RF_OUTPUT_valid(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ram_rf_output_dev.o(i._Z15RF_OUTPUT_validh))
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
</UL>

<P><STRONG><a name="[b2b]"></a>RKP_open_tamper()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_rkp.o(i._Z15RKP_open_tamperv))
<BR><BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_tamper()
</UL>

<P><STRONG><a name="[d2]"></a>RSUTaskCallBack(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rsu_task.o(i._Z15RSUTaskCallBackhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RSUTaskCallBack(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsu_task.o(i._Z15RSU_ManagerTaskPv)
</UL>
<P><STRONG><a name="[72d]"></a>RSU_GetZoneType(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rsu_task.o(i._Z15RSU_GetZoneTypeh))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[13b]"></a>RSU_ManagerTask(void*)</STRONG> (Thumb, 1876 bytes, Stack size 144 bytes, rsu_task.o(i._Z15RSU_ManagerTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = RSU_ManagerTask(void*) &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MultipleSectorErase(unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferDelete(OSAL_CyclicBuffer*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferCreate(unsigned char, unsigned short)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskDelete(unsigned char)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBootHandler(bool)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSwBootSrc(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCStatus()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRC32(unsigned long, unsigned long)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetRemoteBootFlashAdrres(unsigned char, unsigned char)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDeviceTableOffset(unsigned char, unsigned)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_IsMultiDeviceType(unsigned char)
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_CalcCRCFromFlash()
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_FreeInfoBuffers(S_RSU_MANAGER_INFO*)
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPoseseICI()
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDeviceType(unsigned char)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetZoneType(unsigned char)
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_CloseFTP()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[298]"></a>Radio_PowerDown()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc11xxdrvfncvfii.o(i._Z15Radio_PowerDownv))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init()
</UL>

<P><STRONG><a name="[a68]"></a>Radio_RSSITodBm(signed char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z15Radio_RSSITodBma))
<BR><BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
</UL>

<P><STRONG><a name="[580]"></a>Radio_SetTxGain(unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z15Radio_SetTxGainh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Radio_SetTxGain(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
</UL>

<P><STRONG><a name="[730]"></a>ResetDelHandler()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, apipckprocessing.o(i._Z15ResetDelHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ResetDelHandler() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetApi()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelEntHandler_exec()
</UL>

<P><STRONG><a name="[731]"></a>ResetGetHandler()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, apipckprocessing.o(i._Z15ResetGetHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ResetGetHandler() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetApi()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
</UL>

<P><STRONG><a name="[68b]"></a>RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rfdrv_func.o(i._Z15RfAttribHandlerjjP12S_RF_ReqInfoPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*) &rArr; SendMsg2RfTask(unsigned short, void*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg2RfTask(unsigned short, void*)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvUpdateStatus(unsigned, S_RF_ReqInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMsgBuffers(unsigned, unsigned, S_RF_ReqInfo*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[51b]"></a>RingTonePlaying()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, control_panel.o(i._Z15RingTonePlayingv))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::stop()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_CallGuardBlink(unsigned*)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
</UL>

<P><STRONG><a name="[732]"></a>SERIAL_PDA_open(unsigned char*, unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, el_v2_driver.o(i._Z15SERIAL_PDA_openPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SERIAL_PDA_open(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_reset_F()
</UL>
<BR>[Called By]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
</UL>

<P><STRONG><a name="[526]"></a>SERIAL_PDA_send(unsigned char*, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_pdaprocess.o(i._Z15SERIAL_PDA_sendPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SERIAL_PDA_send(unsigned char*, unsigned char) &rArr; UART_PutBufferByInterrupt(int, char*, int) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutBufferByInterrupt(int, char*, int)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_Write(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLabRFLine(int, bool, int, bool)
</UL>

<P><STRONG><a name="[735]"></a>SFD_SendCRCData(unsigned char*, unsigned long, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sfd_func.o(i._Z15SFD_SendCRCDataPhmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SFD_SendCRCData(unsigned char*, unsigned long, unsigned char) &rArr; rc_crypt(rc_state*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_crypt(rc_state*, unsigned char*, unsigned)
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32(const unsigned char*, unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
</UL>

<P><STRONG><a name="[809]"></a>SK2_config_init()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, deviceconfigmachine.o(i._Z15SK2_config_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SK2_config_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[83b]"></a>SMS_DRIVER_open()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gsm_comm.o(i._Z15SMS_DRIVER_openv))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_exec()
</UL>

<P><STRONG><a name="[401]"></a>SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, smt_api.o(i._Z15SMT_EnDisSigFoxPtjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigFoxEnDis(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13d]"></a>SMT_ManagerTask(void*)</STRONG> (Thumb, 930 bytes, Stack size 128 bytes, smt_task.o(i._Z15SMT_ManagerTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = SMT_ManagerTask(void*) &rArr; SfxSendFrame &rArr; MakeFrame &rArr; ComputeAES &rArr; sfx_AES_128_cbc_encrypt &rArr; PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned) &rArr; aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDelete(OSAL_PriorityQueue*)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_initDataBase
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskDelete(unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_AdvanceSigFoxCounter()
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_getSigFoxCounter()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrCreateEntry(unsigned short, unsigned char, unsigned*)
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfTxRevive()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendFrame
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxClose
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIDValid()
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_PrintMessage(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSFXLibrary()
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ClearActiveFlag()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[73e]"></a>SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, smt_api.o(i._Z15SMT_SendMessagePhjhPtjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxDailySigFoxMessages()
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IsMailBoxFull(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_set_DailyMsgCounter(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[740]"></a>SSP_ReceiveData(unsigned char, unsigned char*, unsigned)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ssp_spi_api.o(i._Z15SSP_ReceiveDatahPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearReceiveSSPFIFO(unsigned char)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitRxFIFOIsNotEmpty(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[25b]"></a>SSP_SPI_SetPins(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ssp_spi_api.o(i._Z15SSP_SPI_SetPinsh))
<BR><BR>[Called By]<UL><LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PatformSpecificInit()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init(unsigned char, unsigned char, unsigned, unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[744]"></a>SendVideoPacket()</STRONG> (Thumb, 100 bytes, Stack size 280 bytes, videocommandsparser.o(i._Z15SendVideoPacketv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SendVideoPacket() &rArr; StartSendCmd(unsigned char*, bool) &rArr; InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommandsParser()
</UL>

<P><STRONG><a name="[5b6]"></a>SetCallHandling(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, voice_manager.o(i._Z15SetCallHandlingh))
<BR><BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAnswerAfterRingsOption(unsigned char)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceVerificationOption(unsigned char)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoFullDuplexOption(unsigned char)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularCallOption(unsigned char)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpyModeOption(unsigned char)
</UL>

<P><STRONG><a name="[257]"></a>SetExtInt2Polar(bool)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rf_isr.o(i._Z15SetExtInt2Polarb))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_2_ISR()
</UL>

<P><STRONG><a name="[a50]"></a>SetLastPicIndex(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z15SetLastPicIndexh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[b03]"></a>SetPowerMsgFlag(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_power.o(i._Z15SetPowerMsgFlagb))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[745]"></a>SetSafetySnooze(unsigned char, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, process_c_proc_messages.o(i._Z15SetSafetySnoozehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetSafetySnooze(unsigned char, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPowerSaveMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
</UL>

<P><STRONG><a name="[747]"></a>SndCopyFromStrg(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, preparedatafortransmission.o(i._Z15SndCopyFromStrgh))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SndCopyFromStrg(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18a]"></a>SoftResetAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z15SoftResetActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SoftResetAction(S_CPUI_ButtonInfo*) &rArr; reset_inactivity_timer() &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateResetMachine(unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>SoundOrVAT_exec()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, control_panel.o(i._Z15SoundOrVAT_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SoundOrVAT_exec() &rArr; VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_IsBeepInProcess()
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_IsBusy()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Address Reference Count : 3]<UL><LI> control_panel.o(i._Z15SoundOrVAT_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[3ed]"></a>StartRtcMachine(unsigned char*, unsigned char, unsigned)</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, deviceupdatemachine.o(i._Z15StartRtcMachinePhhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = StartRtcMachine(unsigned char*, unsigned char, unsigned) &rArr; CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool) &rArr; LockCfgChanged(unsigned char) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskIsActiveFlag(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForJDRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHandshakeDecision(RX_COMMAND, PRIVATE_ID)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDecision(RX_COMMAND, ID_BUFFER, PRIVATE_ID*)
</UL>

<P><STRONG><a name="[4d8]"></a>SystemTaskReady(SYS_TASK*, unsigned)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, processsystemtask.o(i._Z15SystemTaskReadyP8SYS_TASKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemTaskReady(SYS_TASK*, unsigned) &rArr; SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDelayTask(unsigned)
</UL>

<P><STRONG><a name="[74c]"></a>System_UartInit()</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, uart_legacy.o(i._Z15System_UartInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = System_UartInit() &rArr; UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[40f]"></a>TEST_ExecuteCmd(unsigned short, char*, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, test_func.o(i._Z15TEST_ExecuteCmdtPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_ExecuteCmd(unsigned short, char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
</UL>

<P><STRONG><a name="[96d]"></a>TerminateUpdate(RPC_RESULT_E)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, deviceupdatemachine.o(i._Z15TerminateUpdate12RPC_RESULT_E))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[d3]"></a>Uart0RxCallBack(OSAL_CyclicBuffer*, unsigned short)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart_legacy.o(i._Z15Uart0RxCallBackP17OSAL_CyclicBuffert))
<BR>[Address Reference Count : 2]<UL><LI> test_api.o(i._Z30TEST_TestApplicationDeactivatev)
<LI> uart_legacy.o(i._Z15System_UartInitv)
</UL>
<P><STRONG><a name="[74d]"></a>VAT_FreeDecoder(S_VatTaskGlobalData*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vat_func.o(i._Z15VAT_FreeDecoderP19S_VatTaskGlobalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VAT_FreeDecoder(S_VatTaskGlobalData*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[74e]"></a>VAT_InitDecoder(S_VatTaskGlobalData*)</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, vat_func.o(i._Z15VAT_InitDecoderP19S_VatTaskGlobalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VAT_InitDecoder(S_VatTaskGlobalData*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnG729ADecInit
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[750]"></a>VAT_InitHandler(S_VAT_Info*, S_VatTaskGlobalData*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vat_func.o(i._Z15VAT_InitHandlerP10S_VAT_InfoP19S_VatTaskGlobalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = VAT_InitHandler(S_VAT_Info*, S_VatTaskGlobalData*) &rArr; VAT_InitCodec() &rArr; SysSound::muteSpk(int, unsigned*) &rArr; CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListCreate(unsigned char)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[137]"></a>VAT_ManagerTask(void*)</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, vat_task.o(i._Z15VAT_ManagerTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = VAT_ManagerTask(void*) &rArr; VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*) &rArr; FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelUpdateAttribute(unsigned char, unsigned char)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDelete(OSAL_PriorityQueue*)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskDelete(unsigned char)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FlashDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_SessionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[752]"></a>VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, vat_func.o(i._Z15VAT_TerminateOpP10S_VAT_InfoP19S_VatTaskGlobalDatah))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char) &rArr; CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetGPOPin(unsigned char, unsigned char, unsigned char)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::stop()
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPstnModuleEnable()
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDelete(OSAL_List*)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_SendAckUpdateStatus(S_VAT_Info*, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[a4]"></a>VIDEO_DIAL_exec()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, videoengine.o(i._Z15VIDEO_DIAL_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = VIDEO_DIAL_exec() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoHandlerState()
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommSessionFailed()
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoToStation(S_MESSAGE_COMM_INFO*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[75b]"></a>VOICE_open_call(unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, voice_manager.o(i._Z15VOICE_open_callj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = VOICE_open_call(unsigned) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceCallAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[187]"></a>VoiceCallAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z15VoiceCallActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = VoiceCallAction(S_CPUI_ButtonInfo*) &rArr; CloseVoiceCall(S_CPUI_ButtonInfo*) &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceOn()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_open_call(unsigned)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[4e2]"></a>WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, apicmdprocessing.o(i._Z15WriteFieldIDPtrtttm))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_key_fob_data()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityCmd_exec()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardUser()
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyTagEntity(unsigned char*, unsigned short, bool)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>

<P><STRONG><a name="[75c]"></a>WriteSTUNParams(bool, unsigned char*)</STRONG> (Thumb, 488 bytes, Stack size 96 bytes, process_income_message.o(i._Z15WriteSTUNParamsbPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = WriteSTUNParams(bool, unsigned char*) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableSecondsInterrupts()
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableInterrupts()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_Reset_Jamming_Detector()
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPowerSaveMode()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[760]"></a>aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, aes_modes.o(i._Z15aes_cbc_encryptPKhPhiS1_PK7aes_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[762]"></a>aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aes_modes.o(i._Z15aes_ecb_encryptPKhPhiPK7aes_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[b7c]"></a>clear_fast_dial()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_comm.o(i._Z15clear_fast_dialv))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
</UL>

<P><STRONG><a name="[4ed]"></a>create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, do_it_yourself.o(i._Z15create_new_userh21E_USER_SECURITY_LEVELhbPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_decode_command(unsigned char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
</UL>

<P><STRONG><a name="[26a]"></a>getCustomerCode()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z15getCustomerCodev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getCustomerCode() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initOptionsVector()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[575]"></a>getKeypadEntity(unsigned char*, int*)</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, process_income_message.o(i._Z15getKeypadEntityPhPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = getKeypadEntity(unsigned char*, int*) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramKeyPad(unsigned char*, S_POSESO_Reply*, unsigned char)
</UL>

<P><STRONG><a name="[6c6]"></a>getSpeakerPhone()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z15getSpeakerPhonev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getSpeakerPhone() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[764]"></a>getSyncClockGSM()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z15getSyncClockGSMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSyncClockGSM() &rArr; CONTROL_PANEL_get_sysflag_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[480]"></a>getVectorOption(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, init.o(i._Z15getVectorOptionj))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewNightModeAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeAction(S_CPUI_ButtonInfo*)
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_force_panic_disarm()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelOutgNumb(int, int, int*, void*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[765]"></a>get_KEY_FOB_ptr(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ram_key_fob.o(i._Z15get_KEY_FOB_ptrh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_KEY_FOB_ptr(unsigned char) &rArr; FL_KEY_FOB_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[bd8]"></a>get_nible_by_id(unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, util.o(i._Z15get_nible_by_idPhh))
<BR><BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
</UL>

<P><STRONG><a name="[68f]"></a>initCommTaskReg(S_COMM_STM_RX_MNG_COMM_TASK_REG***)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, comm_stm_rx_manager.o(i._Z15initCommTaskRegPPP31S_COMM_STM_RX_MNG_COMM_TASK_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initCommTaskReg(S_COMM_STM_RX_MNG_COMM_TASK_REG***) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[7d1]"></a>is_already_in_q(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, videoq.o(i._Z15is_already_in_qh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_already_in_q(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[db]"></a>progDelAllPerif(int, int, int*, void*)</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, kpdprogs.o(i._Z15progDelAllPerifiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = progDelAllPerif(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ers_all_devices()
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEntryDeletion(unsigned short, unsigned short)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[e1]"></a>progDelOutgNumb(int, int, int*, void*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, kpdprogs.o(i._Z15progDelOutgNumbiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = progDelOutgNumb(int, int, int*, void*) &rArr; FL_OUTGOING_PHONE_erase(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_erase(unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[ec]"></a>progEnablePrint(int, int, int*, void*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kpdprogs.o(i._Z15progEnablePrintiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = progEnablePrint(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[f4]"></a>progTestAllLeds(int, int, int*, void*)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, kpdprogs.o(i._Z15progTestAllLedsiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = progTestAllLeds(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisableEnableLed(unsigned char, unsigned char)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[66a]"></a>save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, do_it_yourself.o(i._Z15save_input_dataP19RF_INPUT_DEV_TYPE_EPhS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*) &rArr; CreateRFOutputEntry(int, unsigned char*, unsigned char, bool) &rArr; init_ram_db(unsigned char, unsigned char) &rArr; FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRFOutputEntry(int, unsigned char*, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
</UL>

<P><STRONG><a name="[66b]"></a>save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, do_it_yourself.o(i._Z15save_siren_dataP12SIREN_TYPE_EPhS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*) &rArr; init_ram_db(unsigned char, unsigned char) &rArr; FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read_device_version(unsigned char, unsigned char)
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
</UL>

<P><STRONG><a name="[2e0]"></a>setPINBeforeArm(int, int)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, kpdoutstub.o(i._Z15setPINBeforeArmii))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = setPINBeforeArm(int, int) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progPinArm(int, int, int*, void*)
</UL>

<P><STRONG><a name="[393]"></a>set_nible_by_id(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, util.o(i._Z15set_nible_by_idPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_nible_by_id(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUTPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
</UL>

<P><STRONG><a name="[769]"></a>start_LINK_exec(E_TRANSPORTS, bool)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, link.o(i._Z15start_LINK_exec12E_TRANSPORTSb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = start_LINK_exec(E_TRANSPORTS, bool) &rArr; GSM_Control_API_GetGsmStatus(S_GSM_STATUS*) &rArr; GSM_Control_StartStopRegDebounceTimer(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[76a]"></a>updateRSSIValue(int, int, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._Z15updateRSSIValueiih))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = updateRSSIValue(int, int, unsigned char) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_ClearAllDeviceInfo()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[886]"></a>AUTO_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, do_it_yourself.o(i._Z16AUTO_test_device12C_DEV_TYPE_EhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AUTO_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[637]"></a>AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, apipckprocessing.o(i._Z16AddAndFillEntityttPhPttS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeEntityID(unsigned short)
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSameSerial(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_key_fob_data()
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyCUIEntry(int*, unsigned char*, bool*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[76c]"></a>AddEntities2List(rules_arg_t*, FitEntitiesList_t*, unsigned short*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, apicmdprocessing.o(i._Z16AddEntities2ListP11rules_arg_tP17FitEntitiesList_tPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = AddEntities2List(rules_arg_t*, FitEntitiesList_t*, unsigned short*) &rArr; CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*) &rArr; CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftFitList(FitEntitiesList_t*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[76f]"></a>AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E)</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, annex.o(i._Z16AnnexHandleAlarmi21RF_DETECTOR_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E) &rArr; AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartAlarm()
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[141]"></a>AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, annex.o(i._Z16AnnexStoredAlarmi21RF_DETECTOR_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> annex.o(.constdata)
</UL>
<P><STRONG><a name="[772]"></a>AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, cyberattackstates.o(i._Z16AttackDbUpdateGo12C_DEV_TYPE_Eh11EAttackTypeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementSearch(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementClose(TAttackDataBase*)
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementAttackCnt(TAttackDataBase*, EAttackType)
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceTypeValid(C_DEV_TYPE_E)
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAttackTypeValid(EAttackType)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAttackDbUpdate(C_PROC_2_A_MESSAGE_E, C_DEV_TYPE_E, unsigned char)
</UL>

<P><STRONG><a name="[ad0]"></a>AutoLearnFailure()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, do_it_yourself.o(i._Z16AutoLearnFailurev))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ConfigOnCDT(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[c11]"></a>BattHandlerState()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bat.o(i._Z16BattHandlerStatev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[8f]"></a>BattHandler_exec()</STRONG> (Thumb, 680 bytes, Stack size 48 bytes, bat.o(i._Z16BattHandler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = BattHandler_exec() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_EN_N_DIS(bool)
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGsmStatus(bool)
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get220Status()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bat.o(i._Z16BattHandler_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[39d]"></a>BuildFibroHeader(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, message.o(i._Z16BuildFibroHeaderPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BuildFibroHeader(unsigned char*) &rArr; hexstr2int(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2int(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[778]"></a>CHARGER_EN_N_DIS(bool)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hardware_vf.o(i._Z16CHARGER_EN_N_DISb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHARGER_EN_N_DIS(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Battery_Under_Chargers_Threshold()
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBattHandler()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerSaveMode(unsigned)
</UL>

<P><STRONG><a name="[77c]"></a>CODEC_PowerOnOff(int, unsigned char, unsigned*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, codec_api.o(i._Z16CODEC_PowerOnOffihPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CODEC_PowerOnOff(int, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int, unsigned*)
</UL>

<P><STRONG><a name="[364]"></a>CPUI_CopyTracker(unsigned*, unsigned*, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cpui_func.o(i._Z16CPUI_CopyTrackerPjS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPUI_CopyTracker(unsigned*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[c06]"></a>CPUI_IsLedBitSet(unsigned, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpui_func.o(i._Z16CPUI_IsLedBitSetjh))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_IsLedSetForAllBlinkTypes(unsigned char*, unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[351]"></a>CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, cpui_func.o(i._Z16CPUI_PerformBeephhPP15S_CPUI_BeepInfoh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char) &rArr; CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char) &rArr; CPUI_StopBeep(unsigned char) &rArr; CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_Beep(unsigned, int, int, unsigned, int, int, void(*)())
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateStopBeepMsg(unsigned char)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[a18]"></a>C_PROC_build_msg(unsigned char*, S_C_PROC_EVENT*)</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, c_proc.o(i._Z16C_PROC_build_msgPhP14S_C_PROC_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = C_PROC_build_msg(unsigned char*, S_C_PROC_EVENT*)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[a4a]"></a>CalcBufferLength(unsigned short, S_RSU_ESI_FILE_INFO*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rsu_task.o(i._Z16CalcBufferLengthtP19S_RSU_ESI_FILE_INFO))
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
</UL>

<P><STRONG><a name="[398]"></a>CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ram_rf_sec_zone.o(i._Z16CheckBypassLogicP21S_SEC_ZONE_ENTRY_DATA13SIGNAL_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVS_loss_and_inactivity_check()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
</UL>

<P><STRONG><a name="[9b0]"></a>CheckEntityValue(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apicmdutilfunc.o(i._Z16CheckEntityValuet))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddEntityCmd(unsigned char*, unsigned char*)
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[77d]"></a>CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short)</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, apicmdprocessing.o(i._Z16CheckRule4ValuesthP11rules_arg_tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityGroup2List(unsigned short, rules_arg_t*, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*)
</UL>

<P><STRONG><a name="[696]"></a>ClearMsgFromMuxQ(OSAL_PriorityQueue*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, comm_stm_rx_manager.o(i._Z16ClearMsgFromMuxQP18OSAL_PriorityQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearMsgFromMuxQ(OSAL_PriorityQueue*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[a86]"></a>ClrPreOffsetSave()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, log.o(i._Z16ClrPreOffsetSavev))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[77e]"></a>CopyCUI2UIFields(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, apicopyuiprocessing.o(i._Z16CopyCUI2UIFieldstttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CopyCUI2UIFields(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
</UL>

<P><STRONG><a name="[77f]"></a>CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, apicmdutilfunc.o(i._Z16CopyEntity2EPROMtt26API_EPROM_COPY_OPERATION_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E) &rArr; MemMapEntityWrite2EPROM(unsigned char*, unsigned short) &rArr; MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemMapEntityWrite2EPROM(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCopyAllCUI2UIHandler_exec()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiModifyHandler_exec()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelEntHandler_exec()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelAllHandler_exec()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityCmd_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelParallel_UI_Entity(unsigned)
</UL>

<P><STRONG><a name="[781]"></a>CopyPrivilege2UI(unsigned short)</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, apicopyuiprocessing.o(i._Z16CopyPrivilege2UIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CopyPrivilege2UI(unsigned short) &rArr; WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
</UL>

<P><STRONG><a name="[445]"></a>CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, apicopyuiprocessing.o(i._Z16CopyUI2CUIFieldstttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPrivilege2CUI(unsigned short, unsigned short)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPinCUIUser(unsigned short, unsigned short*)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKfCUIUser(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[966]"></a>DataBaseCheckSum()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z16DataBaseCheckSumv))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[783]"></a>DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, msme_q.o(i._Z16DeleteMsgesFromQP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*) &rArr; MSME_q_BuildandSendSigFoxMsg(S_MSME_MSG_EVENT*) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEventFromQueue(sEventDrivenQ*, unsigned char)
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_q_BuildandSendSigFoxMsg(S_MSME_MSG_EVENT*)
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_comm_fail_msges(S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E)
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQempty()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_MSME_MESSAGES_Ptr()
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MSME_MsgParams()
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
</UL>

<P><STRONG><a name="[3ba]"></a>Delete_All_files()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, filesystemmanagment.o(i._Z16Delete_All_filesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Delete_All_files() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[623]"></a>DevIdInRfFgTable(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfapivseg.o(i._Z16DevIdInRfFgTableh))
<BR><BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFailureCounter(unsigned char, eRX_Failure_Cmd)
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_BIT_Result_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSendEnableModeIfBackToCCSFromDisableMode(s_PosesoPoseseMachineStr*, unsigned char)
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFgPhotoTable(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendAnswer2SKCCommand(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IfNeed2Ask4SCK(unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_Set_EnabledPoseso(unsigned char, unsigned char*, char, unsigned char)
</UL>

<P><STRONG><a name="[267]"></a>DeviceTypedecode()</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z16DeviceTypedecodev))
<BR><BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceInfoResp(unsigned char*)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>

<P><STRONG><a name="[6ad]"></a>EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, el_v2_driver.o(i._Z16EL_build_frame_FPhhh12E_PANEL_MODE15E_PROTOCOL_TYPES_hS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*) &rArr; calc_chksum16(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_handler_F(unsigned char*, unsigned char*)
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_nack()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_CP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_receive()
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_tag(unsigned char*, unsigned char)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndUdpMsg(FLAG_FIELD*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[6b2]"></a>EL_flag_parser_F(unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, el_v2_driver.o(i._Z16EL_flag_parser_FPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EL_flag_parser_F(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_handler_F(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[a12]"></a>ENTRY_total_size(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fl_entry.o(i._Z16ENTRY_total_sizeh))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[c16]"></a>EN_DTMF_Reciever(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hardware_vf.o(i._Z16EN_DTMF_Recieverh))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[78b]"></a>FL_PINCODE_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fl_types.o(i._Z16FL_PINCODE_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_PINCODE_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardPinCode()
</UL>

<P><STRONG><a name="[2cb]"></a>FileNameGetState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z16FileNameGetStatev))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[78c]"></a>FillFgPhotoTable(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, timer.o(i._Z16FillFgPhotoTableP21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FillFgPhotoTable(S_SEC_ZONE_ENTRY_DATA*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
</UL>

<P><STRONG><a name="[76b]"></a>FindFreeEntityID(unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, apicmdprocessing.o(i._Z16FindFreeEntityIDt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FindFreeEntityID(unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[61]"></a>GSM_MESSAGE_exec()</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, gsm_message.o(i._Z16GSM_MESSAGE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GSM_MESSAGE_exec() &rArr; GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DRIVER_open()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gsm_message.o(i._Z16GSM_MESSAGE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[aff]"></a>GSM_MESSAGE_init()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gsm_message.o(i._Z16GSM_MESSAGE_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[78e]"></a>GSM_MESSAGE_send(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gsm_message.o(i._Z16GSM_MESSAGE_sendP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GSM_MESSAGE_send(S_MESSAGE_COMM_INFO*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_driver_mux(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[78f]"></a>GSM_data_call_on()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gsm_comm.o(i._Z16GSM_data_call_onv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GSM_data_call_on() &rArr; SCHEDULER_enable_gsm_comm() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_enable_gsm_comm()
</UL>
<BR>[Called By]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
</UL>

<P><STRONG><a name="[791]"></a>GSM_process_ring(unsigned char*)</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, gsm_comm.o(i._Z16GSM_process_ringPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GSM_process_ring(unsigned char*) &rArr; GetGSMModuleType() &rArr; CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoiceWindowStatus()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCallHandling(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_phone_mute()
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmeFlags()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_read(unsigned char)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[78]"></a>G_PROC_INIT_exec()</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, gsm_comm.o(i._Z16G_PROC_INIT_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = G_PROC_INIT_exec() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoCommMachineIdle()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gsm_comm.o(i._Z16G_PROC_INIT_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[796]"></a>G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)</STRONG> (Thumb, 952 bytes, Stack size 64 bytes, gsm_comm.o(i._Z16G_PROC_build_msg18E_GSM_A2G_COMMANDSPhS0_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned) &rArr; GPRS_SEQUENCE_INDEX(unsigned char*, unsigned char, unsigned) &rArr; phone_num_GET_ptr(unsigned char) &rArr; FL_DOMAIN_EXTANSION_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageDuringVoiceAvailable()
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SEQUENCE_INDEX(unsigned char*, unsigned char, unsigned)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrSmsMessageCommInfo()
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update_Socket_Param(unsigned char*, char*, unsigned char*)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPhoneOrGprsData(unsigned char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceIDLE()
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
</UL>

<P><STRONG><a name="[799]"></a>GetCurrentDialer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ram_phone_num.o(i._Z16GetCurrentDialerv))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPhoneOrGprsData(unsigned char*)
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetServerTimer()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocket()
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
</UL>

<P><STRONG><a name="[b1f]"></a>GetFirstPriority(sPriorityQ*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, priorityq.o(i._Z16GetFirstPriorityP10sPriorityQ))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateScheduler_exec()
</UL>

<P><STRONG><a name="[953]"></a>GetFogCounterArr()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rxfailuredetector.o(i._Z16GetFogCounterArrv))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[2c4]"></a>GetGSMModuleType()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, init.o(i._Z16GetGSMModuleTypev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetGSMModuleType() &rArr; CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_next_ack_state()
</UL>

<P><STRONG><a name="[680]"></a>GetGuardCodeFlag()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, msme.o(i._Z16GetGuardCodeFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
</UL>

<P><STRONG><a name="[79c]"></a>GetNextEventToDo(sEventDrivenQ*)</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, eventdrivenq.o(i._Z16GetNextEventToDoP13sEventDrivenQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_G_PROC_EVENT_ptr()
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_RF_PROC_EVENT_ptr()
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_C_PROC_EVENT_ptr()
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_MSME_PROC_EVENT_ptr()
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextVideoCommSession()
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextVideoRFTransfer()
</UL>

<P><STRONG><a name="[c74]"></a>GetOnLineTimeout()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link.o(i._Z16GetOnLineTimeoutv))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_Timer_c
</UL>

<P><STRONG><a name="[400]"></a>GetOrCreateEntry(unsigned short, unsigned char, unsigned*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, process_income_message.o(i._Z16GetOrCreateEntrythPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetOrCreateEntry(unsigned short, unsigned char, unsigned*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigFoxEnDis(unsigned char, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[5ae]"></a>GetPhotoPriority(SEQUENCER_LABEL_E)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, videoengine.o(i._Z16GetPhotoPriority17SEQUENCER_LABEL_E))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_InitAutoSend(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
</UL>

<P><STRONG><a name="[9f0]"></a>GetPosesoTimeWin(POSESO_LISTEN_TYPE_E)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, poseso_listen.o(i._Z16GetPosesoTimeWin20POSESO_LISTEN_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
</UL>

<P><STRONG><a name="[58f]"></a>GetSaveFileState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z16GetSaveFileStatev))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[bca]"></a>Get_CalibrStrPtr()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfapivseg.o(i._Z16Get_CalibrStrPtrv))
<BR><BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[79d]"></a>Get_GSM_PIN_code()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gsm_comm.o(i._Z16Get_GSM_PIN_codev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_GSM_PIN_code() &rArr; get_STRING_ptr(unsigned short) &rArr; FL_STRING_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_STRING_ptr(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[79e]"></a>Get_GSM_RingType()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gsm_comm.o(i._Z16Get_GSM_RingTypev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_GSM_RingType() &rArr; CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[60a]"></a>GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gsm_mux_control.o(i._Z16GsmMuxFreeBufferPP27S_COMM_STM_RX_MNG_RX_BUFFERj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MuxSendMessage(unsigned char, unsigned char*, unsigned short*, unsigned short*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[619]"></a>GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, comm_common_funcs.o(i._Z16GsmPrintSplitNumhPttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[a82]"></a>HW_COUNTER_Clear(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_timer_api.o(i._Z16HW_COUNTER_Clearh))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[79f]"></a>HandleNewMessage()</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, checkdevicetype.o(i._Z16HandleNewMessagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HandleNewMessage() &rArr; RefreshRxTimeout() &rArr; TIMER_ResetRFresetCounter() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCounters_CalculateMissedMessages(int, int)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshRxTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSupervisory(unsigned char)
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
</UL>

<P><STRONG><a name="[7a2]"></a>IP_APP_learn_tag(unsigned char*, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, ip_app.o(i._Z16IP_APP_learn_tagPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = IP_APP_learn_tag(unsigned char*, unsigned char) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateOldIpLearnTagMsg(unsigned char*, unsigned char*)
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateIpLearnTagMsg(unsigned char*, unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_COMMAND_exec()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[b97]"></a>IncreasePriority(unsigned short, unsigned short, unsigned, OSAL_PriorityQueueElement*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, osal_priority_queue.o(i._Z16IncreasePriorityttjP25OSAL_PriorityQueueElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IncreasePriority(unsigned short, unsigned short, unsigned, OSAL_PriorityQueueElement*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDeleteElement(OSAL_PriorityQueue*, unsigned short)
</UL>

<P><STRONG><a name="[c6a]"></a>InitExti1_GSM_RI()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardware_vf.o(i._Z16InitExti1_GSM_RIv))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[553]"></a>InitPreArmStatus(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z16InitPreArmStatusb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = InitPreArmStatus(bool) &rArr; PerimeterArm(PerimeterArmTrigger_U) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
</UL>

<P><STRONG><a name="[b8d]"></a>Init_LISTEN_exec()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, listen.o(i._Z16Init_LISTEN_execv))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_precondition_exec()
</UL>

<P><STRONG><a name="[43e]"></a>InsetGsmEventToQ(unsigned char*)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gsmq.o(i._Z16InsetGsmEventToQPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InsetGsmEventToQ(unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextGprocLocationInPool()
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[28d]"></a>InterfaceMachine()</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, interfacemachine.o(i._Z16InterfaceMachinev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InterfaceMachine() &rArr; GetPlasticVersion() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_IsInitComplete()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperState(int, bool)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerStructPtr()
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDTMF()
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DTMF_int_state()
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegacyFunc()
</UL>

<P><STRONG><a name="[306]"></a>IsBattLowOrEmpty()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bat.o(i._Z16IsBattLowOrEmptyv))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[9f7]"></a>IsChargerEnabled()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hardware_vf.o(i._Z16IsChargerEnabledv))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReadBatCharger(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[491]"></a>IsGetPictureIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z16IsGetPictureIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[9b3]"></a>IsGsmSendAckNack()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsmq.o(i._Z16IsGsmSendAckNackv))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[9c4]"></a>IsGsmSyncTimeout()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i._Z16IsGsmSyncTimeoutv))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[7f5]"></a>IsGsmVoiceCallOn()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, voice_manager.o(i._Z16IsGsmVoiceCallOnv))
<BR><BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[7a9]"></a>IsOldRfInputMGLS(RF_INPUT_ENTRY_S*)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ram_rf_input_dev.o(i._Z16IsOldRfInputMGLSP16RF_INPUT_ENTRY_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsOldRfInputMGLS(RF_INPUT_ENTRY_S*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
</UL>

<P><STRONG><a name="[834]"></a>IsPriorityQEmpty(sPriorityQ*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, priorityq.o(i._Z16IsPriorityQEmptyP10sPriorityQ))
<BR><BR>[Called By]<UL><LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextPriorityEventToDo(sPriorityQ*, unsigned char*, bool*)
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char)
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEventFromQ(sPriorityQ*, unsigned char)
</UL>

<P><STRONG><a name="[48a]"></a>IsRfTransmitIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, c_proc.o(i._Z16IsRfTransmitIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[7aa]"></a>IsSK2TestEnabled()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z16IsSK2TestEnabledv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsSK2TestEnabled() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c8]"></a>IsSigFoxDisabled(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z16IsSigFoxDisabledh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsSigFoxDisabled(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJammingEventAction(S_CPUI_ButtonInfo*)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_start()
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[a95]"></a>IsTAGSysIndFault()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ram_db.o(i._Z16IsTAGSysIndFaultv))
<BR><BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>

<P><STRONG><a name="[349]"></a>IsThereOverWrite(unsigned short, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, cpui_func.o(i._Z16IsThereOverWritett))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsThereOverWrite(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[492]"></a>IsVideoVideoIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, videohandler.o(i._Z16IsVideoVideoIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[7ab]"></a>Is_GSM_ClassB_on()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_a2g.o(i._Z16Is_GSM_ClassB_onv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Is_GSM_ClassB_on()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[49f]"></a>JammingClearData()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, jammingcheck.o(i._Z16JammingClearDatav))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingCheck()
</UL>

<P><STRONG><a name="[7ac]"></a>KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, key_fob.o(i._Z16KEY_FOB_send_msg17KEY_FOB_MESSAGE_E16U_KEY_FOB_PARAMShh))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_open_alarm()
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKfRFMsg(unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[963]"></a>KFBattReadNeeded(int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, devicebatterystate.o(i._Z16KFBattReadNeededi))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[83f]"></a>LOG_save_suspend(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, log.o(i._Z16LOG_save_suspendh))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_exec()
</UL>

<P><STRONG><a name="[11a]"></a>LeftButtonAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z16LeftButtonActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LeftButtonAction(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[7af]"></a>LoadNewScenarios(tQ_TYPE)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, smartscheduler.o(i._Z16LoadNewScenarios7tQ_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LoadNewScenarios(tQ_TYPE) &rArr; LoadHighPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHighPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadTimeBaseScenario(tSCENARIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateTimeBasedEvants(tFUNCTIONS_ID)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateScheduler_exec()
</UL>

<P><STRONG><a name="[7b3]"></a>LogSavePreOffset()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, log.o(i._Z16LogSavePreOffsetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = LogSavePreOffset() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[8d4]"></a>MESSAGE_SD_chsum(unsigned char*, unsigned char, unsigned char*)</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, message.o(i._Z16MESSAGE_SD_chsumPhhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MESSAGE_SD_chsum(unsigned char*, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
</UL>

<P><STRONG><a name="[32d]"></a>MSME_CalcArmType(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, msme.o(i._Z16MSME_CalcArmTypeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSME_CalcArmType(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[7b4]"></a>MSME_state_ready()</STRONG> (Thumb, 964 bytes, Stack size 176 bytes, msme.o(i._Z16MSME_state_readyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = MSME_state_ready() &rArr; MSME_finalize_actions(S_MSME_MSG_EVENT*, bool) &rArr; GSM_Control_API_SaveCurrentStatistics() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGeneralStatusOk()
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time(unsigned char*)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_date(unsigned char*)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_memory_map_ok()
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_MSME_PROC_EVENT_ptr()
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_MSME_PROC_EVENT(S_MSME_MSG_EVENT*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQEmptyOrDeleted()
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsmeGetCurrentEvent()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dial_sequence(S_MSME_MSG_EVENT*)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMsgStruct()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_exec()
</UL>

<P><STRONG><a name="[7ba]"></a>MSME_state_start()</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, msme.o(i._Z16MSME_state_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MSME_state_start() &rArr; DIAL_RETRY_send_STUN(S_MESSAGE_COMM_INFO*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPRSPLMN()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommBypassed(COMMUNICATION_CHANNEL_E)
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_STUN(S_MESSAGE_COMM_INFO*)
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_exec()
</UL>

<P><STRONG><a name="[6d2]"></a>Modem_Init_flags()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, gsm_stm_control.o(i._Z16Modem_Init_flagsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Modem_Init_flags() &rArr; GSM_Turn_Off_All_Socket_Indication(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_All_Socket_Indication(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[7c1]"></a>NeedNextFreePage(Sector_Page_s*, Sector_Page_s*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, internalflash_util.o(i._Z16NeedNextFreePageP13Sector_Page_sS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NeedNextFreePage(Sector_Page_s*, Sector_Page_s*) &rArr; EraseSector(unsigned char, unsigned char) &rArr; preparate_sectors_for_write(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check_sectors(unsigned, unsigned)
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchFreePageInSector(unsigned char, unsigned char)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Erase()
</UL>

<P><STRONG><a name="[5e3]"></a>OSAL_Ascii2Digit(char)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, osal_services.o(i._Z16OSAL_Ascii2Digitc))
<BR><BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2String(char*, char*, unsigned short)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommHexStr2Num(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGetbufferLen(unsigned char*, unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[294]"></a>OSAL_Digit2Ascii(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, osal_services.o(i._Z16OSAL_Digit2Asciih))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print2Uart(unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_HandleReceivedCodecSample()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[36c]"></a>OSAL_GetTimeMsec()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_time_mng.o(i._Z16OSAL_GetTimeMsecv))
<BR><BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommandRespondTime(unsigned char, unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CheckMisoStatus()
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomNum(unsigned long, unsigned long)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long)
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateTimeBasedEvants(tFUNCTIONS_ID)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateFunction(void(*)())
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired(SYS_TASK*, unsigned)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTaskReady(SYS_TASK*, unsigned)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemTask(SYS_TASK*, unsigned)
</UL>

<P><STRONG><a name="[a8f]"></a>OSAL_ListGetHead(OSAL_List*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osal_list.o(i._Z16OSAL_ListGetHeadP9OSAL_List))
<BR><BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FlashDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[c51]"></a>OSAL_ListGetTail(OSAL_List*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osal_list.o(i._Z16OSAL_ListGetTailP9OSAL_List))
<BR><BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[414]"></a>OSAL_StringToNum(char*, unsigned char, char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, osal_services.o(i._Z16OSAL_StringToNumPchc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2Digit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetFirmWareVer()
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetBuildVer()
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short)
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetAttenuation(char*, unsigned short, unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_QueryGsmVersion(char*, unsigned short, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetPowerMode(char*, unsigned short, unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetFrequency(char*, unsigned short, unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSendCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PowerSaveMode(char*, unsigned short, unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetTxPower(char*, unsigned short, unsigned char)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TestButtons(char*, unsigned short, unsigned char)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TestAllLeds(char*, unsigned short, unsigned char)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PressButton(char*, unsigned short, unsigned char)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisarmPanel(char*, unsigned short, unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetRSSI(char*, unsigned short, unsigned char)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Tamper(char*, unsigned short, unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator &lang;&lang;(const char*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ISN(char*, unsigned short, unsigned char)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfWriteOperation(char*, unsigned short, unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemWriteOperation(char*, unsigned short, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetCarrierSense(char*, unsigned short, unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteFlashErase(char*, unsigned short, unsigned char)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SetCommPrintMode(char*, unsigned short, unsigned char)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_comm_dest_JD_config(unsigned char*, void*)
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDuplicateCUI(unsigned char*, int, int)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDuplicateSN(unsigned char*, int, int)
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_Open_data_connection(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)
</UL>

<P><STRONG><a name="[7c4]"></a>OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)</STRONG> (Thumb, 14168 bytes, Stack size 200 bytes, process_income_message.o(i._Z16OperatePosesoCmdh17POSESO_CMD_TYPE_EPhP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPermanentStatistics()
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SaveCurrentStatistics()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPeriodicStatistics()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisableEnableLed(unsigned char, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_ClearCurrentStatistics(MODEM_STATISTICS*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoiceWindowStatus()
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteId(unsigned short, unsigned char*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetSigfoxKeepAliveFlag(unsigned char)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCyberMode(unsigned char*)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_Task_IsReadyToGetFile()
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_Task_API_FTPGetFile(char*, char*, char*, char*, char*, void*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_read(unsigned char)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateResetMachine(unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrCreateEntry(unsigned short, unsigned char, unsigned*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_FlipAndWriteKey(unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2decstr(unsigned, unsigned char*, unsigned)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmVoiceCallOn()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetRightPaddedStringLen(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_hexstr2numRetLen(unsigned char*, unsigned, unsigned char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoFaultCode(VIDEO_FAULT_CODE_E)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrVideoBypassIndication()
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBypassIndication()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_PANIC_state()
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysinactivity_ptr()
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChimeOrInactivityCntBit()
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInactivityButtonStatus()
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInactivityMachine()
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralInactivity()
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetlInactivityWin()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_gsm_level()
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DOMAIN_EXTANSION_ID2logical(unsigned char)
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTENDED_PHONE_NUM_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTENDED_PHONE_NUM_read(unsigned char)
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ID2logical(unsigned char)
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_erase(unsigned char)
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_erase(unsigned char)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_read(unsigned char)
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PHONE_NUM_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFogWiredCfgMsg(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreAlarmStatus()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecisionAboutPosesoPoseseFogChain(COMM_STATUS_INPANEL_E)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PHONE_NUM_read(unsigned char)
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSaveFileIdle()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int2(unsigned char*)
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_Reset_Jamming_Detector()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ers(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSimNumberToEEProm(unsigned char*, unsigned char)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetCSDExpirationTimer(int)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_DEVICE_operation(unsigned char, unsigned char)
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumOpdds()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Counter_Sensitivity(unsigned char)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_init_params()
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTEMANCE_get_IC()
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperMask(int, int)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMutePhone(int, int)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_installation_completed(unsigned char)
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_a_boot_request()
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfId(unsigned char)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SetSigFoxIDEAlarm(unsigned char)
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_output_dev_init(unsigned char, unsigned char)
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSosStatus()
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSetVirtualSnPoseso(unsigned char*, MSME_MSG_E*, unsigned char*)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigFoxEnDis(unsigned char, unsigned char)
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_timer(unsigned char, unsigned char)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelTamperBypass()
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIsRkpInstall()
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_already_in_q(unsigned char)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_ovds()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2hex(unsigned char)
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_chime_inactivity_cnt(bool)
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndExtractCyberModeLegalParams(unsigned char*, unsigned char*)
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_Open_data_connection(unsigned char*)
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SetTestModeSupervisory(unsigned char)
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_gen_inactivity(bool)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCyberSequenceDeltaThreshold()
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_inactivity(unsigned char, bool)
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceTypeEntry(unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_ForceSTUNDetach()
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetSKMaskingDelay(unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_save_params()
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_bypass(unsigned char, bool)
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetFogWiredMode(unsigned char, unsigned char, unsigned char)
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevicesConfigurationInit()
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_chime(unsigned char, bool)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstSecurityTamper()
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetPhotoDelay(unsigned char*)
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstSirenTamper()
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveFailedVideo(unsigned char, unsigned char)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstKPDTamper()
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidSirenEntry()
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstTRTamper()
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosesoTimeWin(POSESO_LISTEN_TYPE_E, int, S_POSESO_Reply*)
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SK2_config_init()
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_ivds()
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNonChimeZone(unsigned char)
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigAlliance(unsigned char, unsigned char)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_OpenTamper()
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCState()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIMHTime(unsigned short)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialHangUp()
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pct2Sens(unsigned char)
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecentVideoDetectionMessage(POSESO_CMD_TYPE_E)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNineDigitPhoneNumber()
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeAlarmFriendlyMode(unsigned char)
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustModeAndPartition(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustOPDDSensitivity(int, int)
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramUserInterface(unsigned char*, S_POSESO_Reply*)
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_device_ptr(unsigned char, unsigned short, unsigned char)
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeriodic(unsigned short, unsigned char*)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramKeyPad(unsigned char*, S_POSESO_Reply*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[5a6]"></a>OverwriteVideoId(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char, bool)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, videoq.o(i._Z16OverwriteVideoIdP21S_SEC_ZONE_ENTRY_DATAhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OverwriteVideoId(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char, bool) &rArr; IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[4eb]"></a>PIN_CODE_compare(unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ram_pin_code.o(i._Z16PIN_CODE_comparePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_CODE_compare(unsigned char*) &rArr; FL_PINCODE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PINCODE_read(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardPinCode()
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
</UL>

<P><STRONG><a name="[e4]"></a>PanelBeepsConfig(int, int, int*, void*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, kpdprogs.o(i._Z16PanelBeepsConfigiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = PanelBeepsConfig(int, int, int*, void*) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[114]"></a>PartArmDayAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z16PartArmDayActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PartArmDayAction(S_CPUI_ButtonInfo*) &rArr; PartArmPanel(int, S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[818]"></a>PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 208 bytes, aes_api.o(i._Z16PerformAesCbcEncPhPKhS1_S_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned) &rArr; aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_key128(const unsigned char*, aes_ctx*)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_AES_128_cbc_encrypt
</UL>

<P><STRONG><a name="[81a]"></a>PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 200 bytes, aes_api.o(i._Z16PerformAesEcbEncPhPKhS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned) &rArr; aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_key128(const unsigned char*, aes_ctx*)
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*)
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Config(TVirusCryptObj*, unsigned)
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[81b]"></a>PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)</STRONG> (Thumb, 402 bytes, Stack size 80 bytes, process_c_proc_messages.o(i._Z16PerformKF3ArmingP9S_KEY_FOBP16U_KEY_FOB_PARAMShh10U_DEV_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_force_arm_desicion_4_open_zone_proc(U_KEY_FOB_STATUS*, SECURITY_EVENT_E*)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
</UL>

<P><STRONG><a name="[820]"></a>PreparateKF3Data(unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, preparedatafortransmission.o(i._Z16PreparateKF3Datah))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PreparateKF3Data(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[821]"></a>ProcessGetAllCmd(unsigned char, unsigned char*)</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, apipckprocessing.o(i._Z16ProcessGetAllCmdhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProcessGetAllCmd(unsigned char, unsigned char*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add2List(unsigned char, unsigned char, unsigned char, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFit2RulesSearch(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetAllCmd(unsigned char, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[3e0]"></a>RKP_open_low_bat()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_rkp.o(i._Z16RKP_open_low_batv))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[4bc]"></a>RKP_send_message()</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, rkp.o(i._Z16RKP_send_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_DEV_TYPE_send_msg(unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_build_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[825]"></a>RKP_update_timer(unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, process_c_proc_messages.o(i._Z16RKP_update_timerhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = RKP_update_timer(unsigned char, unsigned char) &rArr; CONTROL_PANEL_set_timer(unsigned char, unsigned char) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_init_params()
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_timer(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
</UL>

<P><STRONG><a name="[a1f]"></a>RST_ico_progress()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z16RST_ico_progressv))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
</UL>

<P><STRONG><a name="[826]"></a>Radio_CheckState()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z16Radio_CheckStatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoDefaultState()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
</UL>

<P><STRONG><a name="[583]"></a>Radio_EnableBpsk(unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z16Radio_EnableBpskh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Radio_EnableBpsk(unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Init(unsigned char, unsigned short, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
</UL>

<P><STRONG><a name="[827]"></a>Radio_HandleGdo2(unsigned)</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z16Radio_HandleGdo2j))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Radio_HandleGdo2(unsigned) &rArr; Radio_HandleUnKnownGDOEvent() &rArr; Radio_LoadBpskCfg(bool, unsigned char) &rArr; Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribProcessingSend(S_Radio_ComFifo*)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleAmplifier(E_CC11XX_AMP)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleUnKnownGDOEvent()
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoDefaultState()
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[c67]"></a>Radio_ReadStatus()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z16Radio_ReadStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRFIdle()
</UL>

<P><STRONG><a name="[581]"></a>Radio_SetTxPower(signed char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z16Radio_SetTxPowera))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Radio_SetTxPower(signed char) &rArr; Radio_SetHwTxPower(signed char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetHwTxPower(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
</UL>

<P><STRONG><a name="[82e]"></a>Radio_SetWORMode(int)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z16Radio_SetWORModei))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Radio_SetWORMode(int) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetParams(unsigned char)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleAmplifier(E_CC11XX_AMP)
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoDefaultState()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[7a0]"></a>RefreshRxTimeout()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i._Z16RefreshRxTimeoutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = RefreshRxTimeout() &rArr; TIMER_ResetRFresetCounter() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ResetRFresetCounter()
</UL>
<BR>[Called By]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoReplyMessage(RX_COMMAND*, unsigned char)
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNewMessage()
</UL>

<P><STRONG><a name="[830]"></a>Refresh_GSM_Stat()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gsm_comm.o(i._Z16Refresh_GSM_Statv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Refresh_GSM_Stat() &rArr; GSM_decode_status(S_GSM_STATUS*) &rArr; GSM_JammingRestoreActions() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_gsm_data_call_on()
</UL>

<P><STRONG><a name="[39e]"></a>RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, gsm_api.o(i._Z16RegForConfRxDatahtPjPthhhhPchS1_hS1_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[832]"></a>RegForRxResponse(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, comm_stm_rx_manager.o(i._Z16RegForRxResponseh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = RegForRxResponse(unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[833]"></a>RemoveEventFromQ(sPriorityQ*, unsigned char)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, priorityq.o(i._Z16RemoveEventFromQP10sPriorityQh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RemoveEventFromQ(sPriorityQ*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPriorityQEmpty(sPriorityQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFromScheduler(void(*)(), tQ_TYPE)
</UL>

<P><STRONG><a name="[835]"></a>ResponseLegality(S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, comm_common_funcs.o(i._Z16ResponseLegalityP23S_GSM_FUNC_TABLE_HANDLEPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ResponseLegality(S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[621]"></a>RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, rfdrv_api.o(i._Z16RfDrv_ExcCommandttPhjjPFvP17OSAL_CyclicBufferEPjhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvUpdateStatus(unsigned, S_RF_ReqInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_change_frequency
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_NextCarrierDuty()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSendCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_EnterRadioTestMode(unsigned char)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitRadio(unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfWriteOperation(char*, unsigned short, unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[836]"></a>RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, rfdrv_api.o(i._Z16RfDrv_SendPackettPhtjPjhhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsSigFoxEnabled()
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfMsg()
</UL>

<P><STRONG><a name="[14b]"></a>RkpStatusBuilder(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ram_rkp.o(i._Z16RkpStatusBuilderj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RkpStatusBuilder(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ram_db.o(.constdata)
</UL>
<P><STRONG><a name="[838]"></a>RxFailureCounter(unsigned char, eRX_Failure_Cmd)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rxfailuredetector.o(i._Z16RxFailureCounterh15eRX_Failure_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RxFailureCounter(unsigned char, eRX_Failure_Cmd) &rArr; SendRxPeripheralFail(unsigned char, eDetection_source) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRxPeripheralFail(unsigned char, eDetection_source)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Input_Maintenance_processing(unsigned char*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFailureCounterAdapter(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[65d]"></a>SECURITY_IsArmed()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, security.o(i._Z16SECURITY_IsArmedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SECURITY_IsArmed()
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRFProcess(VIDEO_RF_TRANSFER_S*)
</UL>

<P><STRONG><a name="[83a]"></a>SERIAL_PDA_close()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, el_v2_driver.o(i._Z16SERIAL_PDA_closev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SERIAL_PDA_close() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_reset_state()
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_close_session()
</UL>

<P><STRONG><a name="[93e]"></a>SET_ico_progress()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z16SET_ico_progressv))
<BR><BR>[Called By]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStateChangeMsg()
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPanelCommState(PANEL_COMM_STATE_E)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[aea]"></a>SIREN_get_status(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ram_siren.o(i._Z16SIREN_get_statush))
<BR><BR>[Called By]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_device_status(U_DEV_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[6c]"></a>SMS_MESSAGE_exec()</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, sms_message.o(i._Z16SMS_MESSAGE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = SMS_MESSAGE_exec() &rArr; SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*) &rArr; is_gsm_data_call_on() &rArr; Refresh_GSM_Stat() &rArr; GSM_decode_status(S_GSM_STATUS*) &rArr; GSM_JammingRestoreActions() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_DRIVER_open()
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sms_message.o(i._Z16SMS_MESSAGE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[afe]"></a>SMS_MESSAGE_init()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sms_message.o(i._Z16SMS_MESSAGE_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[83e]"></a>SMS_MESSAGE_send(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sms_message.o(i._Z16SMS_MESSAGE_sendP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SMS_MESSAGE_send(S_MESSAGE_COMM_INFO*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_driver_mux(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[c13]"></a>SMT_IsTaskActive()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smt_api.o(i._Z16SMT_IsTaskActivev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[73b]"></a>SMT_PrintMessage(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, smt_task.o(i._Z16SMT_PrintMessagehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SMT_PrintMessage(unsigned char, unsigned char*, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2hexstr(unsigned, unsigned char*, unsigned)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[c08]"></a>SSP_SPI_SetCSLow(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssp_spi_api.o(i._Z16SSP_SPI_SetCSLowh))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[6d]"></a>SUPERVISORY_exec()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, supervisory.o(i._Z16SUPERVISORY_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_exec() &rArr; SUPERVISORY_check() &rArr; SUPERVISORY_check_rf_input(unsigned char) &rArr; SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_save_suspend(unsigned char)
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> supervisory.o(i._Z16SUPERVISORY_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[af9]"></a>SUPERVISORY_init()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, supervisory.o(i._Z16SUPERVISORY_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[841]"></a>SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, prealarm_handler.o(i._Z16SaveDelayedAlarmh23DELAYED_DEVICE_OPTION_E20E_DELAYED_VIDEO_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
</UL>

<P><STRONG><a name="[9dc]"></a>ScheduleNextScan()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_db.o(i._Z16ScheduleNextScanv))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
</UL>

<P><STRONG><a name="[bb2]"></a>SearchActivePage(Sector_Page_s*, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, internalflash_util.o(i._Z16SearchActivePageP13Sector_Page_sh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SearchActivePage(Sector_Page_s*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchActiveSectorAndPage(Sector_Page_s*)
</UL>

<P><STRONG><a name="[5ad]"></a>SendDetectionMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned char)</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, process_c_proc_messages.o(i._Z16SendDetectionMsgP21S_SEC_ZONE_ENTRY_DATAh21RF_DETECTOR_SIGNALS_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SendDetectionMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[842]"></a>SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)</STRONG> (Thumb, 626 bytes, Stack size 72 bytes, process_c_proc_messages.o(i._Z16SendEntryExitMsgP21S_SEC_ZONE_ENTRY_DATAh21RF_DETECTOR_SIGNALS_Emh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterMagnet(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart2(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart1(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexSendEntryMessages()
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
</UL>

<P><STRONG><a name="[662]"></a>SendGuardCodeMsg(CP_ARM_TYPE_E)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, process_c_proc_messages.o(i._Z16SendGuardCodeMsg13CP_ARM_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendGuardCodeMsg(CP_ARM_TYPE_E) &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomNum(unsigned long, unsigned long)
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGuardCodeFlag(bool)
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGuardCodeCycleFlag()
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGuardCodeCycleFlag()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[27e]"></a>SendI2CAckToTask(unsigned short, unsigned, unsigned short, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, i2c_func.o(i._Z16SendI2CAckToTasktjth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SendI2CAckToTask(unsigned short, unsigned, unsigned short, unsigned char) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
</UL>

<P><STRONG><a name="[578]"></a>SendKeypadPosese(unsigned char*, int, int, S_POSESO_Reply*, bool)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, process_income_message.o(i._Z16SendKeypadPosesePhiiP14S_POSESO_Replyb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SendKeypadPosese(unsigned char*, int, int, S_POSESO_Reply*, bool) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramKeyPad(unsigned char*, S_POSESO_Reply*, unsigned char)
</UL>

<P><STRONG><a name="[562]"></a>SendVideoRequest(unsigned char)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, videoengine.o(i._Z16SendVideoRequesth))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = SendVideoRequest(unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageFgPhoto()
</UL>

<P><STRONG><a name="[849]"></a>SetAccountNumber(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kpdcommandsparser.o(i._Z16SetAccountNumberPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetAccountNumber(unsigned char*) &rArr; DevicesConfigurationInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNPTParameters(unsigned char*)
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevicesConfigurationInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[8ff]"></a>SetCheckBattFlag(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i._Z16SetCheckBattFlagh))
<BR><BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
</UL>

<P><STRONG><a name="[847]"></a>SetGuardCodeFlag(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z16SetGuardCodeFlagb))
<BR><BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
</UL>

<P><STRONG><a name="[84a]"></a>SetNPTParameters(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, preparedatafortransmission.o(i._Z16SetNPTParametersPh))
<BR><BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccountNumber(unsigned char*)
</UL>

<P><STRONG><a name="[6ab]"></a>SetPacketTimeout(TimerStruct_S*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, maintenance.o(i._Z16SetPacketTimeoutP13TimerStruct_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetPacketTimeout(TimerStruct_S*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataLinkTransport()
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_get_connection_timeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_rec_packet(unsigned char*, unsigned char, E_TRANSPORTS)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_PROTOCL_MACHINE_exec()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_PROTOCL_MACHINE_exec()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[84d]"></a>SetPeriodicRetry(bool)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timer.o(i._Z16SetPeriodicRetryb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetPeriodicRetry(bool) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
</UL>

<P><STRONG><a name="[7e2]"></a>SetPosesoTimeWin(POSESO_LISTEN_TYPE_E, int, S_POSESO_Reply*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, poseso_listen.o(i._Z16SetPosesoTimeWin20POSESO_LISTEN_TYPE_EiP14S_POSESO_Reply))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[9e2]"></a>SetSafetyPending(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z16SetSafetyPendingb))
<BR><BR>[Called By]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[60c]"></a>SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, comm_common_funcs.o(i._Z16SetTableToHandleP23S_GSM_FUNC_TABLE_HANDLEhhPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleTableRow(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[2dd]"></a>SetTagReaderType(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, do_it_yourself.o(i._Z16SetTagReaderTypeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetTagReaderType(unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnPerif(int, int, int*, void*)
</UL>

<P><STRONG><a name="[84f]"></a>SetValToPrintGSM(unsigned char, bool)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, el_v2_driver.o(i._Z16SetValToPrintGSMhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SetValToPrintGSM(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SetCommPrintMode(char*, unsigned short, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEnablePrintGSM(int, int, int*, void*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleGsmPrintAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[850]"></a>StartBattHandler()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bat.o(i._Z16StartBattHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartBattHandler() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_EN_N_DIS(bool)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Battery_Above_Chargers_Threshold()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[72e]"></a>StartBootHandler(bool)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rb_app.o(i._Z16StartBootHandlerb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = StartBootHandler(bool) &rArr; INIT_set_boot_request_main(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_boot_request_main(unsigned char, bool)
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_target_is_image(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[854]"></a>StartRingProcess()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gsm_comm.o(i._Z16StartRingProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StartRingProcess() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceVerificationOption(unsigned char)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularCallOption(unsigned char)
</UL>

<P><STRONG><a name="[58e]"></a>StartSavePicture(unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, filesystemmanagment.o(i._Z16StartSavePicturePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartSavePicture(unsigned char*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[193]"></a>TEST_CommControl(char*, unsigned short, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, test_func.o(i._Z16TEST_CommControlPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TEST_CommControl(char*, unsigned short, unsigned char) &rArr; GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; GSM_StrmResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngPauseGSM(unsigned char, unsigned)
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_API_PausePstn(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>Test_DisarmPanel(char*, unsigned short, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, test_func.o(i._Z16Test_DisarmPanelPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = Test_DisarmPanel(char*, unsigned short, unsigned char) &rArr; AnnexDisarm() &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>Test_PressButton(char*, unsigned short, unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, test_func.o(i._Z16Test_PressButtonPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Test_PressButton(char*, unsigned short, unsigned char) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_SoftwareButtonPressUpdate(unsigned*, unsigned char)
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyVirtualButtonPress()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>Test_TestAllLeds(char*, unsigned short, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, test_func.o(i._Z16Test_TestAllLedsPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Test_TestAllLeds(char*, unsigned short, unsigned char) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>Test_TestButtons(char*, unsigned short, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, test_func.o(i._Z16Test_TestButtonsPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Test_TestButtons(char*, unsigned short, unsigned char) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPadLogicSetPrintMode(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[859]"></a>Timer_SendOpenRx()</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, timer.o(i._Z16Timer_SendOpenRxv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Timer_SendOpenRx() &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
</UL>

<P><STRONG><a name="[295]"></a>UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, uart_api.o(i._Z16UART_SendMessagehhhPhjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print2Uart(unsigned char*, unsigned short)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReadBatCharger(char*, unsigned short, unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicesSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReadRTC(char*, unsigned short, unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetRSSI(char*, unsigned short, unsigned char)
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PrintMode(unsigned char)
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_PrintMessage(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FinishCodecSampleOperation()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_HandleReceivedCodecSample()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteHelpOperation(char*, unsigned short, unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutBufferByInterrupt(int, char*, int)
</UL>

<P><STRONG><a name="[419]"></a>UART_SetBaudRate(unsigned char, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, uart_func.o(i._Z16UART_SetBaudRatehh))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init(unsigned char)
</UL>

<P><STRONG><a name="[85a]"></a>UDP_delete_range(unsigned char*, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, udp_app.o(i._Z16UDP_delete_rangePhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = UDP_delete_range(unsigned char*, unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[360]"></a>UpdateLedTracker(unsigned*, unsigned char, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cpui_func.o(i._Z16UpdateLedTrackerPjhh))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_InitialBlinkLedAction(unsigned*, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeOutEventInQueue(unsigned char, OSAL_PriorityQueue*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformLoopAction(unsigned*, unsigned char*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLoopTimeoutLeds(unsigned*, unsigned short)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UnsetLedBlink(unsigned char, unsigned*, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[85b]"></a>VOICE_close_call(E_VOICE_DEVICE)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, voice_manager.o(i._Z16VOICE_close_call14E_VOICE_DEVICE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = VOICE_close_call(E_VOICE_DEVICE) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DRIVER_open()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[4b5]"></a>WaitForOPDDQAcks()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, prealarm_handler.o(i._Z16WaitForOPDDQAcksv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WaitForOPDDQAcks() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
</UL>

<P><STRONG><a name="[85c]"></a>getJammDetectDur()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z16getJammDetectDurv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getJammDetectDur() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[3dd]"></a>getRFInputStatus()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_rf_input_dev.o(i._Z16getRFInputStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[439]"></a>is_video_q_empty()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, videoq.o(i._Z16is_video_q_emptyv))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msme_q()
</UL>

<P><STRONG><a name="[85d]"></a>open_LISTEN_mode()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, listen.o(i._Z16open_LISTEN_modev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = open_LISTEN_mode() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckServerOnLineFlag(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[85e]"></a>phone_driver_mux(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, dial_phone_num.o(i._Z16phone_driver_muxP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = phone_driver_mux(S_MESSAGE_COMM_INFO*) &rArr; JD_MESSAGE_send(S_MESSAGE_COMM_INFO*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_open_call(unsigned char*)
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIDEO_channel_select(S_MESSAGE_COMM_INFO*, COMMUNICATION_CHANNEL_E)
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_send(S_MESSAGE_COMM_INFO*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_exec()
</UL>

<P><STRONG><a name="[ea]"></a>progSendPerifCfg(int, int, int*, void*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, kpdprogs.o(i._Z16progSendPerifCfgiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = progSendPerifCfg(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[432]"></a>ram_key_fob_init(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ram_key_fob.o(i._Z16ram_key_fob_inith))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2d8]"></a>start_auto_learn(C_DEV_TYPE_E)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, do_it_yourself.o(i._Z16start_auto_learn12C_DEV_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = start_auto_learn(C_DEV_TYPE_E) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_keyfob(unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnNPT(int, int, int*, void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKPD(int, int, int*, void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnSiren(int, int, int*, void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnPerif(int, int, int*, void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnInput(int, int, int*, void*)
</UL>

<P><STRONG><a name="[24c]"></a>ActivateCRC32Calc()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, processflash.o(i._Z17ActivateCRC32Calcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ActivateCRC32Calc() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRC32(unsigned long, unsigned long)
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Internal_Flash_CRC()
</UL>

<P><STRONG><a name="[860]"></a>AddDevicesPerUser(unsigned short, unsigned short*, unsigned char*, bool)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, apicopyuiprocessing.o(i._Z17AddDevicesPerUsertPtPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = AddDevicesPerUser(unsigned short, unsigned short*, unsigned char*, bool) &rArr; AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool) &rArr; CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddKfCUIUser(unsigned short, unsigned short*)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPinCUIUser(unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyUsersByDevices(unsigned char*, bool)
</UL>

<P><STRONG><a name="[94]"></a>AddEntityCmd_exec()</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, apistatemachines.o(i._Z17AddEntityCmd_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = AddEntityCmd_exec() &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAddEntity()
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsItLastPacket(unsigned char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> apipckprocessing.o(i._Z14ResetAddEntityv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[865]"></a>AddPacket2Collect(unsigned char*, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, deviceupdatemachine.o(i._Z17AddPacket2CollectPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddPacket2Collect(unsigned char*, unsigned char) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[866]"></a>AddPacketToLogger(unsigned char*, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, incomingbufferparser.o(i._Z17AddPacketToLoggerPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddPacketToLogger(unsigned char*, unsigned char) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[867]"></a>AddVideoDetection(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, process_income_message.o(i._Z17AddVideoDetectionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddVideoDetection(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
</UL>
<BR>[Called By]<UL><LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[714]"></a>Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, videoengine.o(i._Z17Add_video_request17SEQUENCER_LABEL_Eh13U_VIDEO_FLAGSh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexEntry()
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_ivds()
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpddAckReceived(unsigned char, unsigned char, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngineSendConfig(int, int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoRequest(unsigned char)
</UL>

<P><STRONG><a name="[140]"></a>AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, annex.o(i._Z17AnnexDelayedAlarmi21RF_DETECTOR_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Entry_Exit_Beeps(unsigned char)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> annex.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>AnnexInstantAlarm(int, RF_DETECTOR_SIGNALS_E)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, annex.o(i._Z17AnnexInstantAlarmi21RF_DETECTOR_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = AnnexInstantAlarm(int, RF_DETECTOR_SIGNALS_E) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartAlarm()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> annex.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>AnnexInvalidAlarm(int, RF_DETECTOR_SIGNALS_E)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, annex.o(i._Z17AnnexInvalidAlarmi21RF_DETECTOR_SIGNALS_E))
<BR>[Address Reference Count : 1]<UL><LI> annex.o(.constdata)
</UL>
<P><STRONG><a name="[327]"></a>AnnexWriteArmFlag(bool, bool)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, annex.o(i._Z17AnnexWriteArmFlagbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = AnnexWriteArmFlag(bool, bool) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
</UL>

<P><STRONG><a name="[86a]"></a>BuildVirusMessage(unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cybermachine.o(i._Z17BuildVirusMessagePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = BuildVirusMessage(unsigned char*) &rArr; VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char) &rArr; PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned) &rArr; aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCyberCheckSum(unsigned char*)
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusPayload(unsigned char*)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Config(TVirusCryptObj*, unsigned)
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Open(TVirusCryptObj*)
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
</UL>

<P><STRONG><a name="[86b]"></a>BuildVirusPayload(unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cybermachine.o(i._Z17BuildVirusPayloadPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BuildVirusPayload(unsigned char*) &rArr; CreateTimeStamp(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortRand()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimeStamp(unsigned char*)
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCyberPanelSerialNumber(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusMessage(unsigned char*)
</UL>

<P><STRONG><a name="[a6b]"></a>CLOCK_clear_count()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i._Z17CLOCK_clear_countv))
<BR><BR>[Called By]<UL><LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[3b6]"></a>CLOCK_init_params(unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i._Z17CLOCK_init_paramshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_init_params(unsigned char, unsigned char) &rArr; CLOCK_set_time(unsigned char*) &rArr; RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_STRING_ptr(unsigned short)
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DATE_STRING_ptr(unsigned short)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_set_time(unsigned char*)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_set_date(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[249]"></a>CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, codec_api.o(i._Z17CODEC_SetRegisterhthPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_UpdatePendingRequestCounters(unsigned char, signed char)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetNumOfPendingRequests()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*)
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_DisconnectPCMOutput(int, unsigned char, unsigned*)
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_AutoMicrophoneGain(unsigned char, unsigned char, unsigned*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*)
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_PowerOnOff(int, unsigned char, unsigned*)
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetSpkVol(signed char, unsigned char, unsigned*)
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_MicOnOff(int, unsigned char, unsigned*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_Init(unsigned char)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
</UL>

<P><STRONG><a name="[1bf]"></a>CPUI_GetAlarmLeds(unsigned*)</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, cpui_func.o(i._Z17CPUI_GetAlarmLedsPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CPUI_GetAlarmLeds(unsigned*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[346]"></a>CPUI_ResetTracker(unsigned*, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cpui_func.o(i._Z17CPUI_ResetTrackerPjh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[872]"></a>CP_set_codec_mode(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, control_panel.o(i._Z17CP_set_codec_modei))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CP_set_codec_mode(int) &rArr; CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[873]"></a>C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 2524 bytes, Stack size 72 bytes, c_proc.o(i._Z17C_PROC_decode_msgPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char) &rArr; C_PROC_process_MESSAGE(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*, bool) &rArr; C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E) &rArr; PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRSSIValue(int, int, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetSNMemoryEntry(unsigned char, unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_done()
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanOneCellFromServerKeyFogTable(unsigned char)
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_app_got_const_table_bit()
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_auto_learn_got_const_table()
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_deployment_key(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_switched_POSESO(bool)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RefreshJDSupervision()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ALL_walk_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTemperatureReading(unsigned char)
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_clear_page_counter()
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingBypassToChannel(int)
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_handler(unsigned char*, unsigned char)
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_MESSAGE(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*, bool)
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_GetCyberFlags()
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_entry(unsigned char)
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RPC_device_id()
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoVideoDone(unsigned char, unsigned char)
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_close_session(RPC_RESULT_E)
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFailureCounter(unsigned char, eRX_Failure_Cmd)
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeEntityID(unsigned short)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpddAckReceived(unsigned char, unsigned char, bool)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_rpc_ack(unsigned short)
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBootResults(bool)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_Q_init()
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoDone(unsigned char, unsigned char)
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_camera_cover_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_BIT_Result_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_SKC_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_Fog_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_Ask4TimeStamp(unsigned char*)
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceTemperatureReading(unsigned char, unsigned char, unsigned char)
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_config_resp(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_OPDI_status(unsigned char*)
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartJammingHandler(bool)
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAttackDbUpdate(C_PROC_2_A_MESSAGE_E, C_DEV_TYPE_E, unsigned char)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_RSSI2RLQ(int)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_ack(C_PROC_ACK_E)
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWcalculation(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[76d]"></a>CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*)</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, apicmdprocessing.o(i._Z17CheckAndAddEntitytP11rules_arg_thP17FitEntitiesList_tPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*) &rArr; CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add2List(unsigned char, unsigned char, unsigned char, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntities2List(rules_arg_t*, FitEntitiesList_t*, unsigned short*)
</UL>

<P><STRONG><a name="[94c]"></a>Clean_RF_FG_Table()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z17Clean_RF_FG_Tablev))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[935]"></a>ClosePhoneNumFunc()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dial_phone_num.o(i._Z17ClosePhoneNumFuncv))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
</UL>

<P><STRONG><a name="[782]"></a>CopyPrivilege2CUI(unsigned short, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, apicopyuiprocessing.o(i._Z17CopyPrivilege2CUItt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CopyPrivilege2CUI(unsigned short, unsigned short) &rArr; WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[5f4]"></a>DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*)</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, dma_api.o(i._Z17DMA_ChannelConfighhhhhtjjhhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*) &rArr; OSAL_GetSelfTaskId()
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendTxBufferMsgByInterrupt(unsigned, unsigned char, unsigned char*, unsigned)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_HandleReceivedCodecSample()
</UL>

<P><STRONG><a name="[5f7]"></a>DMA_ChannelEnable(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma_api.o(i._Z17DMA_ChannelEnableh))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
</UL>

<P><STRONG><a name="[8a6]"></a>FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, flash_api.o(i._Z17FLASH_SectorErasehtjhPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MultipleSectorErase(unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteFlashErase(char*, unsigned short, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Flash_Sectors_Range_exec()
</UL>

<P><STRONG><a name="[317]"></a>FL_PHONE_NUM_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z17FL_PHONE_NUM_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_PHONE_NUM_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_comm_dest_JD_config(unsigned char*, void*)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_phone_comm_type(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[816]"></a>FindFirstTRTamper()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ram_rf_sec_zone.o(i._Z17FindFirstTRTamperv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FindFirstTRTamper() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[8a7]"></a>Flash_WriteEnable(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flash_func.o(i._Z17Flash_WriteEnableh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Flash_WriteEnable(unsigned char) &rArr; Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorEraseFunc(unsigned char, unsigned)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_BulkEraseFunc(unsigned char)
</UL>

<P><STRONG><a name="[606]"></a>FreeGsmStmLsnInfo(S_GSM_STM_LSN_INFO*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsm_stm_listen.o(i._Z17FreeGsmStmLsnInfoP18S_GSM_STM_LSN_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeGsmStmLsnInfo(S_GSM_STM_LSN_INFO*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
</UL>

<P><STRONG><a name="[6dc]"></a>FreeGsmStmMsgInfo(S_GSM_STM_MSG_INFO*)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gsm_stm_message.o(i._Z17FreeGsmStmMsgInfoP18S_GSM_STM_MSG_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeGsmStmMsgInfo(S_GSM_STM_MSG_INFO*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
</UL>

<P><STRONG><a name="[831]"></a>GSM_decode_status(S_GSM_STATUS*)</STRONG> (Thumb, 820 bytes, Stack size 32 bytes, gsm_comm.o(i._Z17GSM_decode_statusP12S_GSM_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = GSM_decode_status(S_GSM_STATUS*) &rArr; GSM_JammingRestoreActions() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsRegFailure()
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsFailure()
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsMuxOn()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventActive(unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_set_codec_mode(int)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_get_state()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_SendSTUNIfConfigured()
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_comm_status()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetListenOnlineStatus()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_GSM_ClassB_on()
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPdaPlugedOut()
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_JammingRestoreActions()
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_start()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_voice(bool)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_STATUS_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_GSM_Stat()
</UL>

<P><STRONG><a name="[6ba]"></a>GSM_get_gsm_level()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm_comm.o(i._Z17GSM_get_gsm_levelv))
<BR><BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_receive_call(E_VOICE_DEVICE)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[8b0]"></a>G_PROC_INIT_start()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gsm_comm.o(i._Z17G_PROC_INIT_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = G_PROC_INIT_start() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[8b2]"></a>G_PROC_decode_msg(unsigned char*, unsigned char)</STRONG> (Thumb, 1156 bytes, Stack size 64 bytes, gsm_comm.o(i._Z17G_PROC_decode_msgPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = G_PROC_decode_msg(unsigned char*, unsigned char) &rArr; VOICE_DTMF_handler(unsigned char) &rArr; OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetFwUpRecovery()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPoseseICI()
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_Task_IsReadyToGetFile()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventActive(unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_set_codec_mode(int)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexAlarm()
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageDuringVoiceAvailable()
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_get_state()
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_rec_packet(unsigned char*, unsigned char, E_TRANSPORTS)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_SendSTUNIfConfigured()
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_Message_LastSTUNWasACKed()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoCommMachineIdle()
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_receive_call(E_VOICE_DEVICE)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGSMAudioConfig(unsigned char, unsigned char)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPdaPlugedOut()
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParserState()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_JammingRestoreActions()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreAlarmStatus()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_voice(bool)
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff_ForModems()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init(unsigned char*, bool)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_switched_POSESO(bool)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingBypassToChannel(int)
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_handler(unsigned char*, unsigned char)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_IsPanelRFJammed()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[a7f]"></a>Get220FaultStatus()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main_power.o(i._Z17Get220FaultStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[b72]"></a>GetBootReqApprove(unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, incomingbufferparser.o(i._Z17GetBootReqApprovePh))
<BR><BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Input_RSU_processing(unsigned char*)
</UL>

<P><STRONG><a name="[2f6]"></a>GetCoreSubVersion()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintenance.o(i._Z17GetCoreSubVersionv))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIridiumVersion(unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[917]"></a>GetCurrentFileIVD()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z17GetCurrentFileIVDv))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
</UL>

<P><STRONG><a name="[92b]"></a>GetDeviceGlobalID(unsigned char*, int)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z17GetDeviceGlobalIDPhi))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
</UL>

<P><STRONG><a name="[8bc]"></a>GetDeviceInfoResp(unsigned char*)</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, incomingbufferparser.o(i._Z17GetDeviceInfoRespPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = GetDeviceInfoResp(unsigned char*) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTypedecode()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Input_Maintenance_processing(unsigned char*)
</UL>

<P><STRONG><a name="[2c0]"></a>GetFileSizeOffset()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filehandler.o(i._Z17GetFileSizeOffsetv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[9b5]"></a>GetIncomeSmsState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, process_income_message.o(i._Z17GetIncomeSmsStatev))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[abd]"></a>GetManufStructPtr()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, c_proc.o(i._Z17GetManufStructPtrv))
<BR><BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
</UL>

<P><STRONG><a name="[84e]"></a>GetModuleTableRow(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, comm_common_funcs.o(i._Z17GetModuleTableRowh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetModuleTableRow(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommandsTable(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicited(char*, unsigned short)
</UL>

<P><STRONG><a name="[2e3]"></a>GetPlasticVersion()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, init.o(i._Z17GetPlasticVersionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPlasticVersion() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftButtonAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmsSendTtrOpenBackTamper()
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_delay_full_or_part_force_arm_4_open_zone_proc(unsigned char, ERROR_E*)
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_ARM_request(S_KEY_FOB*, KEY_FOB_REQUESTS_E, unsigned char, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[7a6]"></a>GetPowerStructPtr()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_power.o(i._Z17GetPowerStructPtrv))
<BR><BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[7cd]"></a>GetPreAlarmStatus()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z17GetPreAlarmStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entry_Exit_Beeps_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a29]"></a>GetVoiceStartFlag()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gsm_voice.o(i._Z17GetVoiceStartFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[8be]"></a>Get_Condensed_RTC(unsigned char*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, preparedatafortransmission.o(i._Z17Get_Condensed_RTCPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Condensed_RTC(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6ed]"></a>GetlInactivityWin()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, inactivity.o(i._Z17GetlInactivityWinv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetlInactivityWin() &rArr; CONTROL_PANEL_get_sysinactivity_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysinactivity_ptr()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[8bf]"></a>GoToRsuDelayState(DEVICE_REMOTE_UPDATE_STATE_E)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, deviceupdatemachine.o(i._Z17GoToRsuDelayState28DEVICE_REMOTE_UPDATE_STATE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GoToRsuDelayState(DEVICE_REMOTE_UPDATE_STATE_E) &rArr; TimerSetTimeout(SYS_TASK*, unsigned) &rArr; SetSystemTask(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[30c]"></a>GsmGetFirmWareVer()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gsm_api.o(i._Z17GsmGetFirmWareVerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GsmGetFirmWareVer() &rArr; OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_QueryGsmVersion(char*, unsigned short, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[8c0]"></a>GsmSetServerTimer()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sms_message.o(i._Z17GsmSetServerTimerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GsmSetServerTimer() &rArr; CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
</UL>
<BR>[Called By]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[12d]"></a>Gsm_STM_Streaming(void*)</STRONG> (Thumb, 2248 bytes, Stack size 32 bytes, gsm_stm_streaming.o(i._Z17Gsm_STM_StreamingPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Gsm_STM_Streaming(void*) &rArr; GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char) &rArr; GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetNumOfPendingRequests(unsigned char)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortForceMutexRelease(unsigned*)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnTransparency(unsigned)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTableHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned short, unsigned short)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCapture(unsigned*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlClearResetCounter()
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageFullCycle()
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngRegForCommTask(unsigned char, unsigned short)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnFullTransparency(unsigned)
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrmSendAckToOrigTask(unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrmSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsActivatedOdmSocket()
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmStrmInfo(S_GSM_STM_STRM_INFO*)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Control_Write_Status(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>HAL_ResetWatchdog()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_api.o(i._Z17HAL_ResetWatchdogv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ResetWatchdog() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegacyFunc()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>HE910_ExtructData(unsigned char, char*, char**, unsigned short)</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, gsm_module_funcs_he910.o(i._Z17HE910_ExtructDatahPcPS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HE910_ExtructData(unsigned char, char*, char**, unsigned short) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2String(char*, char*, unsigned short)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[5be]"></a>IOS_Go_Power_Save(bool)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardware_vf.o(i._Z17IOS_Go_Power_Saveb))
<BR><BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemGoPowerDown()
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp()
</UL>

<P><STRONG><a name="[8c6]"></a>IP_ABORT_time_out()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ip_app.o(i._Z17IP_ABORT_time_outv))
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_ABORT_time_out()
</UL>

<P><STRONG><a name="[8c7]"></a>IncomeNewProtocol(unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, incomingbufferparser.o(i._Z17IncomeNewProtocolPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = IncomeNewProtocol(unsigned char*) &rArr; RF_Input_Maintenance_processing(unsigned char*) &rArr; GetDeviceInfoResp(unsigned char*) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEGCheckCRC(unsigned char*)
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Input_configuration_processing(unsigned char*)
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Input_Maintenance_processing(unsigned char*)
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Input_general_processing(unsigned char*)
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Input_RSU_processing(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[77]"></a>InitSecurity_exec()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, security.o(i._Z17InitSecurity_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = InitSecurity_exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> security.o(i._Z17InitSecurity_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[8cd]"></a>InsertSecStateToQ()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, security.o(i._Z17InsertSecStateToQv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = InsertSecStateToQ() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[560]"></a>InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, msme_q.o(i._Z17InsetMsmeEventToQ16S_MSME_MSG_EVENTh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMsmeprocLocationInPool()
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[773]"></a>IsAttackTypeValid(EAttackType)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cyberattackstates.o(i._Z17IsAttackTypeValid11EAttackType))
<BR><BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool)
</UL>

<P><STRONG><a name="[774]"></a>IsDeviceTypeValid(C_DEV_TYPE_E)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cyberattackstates.o(i._Z17IsDeviceTypeValid12C_DEV_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool)
</UL>

<P><STRONG><a name="[34e]"></a>IsIncludedInGroup(unsigned short, unsigned short*, unsigned char*)</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, cpui_func.o(i._Z17IsIncludedInGrouptPtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsIncludedInGroup(unsigned short, unsigned short*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[8cf]"></a>IsLeftDateSmaller(unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, util.o(i._Z17IsLeftDateSmallerPhS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IsLeftDateSmaller(unsigned char*, unsigned char*, unsigned char) &rArr; CLOCK_get_time_date(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookForTheOldstFile_exec()
</UL>

<P><STRONG><a name="[b1c]"></a>IsNeedMorePackets(unsigned char*, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, deviceupdatemachine.o(i._Z17IsNeedMorePacketsPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsNeedMorePackets(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[843]"></a>IsPerimeterMagnet(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z17IsPerimeterMagnetP21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_restore_msg(unsigned char)
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_active_msg(unsigned char)
</UL>

<P><STRONG><a name="[9c1]"></a>IsPeriodicSession()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, msme.o(i._Z17IsPeriodicSessionv))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[99d]"></a>IsReadyTimerBlock(unsigned char*, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cyberattackstates.o(i._Z17IsReadyTimerBlockPhh))
<BR><BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementExec(TAttackDataBase*, bool)
</UL>

<P><STRONG><a name="[bd1]"></a>IsSlaveLearnRfMsg(unsigned char*, bool)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z17IsSlaveLearnRfMsgPhb))
<BR><BR>[Called By]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EarlyPacketFiltering(unsigned char*)
</UL>

<P><STRONG><a name="[7ad]"></a>KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, key_fob.o(i._Z17KEY_FOB_build_msg17KEY_FOB_MESSAGE_E16U_KEY_FOB_PARAMSPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8d0]"></a>KpdCommandsParser()</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, kpdcommandsparser.o(i._Z17KpdCommandsParserv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KpdCommandsParser() &rArr; StartSendCmd(unsigned char*, bool) &rArr; InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveReplaceUserTypeAndNumber(unsigned char)
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshPincode(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[6f7]"></a>MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, message.o(i._Z17MESSAGE_build_msgPhP19S_MESSAGE_COMM_INFOb))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool) &rArr; Message_BuildSimNumberHex(unsigned char*, unsigned char*) &rArr; decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_BuildSimNumberHex(unsigned char*, unsigned char*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_SD_chsum(unsigned char*, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[6be]"></a>MP_EX_EEPROM_read(unsigned char*, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, maintenance.o(i._Z17MP_EX_EEPROM_readPhS_hh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = MP_EX_EEPROM_read(unsigned char*, unsigned char*, unsigned char, unsigned char) &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[8d5]"></a>Modem_ParseSmsMsg(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned char, MODEM*)</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, comm_common_funcs.o(i._Z17Modem_ParseSmsMsghP23S_GSM_FUNC_TABLE_HANDLEPchP5MODEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Modem_ParseSmsMsg(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned char, MODEM*) &rArr; ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[8c5]"></a>OSAL_Ascii2String(char*, char*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, osal_services.o(i._Z17OSAL_Ascii2StringPcS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_Ascii2String(char*, char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2Digit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructData(unsigned char, char*, char**, unsigned short)
</UL>

<P><STRONG><a name="[29f]"></a>OSAL_HeapAllocMsg()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, osal_heap.o(i._Z17OSAL_HeapAllocMsgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSAL_HeapAllocMsg() &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToFlashManager(unsigned short, S_FLASH_TransferReqInfo*)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFlashAckToTask(unsigned short, unsigned, unsigned short, unsigned char)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendI2CAckToTask(unsigned short, unsigned, unsigned short, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartAckToTask(unsigned short, unsigned, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_End_TCP_Full_Msg_Cycle()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_DetachGprs(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxEndIndication(unsigned char)
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxResponse(unsigned char)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnTransparency(unsigned)
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnToTaskWithState(unsigned char, unsigned short, E_GSM_REPLY_STATUS_MESSAGE)
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyVirtualButtonPress()
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyPinPressed(unsigned short)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg2RfTask(unsigned short, void*)
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvExtractFromQ(OSAL_PriorityQueue*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_StartStopRegDebounceTimer(unsigned)
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_StrmResetStmFlags()
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MsgResetStmFlags()
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LsnResetStmFlags()
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetAudioConfiguration(unsigned char, unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[c35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendEndOfSession(unsigned char)
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendEndOfSession(unsigned char)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallClose(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallDial(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_CloseOdmGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_AnswerCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendSMS(unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngPauseGSM(unsigned char, unsigned)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_End_CSD_Full_Msg_Cycle()
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetGsmStatus(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngRegForCommTask(unsigned char, unsigned short)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnFullTransparency(unsigned)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnMuxParser(unsigned)
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrmSendAckToOrigTask(unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrmSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LsnSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LsnSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TimerChangePause(unsigned short, unsigned char)
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimerExt(unsigned short, unsigned char)
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_SendAckUpdateStatus(S_VAT_Info*, unsigned short, unsigned char)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_SessionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStop(unsigned char, unsigned char, unsigned*)
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_SendApplicationTestOpenningMsg(unsigned char)
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationDeactivate()
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationActivate()
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_CalcCRCFromFlash()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskCallBack(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_Task_API_FTPGetFile(char*, char*, char*, char*, char*, void*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyLoopIterationState(unsigned char, unsigned short)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerAckToTask(S_TimerInfo*)
</UL>

<P><STRONG><a name="[280]"></a>OSAL_HeapFreeBuff(unsigned**)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, osal_heap.o(i._Z17OSAL_HeapFreeBuffPPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_FreeDebugBuffer()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferDelete(OSAL_CyclicBuffer*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveIpUnnecessaryZeros(unsigned char, unsigned char**, unsigned char*, unsigned short*)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ParseSmsMsg(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned char, MODEM*)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvExtractFromQ(OSAL_PriorityQueue*)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*)
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMsgBuffers(unsigned, unsigned, S_RF_ReqInfo*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttributeReleaseTxBuffers(S_Radio_ComFifo*)
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleUnKnownGDOEvent()
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnableBpsk(unsigned char)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDelete(OSAL_PriorityQueue*)
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char)
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQMemCopy(OSAL_PriorityQueue*, unsigned char*, unsigned, S_COMM_STM_RX_MNG_BUFFER_WITH_LEN**)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMsgFromMuxQ(OSAL_PriorityQueue*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMsgFromQ(OSAL_PriorityQueue*)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQ(OSAL_PriorityQueue*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmStrmInfo(S_GSM_STM_STRM_INFO*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmMsgInfo(S_GSM_STM_MSG_INFO*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmLsnInfo(S_GSM_STM_LSN_INFO*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGsmStmCtrlInfo(S_GSM_STM_CTRL_INFO*, unsigned)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmConfig(char*, unsigned char, char*, unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructData(unsigned char, char*, char**, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_free
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDeleteTail(OSAL_List*)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDelete(OSAL_List*)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FreeDecoder(S_VatTaskGlobalData*)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short)
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print2Uart(unsigned char*, unsigned short)
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Erase()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfStopCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSendCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicesSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitDone(unsigned char)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_FreeInfoBuffers(S_RSU_MANAGER_INFO*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_FreeStackFromDeletedTasks()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_PrintMessage(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FinishCodecSampleOperation()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_HandleReceivedCodecSample()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_off()
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDeleteHead(OSAL_List*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceBatteryInfReq_exec()
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_close()
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_drop_packet_processed()
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_copybuf()
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_frame()
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_free_buffer(unsigned char*)
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_nack()
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryDeleteAttackDb()
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetGsmEventToQ(unsigned char*)
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_G_PROC_EVENT()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGSMAudioConfig(unsigned char, unsigned char)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceVerificationOption(unsigned char)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpyModeOption(unsigned char)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RejectOption(unsigned char)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookForTheOldstFile_exec()
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_ReceiveNewRFProtocolPacket(unsigned char*)
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_RF_PROC_EVENT()
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_C_PROC_EVENT()
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoBuffer(unsigned char*)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages_exec()
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage_exec()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions_exec()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInf_exec()
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_alloc_interim_buffer(unsigned char**, unsigned)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_DEV_TYPE_send_msg(unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeveFileName_exec()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_off()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_off()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_APP_off()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_decode_command(unsigned char*)
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_off()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_fail()
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_done()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoFailRetrieve_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerKeyRequest_exec()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdatesMachine()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFail_Exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_send_packet_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardPinCode()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigFoxEnDis(unsigned char, unsigned char)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfMsg()
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_Open_data_connection(unsigned char*)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_save_params()
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_ack(unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertSecStateToQ()
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemovePdaRxBuffer()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Specific_Device_Machine_Exec()
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageFgPhoto()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Config(TVirusCryptObj*, unsigned)
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseRFTransferEvent(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseVideoCommEvent(VIDEO_COMM_SESSION_S*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetRfEventToQ(unsigned char*, bool)
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetModifyHandler()
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAddEntity()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPackProc()
</UL>

<P><STRONG><a name="[8d6]"></a>OSAL_StopTimerExt(unsigned short, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, osal_time_mng.o(i._Z17OSAL_StopTimerExtth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSAL_StopTimerExt(unsigned short, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_StartStopJamDetectTimer(unsigned)
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_StopModemGsmStatus()
</UL>

<P><STRONG><a name="[b87]"></a>OSAL_String2Ascii(char*, char*, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, osal_services.o(i._Z17OSAL_String2AsciiPcS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSAL_String2Ascii(char*, char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[5c5]"></a>OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, osal_task_util.o(i._Z17OSAL_TaskBusyPollPVjjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned) &rArr; OSAL_PortSuspendTask(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_HE910_Module_PowerUp(unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_set_nv_mem
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_get_nv_mem
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_change_frequency
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[3d3]"></a>PDA_ResetReceiver()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_pdaprocess.o(i._Z17PDA_ResetReceiverv))
<BR><BR>[Called By]<UL><LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_Init()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_ReadMsg()
</UL>

<P><STRONG><a name="[8d7]"></a>Pda_alloc_RX_buff()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_pdaprocess.o(i._Z17Pda_alloc_RX_buffv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pda_alloc_RX_buff() &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[457]"></a>PerimeterWasAlarm()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z17PerimeterWasAlarmv))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[8b]"></a>PowerHandler_exec()</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, main_power.o(i._Z17PowerHandler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = PowerHandler_exec() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main_power.o(i._Z17PowerHandler_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[8d8]"></a>PrivateParamsInit(TAttackDataBase*)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, cyberattackstates.o(i._Z17PrivateParamsInitP15TAttackDataBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PrivateParamsInit(TAttackDataBase*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateLockoutParamsReset(TAttackDataBase*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementConfig(TAttackDataBase*, C_DEV_TYPE_E, unsigned char, EAttackState)
</UL>

<P><STRONG><a name="[a14]"></a>PublicParamsReset(TAttackDataBase*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cyberattackstates.o(i._Z17PublicParamsResetP15TAttackDataBase))
<BR><BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementClose(TAttackDataBase*)
</UL>

<P><STRONG><a name="[8da]"></a>RB_program_target(U_UINT32*, unsigned char, unsigned char)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, rb_app.o(i._Z17RB_program_targetP8U_UINT32hh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RB_program_target(U_UINT32*, unsigned char, unsigned char) &rArr; RB_PROGARM_TARGET_build_frame(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned long) &rArr; calc_chksum(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PROGARM_TARGET_build_frame(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_COMMAND_wait_for_comm(unsigned char*)
</UL>

<P><STRONG><a name="[8c8]"></a>RFApiVSEGCheckCRC(unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rfapivseg.o(i._Z17RFApiVSEGCheckCRCPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RFApiVSEGCheckCRC(unsigned char*) &rArr; RfApi_CRC16(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApi_CRC16(void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_NewProtocolCalcCrc(unsigned char*, bool, bool, bool)
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeRx(unsigned char*)
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomeNewProtocol(unsigned char*)
</UL>

<P><STRONG><a name="[f6]"></a>RING_process_exec()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, gsm_comm.o(i._Z17RING_process_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RING_process_exec() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetRingIndication()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gsm_comm.o(i._Z17RING_process_execv)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[8fb]"></a>RKP_update_status()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z17RKP_update_statusv))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_clear_annex_alarm_in_memory()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_SAFETY_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_perimeter_arm_status(unsigned char)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_bat_status(unsigned char)
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_maintenance_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[882]"></a>RPC_close_session(RPC_RESULT_E)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rpc.o(i._Z17RPC_close_session12RPC_RESULT_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RPC_close_session(RPC_RESULT_E) &rArr; C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
</UL>

<P><STRONG><a name="[646]"></a>RSU_GetDeviceType(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rsu_task.o(i._Z17RSU_GetDeviceTypeh))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[728]"></a>RSU_SendPoseseICI()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rsu_task.o(i._Z17RSU_SendPoseseICIv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RSU_SendPoseseICI() &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2ed]"></a>RTC_GetRTC_Ticker()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtc_api.o(i._Z17RTC_GetRTC_Tickerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_GetRTC_Ticker() &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_Ask4TimeStamp(unsigned char*)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[649]"></a>Radio_FillPaTable()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z17Radio_FillPaTablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Radio_FillPaTable() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FullInit()
</UL>

<P><STRONG><a name="[829]"></a>Radio_LoadBpskCfg(bool, unsigned char)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z17Radio_LoadBpskCfgbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Radio_LoadBpskCfg(bool, unsigned char) &rArr; Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetModulation(unsigned char)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetPacketLengthCfg(unsigned char, E_CC11XX_Packet_Length_Cfg)
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetBaudRate(E_CC11XX_ModemBaudRate)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetTxPower(signed char)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetTxGain(unsigned char)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleUnKnownGDOEvent()
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RestoreEcopRf1Cfg()
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
</UL>

<P><STRONG><a name="[8e0]"></a>Radio_SendBpskMsg(unsigned char*, unsigned)</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, cc11xxdrv.o(i._Z17Radio_SendBpskMsgPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Radio_SendBpskMsg(unsigned char*, unsigned) &rArr; Radio_LoadBpskCfg(bool, unsigned char) &rArr; Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FlushFifo(unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadNextBpskSymbol()
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq_FSCAL(unsigned char*, unsigned char*)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendMsg(unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[8dd]"></a>Radio_SetBaudRate(E_CC11XX_ModemBaudRate)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z17Radio_SetBaudRate22E_CC11XX_ModemBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_SetBaudRate(E_CC11XX_ModemBaudRate) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
</UL>

<P><STRONG><a name="[b6]"></a>RdParamTable_exec()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rpc.o(i._Z17RdParamTable_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = RdParamTable_exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rpc.o(i._Z17RdParamTable_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[3ac]"></a>RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, key_fob.o(i._Z17RemoveOpenZoneLed16U_KEY_FOB_PARAMS17KEY_FOB_MESSAGE_EP22KEY_FOB_SYSTEM_STATE_SP20KEY_FOB_LEDS_STATE_Sb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool) &rArr; SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; SECURITY_zone_partition(SECURITY_PARTITION_TYPE_E, unsigned char, E_DETECTOR_SCAN_MODE, unsigned char*, unsigned char*) &rArr; RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
</UL>

<P><STRONG><a name="[8e2]"></a>RemovePdaRxBuffer()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_pdaprocess.o(i._Z17RemovePdaRxBufferv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RemovePdaRxBuffer() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
</UL>

<P><STRONG><a name="[8e3]"></a>RfApiVSEGDecodeRx(unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, rfapivseg.o(i._Z17RfApiVSEGDecodeRxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = RfApiVSEGDecodeRx(unsigned char*) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEGCheckCRC(unsigned char*)
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceData(unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetMultiGenTypeSlaveLearnType(unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_FindCommandInRfTable(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[8e8]"></a>RfDrvExtractFromQ(OSAL_PriorityQueue*)</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rfdrv_func.o(i._Z17RfDrvExtractFromQP18OSAL_PriorityQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = RfDrvExtractFromQ(OSAL_PriorityQueue*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[2a1]"></a>RfDrvUpdateStatus(unsigned, S_RF_ReqInfo*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfdrv_func.o(i._Z17RfDrvUpdateStatusjP12S_RF_ReqInfo))
<BR><BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[2b4]"></a>RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rfdrv_api.o(i._Z17RfDrv_ExcCommand1tjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char) &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetAttenuation(char*, unsigned short, unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetPowerMode(char*, unsigned short, unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetFrequency(char*, unsigned short, unsigned char)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfStopCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetTxPower(char*, unsigned short, unsigned char)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSetCarrierSense(char*, unsigned short, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPower(unsigned char)
</UL>

<P><STRONG><a name="[117]"></a>RightButtonAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z17RightButtonActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RightButtonAction(S_CPUI_ButtonInfo*) &rArr; RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*) &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[54a]"></a>RxMngGetbufferLen(unsigned char*, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, comm_stm_rx_manager.o(i._Z17RxMngGetbufferLenPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RxMngGetbufferLen(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2Digit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegEnd(unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[b2c]"></a>SIREN_open_tamper()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_siren.o(i._Z17SIREN_open_tamperv))
<BR><BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_tamper()
</UL>

<P><STRONG><a name="[25d]"></a>SSP_SPI_SetCSHigh(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssp_spi_api.o(i._Z17SSP_SPI_SetCSHighh))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init(unsigned char, unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[469]"></a>SSP_WaitIsNotBusy(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssp_spi_api.o(i._Z17SSP_WaitIsNotBusyh))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData(unsigned char, unsigned char*, unsigned)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorEraseFunc(unsigned char, unsigned)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_BulkEraseFunc(unsigned char)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
</UL>

<P><STRONG><a name="[840]"></a>SUPERVISORY_check()</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, supervisory.o(i._Z17SUPERVISORY_checkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_check() &rArr; SUPERVISORY_check_rf_input(unsigned char) &rArr; SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_sirens()
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_kpd()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_exec()
</UL>

<P><STRONG><a name="[591]"></a>SendCameraCommand(void*, unsigned char, unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, videoengine.o(i._Z17SendCameraCommandPvhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SendCameraCommand(void*, unsigned char, unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraTypeForLog(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[8ee]"></a>SendEntryMessages(unsigned char, bool)</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, security.o(i._Z17SendEntryMessageshb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SendEntryMessages(unsigned char, bool) &rArr; SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char)
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPirIDList()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEEramMem(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
</UL>

<P><STRONG><a name="[69f]"></a>SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, comm_stm_rx_manager.o(i._Z17SendResponseToSTMPP27S_COMM_STM_RX_MNG_RX_BUFFERth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[41f]"></a>SendUartAckToTask(unsigned short, unsigned, unsigned char, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uart_func.o(i._Z17SendUartAckToTasktjhthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SendUartAckToTask(unsigned short, unsigned, unsigned char, unsigned short, unsigned char, unsigned char) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
</UL>

<P><STRONG><a name="[266]"></a>SerialNumberCheck()</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, rfseialnumbercheck.o(i._Z17SerialNumberCheckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfDeviceBelongsToSystem()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>

<P><STRONG><a name="[5b2]"></a>SetAllVideosReady(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, videoengine.o(i._Z17SetAllVideosReadyb))
<BR><BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
</UL>

<P><STRONG><a name="[2b7]"></a>SetGSMAudioConfig(unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m_a2g.o(i._Z17SetGSMAudioConfighh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SetGSMAudioConfig(unsigned char, unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_listen()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_talk()
</UL>

<P><STRONG><a name="[3e4]"></a>SetRkpTamperFault(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_db.o(i._Z17SetRkpTamperFaultb))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_monitor()
</UL>

<P><STRONG><a name="[9da]"></a>SetSecTamperFault(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_db.o(i._Z17SetSecTamperFaultb))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
</UL>

<P><STRONG><a name="[32e]"></a>SetVideoFaultCode(VIDEO_FAULT_CODE_E)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filehandler.o(i._Z17SetVideoFaultCode18VIDEO_FAULT_CODE_E))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[889]"></a>SetVideoVideoDone(unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, videohandler.o(i._Z17SetVideoVideoDonehh))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7f]"></a>SeveFileName_exec()</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, filesystemmanagment.o(i._Z17SeveFileName_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SeveFileName_exec() &rArr; INIT_set_Pic_last_index(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_Pic_last_index(unsigned char)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookForTheOldstFile_exec()
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerIndexNotAlreadyInList(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> filesystemmanagment.o(i._Z17SeveFileName_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[65f]"></a>SirenVersionCheck(unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, siren.o(i._Z17SirenVersionCheckh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SirenVersionCheck(unsigned char) &rArr; FL_SIREN_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSirenTest(unsigned char, unsigned short)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidSirenEntry()
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOldSirenCmd(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
</UL>

<P><STRONG><a name="[8f5]"></a>SpeakerVolumeStep(bool)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, kpdoutstub.o(i._Z17SpeakerVolumeStepb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpeakerVolumeStep(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::Set_Speaker_Vol(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[8fc]"></a>StartPowerHandler()</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, main_power.o(i._Z17StartPowerHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = StartPowerHandler() &rArr; Set220vRestore() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGsmStatus(bool)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJDNag(unsigned)
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RefreshJDSupervision()
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerSaveWithACTestFlag()
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_power_status(unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerSaveTestFlag()
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerSaveMode(unsigned)
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckBattFlag(unsigned char)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcMsgToBeSent()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[900]"></a>StartReadSysFlags()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, init.o(i._Z17StartReadSysFlagsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StartReadSysFlags() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInit()
</UL>

<P><STRONG><a name="[901]"></a>StartSecurityInit()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security.o(i._Z17StartSecurityInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartSecurityInit() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[51]"></a>Steady_siren_exec()</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, control_panel.o(i._Z17Steady_siren_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = Steady_siren_exec() &rArr; StartDelayedAlarm() &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetNumOfDevicePending(unsigned char)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTestAlarm()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceIDLE()
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> control_panel.o(i._Z11SetSirenOffv)
<LI> control_panel.o(i._Z17Steady_siren_execv)
<LI> control_panel.o(i._Z21SetSirenOff_ForModemsv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[904]"></a>SystemGoPowerDown()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hardware_vf.o(i._Z17SystemGoPowerDownv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemGoPowerDown() &rArr; UART_DisableUart1Tx() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableUart1Tx()
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableUart0Tx()
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_GetRfInterruptIndication()
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOS_Go_Power_Save(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[1a7]"></a>TEST_ExitTestMode(char*, unsigned short, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, test_func.o(i._Z17TEST_ExitTestModePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = TEST_ExitTestMode(char*, unsigned short, unsigned char) &rArr; INIT_set_TestApplicationOnOff(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_TestApplicationOnOff(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[908]"></a>Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, videoengine.o(i._Z17Take_Device_Video17SEQUENCER_LABEL_Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_entry(unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityMarkCloseScenario(unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIVDentryId(SEQUENCER_LABEL_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrongCodeMessage(unsigned char)
</UL>

<P><STRONG><a name="[1ab]"></a>Test_DeleteDevice(char*, unsigned short, unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, test_func.o(i._Z17Test_DeleteDevicePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Test_DeleteDevice(char*, unsigned short, unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceTypeLogicalOffset(unsigned char)
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*)
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceGroupType(unsigned char)
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipCommaAndWhiteSps(char*, char*)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>Test_RfSetTxPower(char*, unsigned short, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, test_func.o(i._Z17Test_RfSetTxPowerPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Test_RfSetTxPower(char*, unsigned short, unsigned char) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[90c]"></a>TryDeleteAttackDb()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cyberattackstates.o(i._Z17TryDeleteAttackDbv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TryDeleteAttackDb() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbPeriodicalCheckGo(bool)
</UL>

<P><STRONG><a name="[90d]"></a>VOICE_handle_call(E_VOICE_DEVICE)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, voice_manager.o(i._Z17VOICE_handle_call14E_VOICE_DEVICE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = VOICE_handle_call(E_VOICE_DEVICE) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[86e]"></a>VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, viruscryptobj.o(i._Z17VirusCryptObj_ExeP14TVirusCryptObjPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char) &rArr; PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned) &rArr; aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned)
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRandomSlotVector(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aes128EcbAdditionalXor(unsigned char*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVirusMsgThisPanel(unsigned char*)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusMessage(unsigned char*)
</UL>

<P><STRONG><a name="[bbc]"></a>check_USER_access(S_USER*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ram_user.o(i._Z17check_USER_accessP6S_USER))
<BR><BR>[Called By]<UL><LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[910]"></a>close_LISTEN_mode()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, listen.o(i._Z17close_LISTEN_modev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = close_LISTEN_mode() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[87a]"></a>get_RPC_device_id()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rpc.o(i._Z17get_RPC_device_idv))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7b8]"></a>get_dial_sequence(S_MSME_MSG_EVENT*)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, msme.o(i._Z17get_dial_sequenceP16S_MSME_MSG_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_dial_sequence(S_MSME_MSG_EVENT*) &rArr; SetDialSequenceOfCommMsg(S_MSME_MSG_EVENT*)
</UL>
<BR>[Calls]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDialSequenceOfCommMsg(S_MSME_MSG_EVENT*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[68e]"></a>initDataRegConfig(S_COMM_STM_RX_MNG_DATA_REG_CONFIG_INFO***)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, comm_stm_rx_manager.o(i._Z17initDataRegConfigPPP38S_COMM_STM_RX_MNG_DATA_REG_CONFIG_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = initDataRegConfig(S_COMM_STM_RX_MNG_DATA_REG_CONFIG_INFO***) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[912]"></a>initOptionsVector()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, init.o(i._Z17initOptionsVectorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = initOptionsVector() &rArr; getCustomerCode() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsmeQ()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustomerCode()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[64e]"></a>isValidSirenEntry()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, siren.o(i._Z17isValidSirenEntryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = isValidSirenEntry() &rArr; SirenVersionCheck(unsigned char) &rArr; FL_SIREN_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenVersionCheck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
</UL>

<P><STRONG><a name="[798]"></a>phone_num_GET_ptr(unsigned char)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ram_phone_num.o(i._Z17phone_num_GET_ptrh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = phone_num_GET_ptr(unsigned char) &rArr; FL_DOMAIN_EXTANSION_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DOMAIN_EXTANSION_read(unsigned char)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PHONE_NUM_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SEQUENCE_INDEX(unsigned char*, unsigned char, unsigned)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_exec_start(S_MESSAGE_COMM_INFO*)
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
</UL>

<P><STRONG><a name="[a7]"></a>pre_arm_exit_exec()</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, prealarm_handler.o(i._Z17pre_arm_exit_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = pre_arm_exit_exec() &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Entry_Exit_Beeps(unsigned char)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> prealarm_handler.o(i._Z15PerimeterDisarmb)
<LI> prealarm_handler.o(i._Z17pre_arm_exit_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[de]"></a>progAddModIncNumb(int, int, int*, void*)</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, kpdprogs.o(i._Z17progAddModIncNumbiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = progAddModIncNumb(int, int, int*, void*) &rArr; FL_INCOMING_PHONE_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_RunProgFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[2d6]"></a>progGeneralStates(int, int, int*, void*)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, kpdprogs.o(i._Z17progGeneralStatesiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnNPT(int, int, int*, void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKPD(int, int, int*, void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progActivateTestApplication(int, int, int*, void*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTag8ByteUpdateReset(int, int, int*, void*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEnablePrintGSM(int, int, int*, void*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progMMUpdateReset(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanelBeepsConfig(int, int, int*, void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTestAllLeds(int, int, int*, void*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEnablePrint(int, int, int*, void*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelOutgNumb(int, int, int*, void*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelAllPerif(int, int, int*, void*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTamperMask(int, int, int*, void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progSwitchMode(int, int, int*, void*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelIncNumb(int, int, int*, void*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progHardReset(int, int, int*, void*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEntryTime(int, int, int*, void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirensOper(int, int, int*, void*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progLearnTag(int, int, int*, void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progExitTime(int, int, int*, void*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progPinArm(int, int, int*, void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGsmLed(int, int, int*, void*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDimmer(int, int, int*, void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnSiren(int, int, int*, void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnPerif(int, int, int*, void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnInput(int, int, int*, void*)
</UL>

<P><STRONG><a name="[ee]"></a>progMMUpdateReset(int, int, int*, void*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, kpdprogs.o(i._Z17progMMUpdateResetiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = progMMUpdateReset(int, int, int*, void*) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[b47]"></a>release_SEC_EVENT(S_SEC_EVENT*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sec_event_q.o(i._Z17release_SEC_EVENTP11S_SEC_EVENT))
<BR><BR>[Called By]<UL><LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[916]"></a>save_key_fob_data()</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, do_it_yourself.o(i._Z17save_key_fob_datav))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = save_key_fob_data() &rArr; AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
</UL>

<P><STRONG><a name="[2c3]"></a>send_video_packet()</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, videohandler.o(i._Z17send_video_packetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = send_video_packet() &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentFileScenarioID()
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentFileIVD()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocket()
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastClipScenarioID()
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastClipIVD()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[91c]"></a>AFP_APP_read_logic(U_UINT16)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, afp_app.o(i._Z18AFP_APP_read_logic8U_UINT16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AFP_APP_read_logic(U_UINT16) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_decode_command(unsigned char*)
</UL>

<P><STRONG><a name="[90]"></a>ApiGetHandler_exec()</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, apistatemachines.o(i._Z18ApiGetHandler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ApiGetHandler_exec() &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTx4Entity(unsigned short, unsigned char, unsigned short*, unsigned char, unsigned char*)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGetHandler()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> apipckprocessing.o(i._Z15ResetGetHandlerv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[632]"></a>BuildDeviceVersion(unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, message.o(i._Z18BuildDeviceVersionPhS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BuildDeviceVersion(unsigned char*, unsigned char*, unsigned char) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
</UL>

<P><STRONG><a name="[2c9]"></a>BypassVideoChannel(COMMUNICATION_CHANNEL_E)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, videohandler.o(i._Z18BypassVideoChannel23COMMUNICATION_CHANNEL_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BypassVideoChannel(COMMUNICATION_CHANNEL_E) &rArr; get_CONTROL_PANEL_comm_status() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_comm_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[91d]"></a>CPUI_TurnOnPartLed(unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cpui_func.o(i._Z18CPUI_TurnOnPartLedhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CPUI_TurnOnPartLed(unsigned char, unsigned char) &rArr; LED_TurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOnLed(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBlinkAction(unsigned, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[35f]"></a>CPUI_UnsetLedBlink(unsigned char, unsigned*, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpui_func.o(i._Z18CPUI_UnsetLedBlinkhPjh))
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLedTracker(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[5a]"></a>CYBER_machine_exec()</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, cybermachine.o(i._Z18CYBER_machine_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = CYBER_machine_exec() &rArr; BuildVirusMessage(unsigned char*) &rArr; VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char) &rArr; PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned) &rArr; aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointer2CyberSuspectDevice()
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusMessage(unsigned char*)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 3]<UL><LI> cybermachine.o(i._Z18CYBER_machine_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[427]"></a>C_PROC_RF_RSSI2RLQ(int)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, c_proc.o(i._Z18C_PROC_RF_RSSI2RLQi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = C_PROC_RF_RSSI2RLQ(int) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLQValue(int, int)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
</UL>

<P><STRONG><a name="[877]"></a>CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)</STRONG> (Thumb, 812 bytes, Stack size 48 bytes, c_proc.o(i._Z18CalculateDeviceVerP16CONST_DATA_TBL_SPh12C_DEV_TYPE_Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool) &rArr; c_proc_SendJDConfigMessages(unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceGroupType(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ip_app_status_in_learn_bit()
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RefreshJDSupervision()
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auto_learn_learn_bit()
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_entry(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int2(unsigned char*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateNewRfGeneralTypeToRfSecZoneType(C_DEV_TYPE_E)
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_adjust_device_version(CONST_DATA_TBL_S*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages(unsigned char)
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWcalculation(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
</UL>

<P><STRONG><a name="[925]"></a>CheckMessageNumber()</STRONG> (Thumb, 1476 bytes, Stack size 40 bytes, checkdevicetype.o(i._Z18CheckMessageNumberv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = CheckMessageNumber() &rArr; SendAutoReplyMessage(RX_COMMAND*, unsigned char) &rArr; RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler2(unsigned char, unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_GetCyberFlags()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNewRepeaterVersion(unsigned char)
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoReplyMessage(RX_COMMAND*, unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberCheck()
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedDeviceApprove(unsigned char, unsigned char)
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCounters_CalculateMissedMessages(int, int)
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNewMessage()
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceGlobalID(unsigned char*, int)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendReplay(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[3c2]"></a>ClaerMaintCounters()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, maintenance.o(i._Z18ClaerMaintCountersv))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfDbMatch()
</UL>

<P><STRONG><a name="[aed]"></a>ClrVideoCommStruct()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, videoengine.o(i._Z18ClrVideoCommStructv))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
</UL>

<P><STRONG><a name="[92c]"></a>ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool)</STRONG> (Thumb, 374 bytes, Stack size 88 bytes, incomingbufferparser.o(i._Z18ConfigOrTestDevicehhhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RFApiVSEG_TriggerFrequencyOffset(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[863]"></a>CopyBaseUserCUI2UI(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, apicopyuiprocessing.o(i._Z18CopyBaseUserCUI2UIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = CopyBaseUserCUI2UI(unsigned short) &rArr; CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E) &rArr; MemMapEntityWrite2EPROM(unsigned char*, unsigned short) &rArr; MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPrivilege2UI(unsigned short)
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCUI2UIFields(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_decode_command(unsigned char*)
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCopyAllCUI2UIHandler_exec()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiModifyHandler_exec()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityCmd_exec()
</UL>

<P><STRONG><a name="[864]"></a>CopyUserFromCUI2UI(unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, apicopyuiprocessing.o(i._Z18CopyUserFromCUI2UIh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = CopyUserFromCUI2UI(unsigned char) &rArr; CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E) &rArr; MemMapEntityWrite2EPROM(unsigned char*, unsigned short) &rArr; MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfId(unsigned char)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyKFEntity(unsigned short, unsigned short, unsigned short)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKfId(unsigned char, unsigned char)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_decode_command(unsigned char*)
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCopyAllCUI2UIHandler_exec()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiModifyHandler_exec()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityCmd_exec()
</UL>

<P><STRONG><a name="[5d]"></a>DIAL_SEQUENCE_exec()</STRONG> (Thumb, 824 bytes, Stack size 40 bytes, dial_sequence.o(i._Z18DIAL_SEQUENCE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DIAL_SEQUENCE_exec() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageDuringVoiceAvailable()
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrVideoBypassIndication()
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoCommBypassed(COMMUNICATION_CHANNEL_E)
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBypassIndication()
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommBypassed(COMMUNICATION_CHANNEL_E)
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCommMsgFlag()
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMntMsg()
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialSequencePhoneId(unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SEQUENCE_INDEX(unsigned char*, unsigned char, unsigned)
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommMsgFlag()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_STUN_read()
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_exec_start(S_MESSAGE_COMM_INFO*)
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePhoneNumFunc()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRemoteConnection()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceIDLE()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> dial_sequence.o(i._Z18DIAL_SEQUENCE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[af7]"></a>DIAL_SEQUENCE_init()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dial_sequence.o(i._Z18DIAL_SEQUENCE_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[44c]"></a>EL_open_protocol_F()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z18EL_open_protocol_Fv))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_MACHINE_exec()
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_MACHINE_exec()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_MACHINE_exec()
</UL>

<P><STRONG><a name="[39b]"></a>ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fl_entry.o(i._Z18ENTRY_EEprom_writetPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[39a]"></a>ENTRY_header_build(unsigned char*, unsigned short, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fl_entry.o(i._Z18ENTRY_header_buildPhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENTRY_header_build(unsigned char*, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[616]"></a>EnFullTransparency(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, comm_stm_rx_manager.o(i._Z18EnFullTransparencyj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = EnFullTransparency(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[7fc]"></a>FL_PHONE_NUM_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fl_types.o(i._Z18FL_PHONE_NUM_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_PHONE_NUM_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[7e4]"></a>FL_RF_SEC_ZONE_ers(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fl_types.o(i._Z18FL_RF_SEC_ZONE_ersh))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FL_RF_SEC_ZONE_ers(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOffsetArrayElement(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERS_all_devices_exec()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4a6]"></a>FillEntityEndPlace(unsigned short, unsigned short)</STRONG> (Thumb, 158 bytes, Stack size 28 bytes, apicmdutilfunc.o(i._Z18FillEntityEndPlacett))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldAddress(unsigned short, unsigned short, unsigned short)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelEntHandler_exec()
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValue(unsigned short, unsigned char*, unsigned char*, unsigned short*)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanFieldByte(unsigned short, unsigned short, unsigned short)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTx4Entity(unsigned short, unsigned char, unsigned short*, unsigned char, unsigned char*)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBody(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGetAllCmd(unsigned char, unsigned char*)
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSameSerial(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[815]"></a>FindFirstKPDTamper()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ram_rkp.o(i._Z18FindFirstKPDTamperv))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[466]"></a>Flash_WriteDisable(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flash_func.o(i._Z18Flash_WriteDisableh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Flash_WriteDisable(unsigned char) &rArr; Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
</UL>

<P><STRONG><a name="[6cf]"></a>FreeGsmStmCtrlInfo(S_GSM_STM_CTRL_INFO*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gsm_stm_control.o(i._Z18FreeGsmStmCtrlInfoP19S_GSM_STM_CTRL_INFOj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FreeGsmStmCtrlInfo(S_GSM_STM_CTRL_INFO*, unsigned) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[8c2]"></a>FreeGsmStmStrmInfo(S_GSM_STM_STRM_INFO*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gsm_stm_streaming.o(i._Z18FreeGsmStmStrmInfoP19S_GSM_STM_STRM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeGsmStmStrmInfo(S_GSM_STM_STRM_INFO*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
</UL>

<P><STRONG><a name="[4e8]"></a>GSM_suspend_status(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gsm_comm.o(i._Z18GSM_suspend_statush))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_open_call(unsigned char*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_done(unsigned char*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[5f]"></a>G_PROC_STATUS_exec()</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, gsm_comm.o(i._Z18G_PROC_STATUS_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = G_PROC_STATUS_exec() &rArr; GSM_decode_status(S_GSM_STATUS*) &rArr; GSM_JammingRestoreActions() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_comm_status()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[3b3]"></a>G_PROC_init_params()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gsm_comm.o(i._Z18G_PROC_init_paramsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = G_PROC_init_params() &rArr; CONTROL_PANEL_get_sysflag_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[26b]"></a>GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, deviceconfigmachine.o(i._Z18GetCfgParamFromRam13RF_CFG_MODE_Ehhh))
<BR><BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ConfigIPDESensitivity(unsigned char)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSendNewRfHandshake(unsigned char, RX_COMMAND*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUnlocked(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_FullOrPartialConfigMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[947]"></a>GetCommInformation()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msme.o(i._Z18GetCommInformationv))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPhoneOrGprsData(unsigned char*)
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
</UL>

<P><STRONG><a name="[2eb]"></a>GetCurrentCommMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, communicationstate.o(i._Z18GetCurrentCommModev))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialSequencePhoneId(unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_video_call(S_MESSAGE_COMM_INFO*, VIDEO_SCENARIO_TYPE_E)
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerHandler_exec()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcMsgToBeSent()
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDialSequenceOfCommMsg(S_MSME_MSG_EVENT*)
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_voice_window_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelEntHandler_exec()
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
</UL>

<P><STRONG><a name="[269]"></a>GetDeviceBatStatus(unsigned char, unsigned char)</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, deviceupdatemachine.o(i._Z18GetDeviceBatStatushh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDeviceBatStatus(unsigned char, unsigned char) &rArr; get_RF_OUTPUT_DEV_ptr(int) &rArr; FL_RF_OUTPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[b94]"></a>GetDeviceTypeIndex(C_DEV_TYPE_E)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintenance.o(i._Z18GetDeviceTypeIndex12C_DEV_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
</UL>

<P><STRONG><a name="[38d]"></a>GetEntryChangeType(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fl_entry.o(i._Z18GetEntryChangeTypet))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>

<P><STRONG><a name="[52d]"></a>GetHardwareVersion()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, maintenance.o(i._Z18GetHardwareVersionv))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIridiumVersion(unsigned char*)
</UL>

<P><STRONG><a name="[3c8]"></a>GetInitStatusFlags()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(i._Z18GetInitStatusFlagsv))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInitJdItrAvaible(unsigned char)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSecurity_exec()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamControlPanelClearLowBattIndication()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_LISTEN_mode()
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LINK_exec(E_TRANSPORTS, bool)
</UL>

<P><STRONG><a name="[c6c]"></a>GetMaintSchedState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintenance.o(i._Z18GetMaintSchedStatev))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[325]"></a>GetMsmePanelStatus()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msme.o(i._Z18GetMsmePanelStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSwBootSrc(unsigned char)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_comm_fault_timers()
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommFaultTimes(unsigned char*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_STATUS_exec()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartJammingHandler(bool)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSavePeriodicCounters()
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardPinCode()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardUser()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_supervision_test()
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDetectionMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progSwitchMode(int, int, int*, void*)
</UL>

<P><STRONG><a name="[a34]"></a>GetRfFlagsInitMode()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c_proc.o(i._Z18GetRfFlagsInitModev))
<BR><BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[c41]"></a>GetSystemParamsPtr()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, util.o(i._Z18GetSystemParamsPtrv))
<BR><BR>[Called By]<UL><LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValidMsgRcvd4JammingDetection()
</UL>

<P><STRONG><a name="[845]"></a>GetZoneStatusPart1(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, process_c_proc_messages.o(i._Z18GetZoneStatusPart1P21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
</UL>

<P><STRONG><a name="[844]"></a>GetZoneStatusPart2(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, process_c_proc_messages.o(i._Z18GetZoneStatusPart2P21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
</UL>

<P><STRONG><a name="[785]"></a>Get_MSME_MsgParams()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msme.o(i._Z18Get_MSME_MsgParamsv))
<BR><BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_q_BuildandSendSigFoxMsg(S_MSME_MSG_EVENT*)
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[b46]"></a>HAL_GetResetSource()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_api.o(i._Z18HAL_GetResetSourcev))
<BR><BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[885]"></a>IP_APP_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ip_app.o(i._Z18IP_APP_test_device12C_DEV_TYPE_EhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IP_APP_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[777]"></a>IncrementAttackCnt(TAttackDataBase*, EAttackType)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cyberattackstates.o(i._Z18IncrementAttackCntP15TAttackDataBase11EAttackType))
<BR><BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool)
</UL>

<P><STRONG><a name="[937]"></a>InitActivationCode()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, init.o(i._Z18InitActivationCodev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitActivationCode() &rArr; VideoCRC(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCRC(unsigned char*, unsigned)
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoCRC()
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrVideoCRC()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICCcode()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[93a]"></a>InitCommFaultTimes(unsigned char*)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gsm_comm.o(i._Z18InitCommFaultTimesPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitCommFaultTimes(unsigned char*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[93b]"></a>InitMinutesCounter(unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timer.o(i._Z18InitMinutesCounterPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitMinutesCounter(unsigned char*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[93c]"></a>InitPanelCommState(PANEL_COMM_STATE_E)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, communicationstate.o(i._Z18InitPanelCommState18PANEL_COMM_STATE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitPanelCommState(PANEL_COMM_STATE_E) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIcoSignalMSGProgress()
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ico_progress()
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommStatus(PANEL_COMM_STATE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[554]"></a>InitPreAlarmStatus(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z18InitPreAlarmStatusb))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
</UL>

<P><STRONG><a name="[555]"></a>InitPreAlarmTicker(unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timer.o(i._Z18InitPreAlarmTickerPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitPreAlarmTicker(unsigned char*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
</UL>

<P><STRONG><a name="[544]"></a>InitSchenarioTable()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scenarios.o(i._Z18InitSchenarioTablev))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitScheduler()
</UL>

<P><STRONG><a name="[93f]"></a>InternalFlash_Init()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, internalflash_api.o(i._Z18InternalFlash_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InternalFlash_Init() &rArr; SearchActiveSectorAndPage(Sector_Page_s*) &rArr; blank_check_sectors(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchActiveSectorAndPage(Sector_Page_s*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_INIT()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[941]"></a>InternalFlash_Read(unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, internalflash_api.o(i._Z18InternalFlash_ReadtPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InternalFlash_Read(unsigned short, unsigned char*, unsigned short) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_ReadId(unsigned short, unsigned char*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[942]"></a>IsAttackStateBlock(C_DEV_TYPE_E, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, security.o(i._Z18IsAttackStateBlock12C_DEV_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IsAttackStateBlock(C_DEV_TYPE_E, unsigned char) &rArr; IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceAttackState(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertGeneralDeviceType(C_DEV_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2fc]"></a>IsDualSignalDevice(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z18IsDualSignalDeviceP21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[352]"></a>IsEventTrackerZero(unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cpui_func.o(i._Z18IsEventTrackerZeroPh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[946]"></a>IsGsmGoodCondition()</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, gsm_comm.o(i._Z18IsGsmGoodConditionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = IsGsmGoodCondition() &rArr; GSM_Control_API_GetGsmStatus(S_GSM_STATUS*) &rArr; GSM_Control_StartStopRegDebounceTimer(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_Message_Set_RSSI_Fail_Flag()
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_comm_status()
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommInformation()
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[5fe]"></a>IsGsmTransimitFail()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gsm_comm.o(i._Z18IsGsmTransimitFailv))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
</UL>

<P><STRONG><a name="[61f]"></a>IsNeedCyberProcess(unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cybermachine.o(i._Z18IsNeedCyberProcessPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IsNeedCyberProcess(unsigned char*) &rArr; CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD) &rArr; SaveI2CBuffCopy(S_CyberInfo*, unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCyberDetectedCmd(unsigned char*)
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SecEngMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>

<P><STRONG><a name="[a83]"></a>IsNeedToSaveOffset()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, log.o(i._Z18IsNeedToSaveOffsetv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[8f8]"></a>IsPerimeterSirenOn()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z18IsPerimeterSirenOnv))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_clear_annex_alarm_in_memory()
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
</UL>

<P><STRONG><a name="[5a5]"></a>IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ram_rf_sec_zone.o(i._Z18IsPirNewRFProtocol18RF_SEC_ZONE_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_GetDeviceVersionCode(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexSendEntryMessages()
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverwriteVideoId(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char, bool)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_send_open_rx(unsigned char*, unsigned char*)
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test()
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SendOpenRx()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_FullOrPartialConfigMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[5c3]"></a>IsPstnModuleEnable()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, init.o(i._Z18IsPstnModuleEnablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsPstnModuleEnable() &rArr; CONTROL_PANEL_get_sysflag_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[38c]"></a>IsRemoteConnection()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_link_manager.o(i._Z18IsRemoteConnectionv))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[a38]"></a>IsRfSequenceActive()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sendrfsequence.o(i._Z18IsRfSequenceActivev))
<BR><BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[a01]"></a>IsRfVideoQueueFull()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, videoq.o(i._Z18IsRfVideoQueueFullv))
<BR><BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[acf]"></a>IsRtcMachineActive()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deviceupdatemachine.o(i._Z18IsRtcMachineActivev))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[48f]"></a>Is_DIAL_RETRY_Idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dial_retry.o(i._Z18Is_DIAL_RETRY_Idlev))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[54]"></a>LoadRamMemMap_exec()</STRONG> (Thumb, 1318 bytes, Stack size 72 bytes, rammemorymap.o(i._Z18LoadRamMemMap_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = LoadRamMemMap_exec() &rArr; MultiplyUsersByDevices(unsigned char*, bool) &rArr; AddDevicesPerUser(unsigned short, unsigned short*, unsigned char*, bool) &rArr; AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool) &rArr; CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_IsTestApplicationActive()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_is_backup_valid_bit(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_comm_status()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Erase_Flash_Sectors(unsigned char, unsigned char)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashEraserStatus()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IsMemMapBackupValid()
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MM_update_table_num()
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MM_update_table_num()
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getApiCopyAllCUI2UIState()
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyUsersByDevices(unsigned char*, bool)
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFogCounterArr()
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKF2UserMap()
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_RF_FG_Table()
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamControlPanelClearLowBattIndication()
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_KF_lock_options_ptr()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rammemorymap.o(i._Z18LoadRamMemMap_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[254]"></a>Logical_2_Physical(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, memorymap.o(i._Z18Logical_2_Physicalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read_device_version(unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTPUT_read_device_version(unsigned char, unsigned char)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INPUT_read_device_version(unsigned char, unsigned char)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read_device_version(unsigned char, unsigned char)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read_device_version(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[808]"></a>MAINTEMANCE_get_IC()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, maintenance.o(i._Z18MAINTEMANCE_get_ICv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAINTEMANCE_get_IC()
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCheckActivationCode(unsigned char*)
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[6bf]"></a>MP_EX_EEPROM_write(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, maintenance.o(i._Z18MP_EX_EEPROM_writePhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = MP_EX_EEPROM_write(unsigned char*, unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[b27]"></a>MSME_close_channel(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, msme.o(i._Z18MSME_close_channelh))
<BR><BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
</UL>

<P><STRONG><a name="[954]"></a>ModifyGuardPinCode()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ram_user.o(i._Z18ModifyGuardPinCodev))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ModifyGuardPinCode() &rArr; FL_PINCODE_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PINCODE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUserGuard_exec()
</UL>

<P><STRONG><a name="[577]"></a>ModifyKeypadEntity(int*, int, unsigned char*, bool)</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, process_income_message.o(i._Z18ModifyKeypadEntityPiiPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ModifyKeypadEntity(int*, int, unsigned char*, bool) &rArr; AddEntityHead(unsigned short, unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRfSecZoneValid(int)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramKeyPad(unsigned char*, S_POSESO_Reply*, unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>NewNightModeAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z18NewNightModeActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = NewNightModeAction(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[244]"></a>OSAL_CalcDayOfWeek(unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, osal_time_services.o(i._Z18OSAL_CalcDayOfWeekthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_CalcDayOfWeek(unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate(unsigned char, unsigned char, unsigned short)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init(unsigned char*, bool)
</UL>

<P><STRONG><a name="[45a]"></a>OSAL_GetSelfTaskId()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, osal_task_util.o(i._Z18OSAL_GetSelfTaskIdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_GetSelfTaskId()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortGetSelfTaskHandle()
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskCallBack(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>

<P><STRONG><a name="[73f]"></a>OSAL_IsMailBoxFull(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal_msg.o(i._Z18OSAL_IsMailBoxFullh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_IsMailBoxFull(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskMailBoxHandle(unsigned char)
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortIsMailBoxFull(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[1f5]"></a>OSAL_TickerHandler()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, osal_time_mng.o(i._Z18OSAL_TickerHandlerv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTickerHandler
</UL>

<P><STRONG><a name="[27b]"></a>OSAL_WaitOnMessage(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal_msg.o(i._Z18OSAL_WaitOnMessageh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_WaitOnMessage(unsigned char) &rArr; OSAL_PortWaitOnMessage(void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskMailBoxHandle(unsigned char)
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortWaitOnMessage(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_UartInit()
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_CheckIfNewSWLoaded(unsigned char)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitRadio(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
</UL>

<P><STRONG><a name="[959]"></a>PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)</STRONG> (Thumb, 844 bytes, Stack size 48 bytes, security.o(i._Z18PANIC_MACHINE_execP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*) &rArr; SECURITY_event_action(E_CONTROL_PANEL_EVENT) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_IsBusy()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityISNSirenAfterSafety(unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSosStatus(int)
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
</UL>

<P><STRONG><a name="[87]"></a>POSESO_LISTEN_exec()</STRONG> (Thumb, 734 bytes, Stack size 56 bytes, poseso_listen.o(i._Z18POSESO_LISTEN_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = POSESO_LISTEN_exec() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPRSDyamicIP()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBypassIndication()
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoCommMachineIdle()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmeFlags()
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoesQreachedWatermark(unsigned char)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msme_q()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_get_busy()
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckPosesoOnLineFlag(bool)
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckOnlineFlag(bool)
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_LISTEN_mode()
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_LISTEN_mode()
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LINK_exec(E_TRANSPORTS, bool)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_LINK()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> poseso_listen.o(i._Z18POSESO_LISTEN_execv)
</UL>
<P><STRONG><a name="[855]"></a>PSTN_API_PausePstn(unsigned char, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstn_stub.o(i._Z18PSTN_API_PausePstnhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PSTN_API_PausePstn(unsigned char, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_CommControl(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[115]"></a>PartArmNightAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z18PartArmNightActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PartArmNightAction(S_CPUI_ButtonInfo*) &rArr; PartArmPanel(int, S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[961]"></a>ProcessI2cProtocol(unsigned char*, unsigned char)</STRONG> (Thumb, 3604 bytes, Stack size 40 bytes, processi2cprotocol_vf.o(i._Z18ProcessI2cProtocolPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = ProcessI2cProtocol(unsigned char*, unsigned char) &rArr; ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler2(unsigned char, unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFBattReadNeeded(int)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF3_config_init()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRsuByteValid(unsigned char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustomerCode()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNoHSCamera(unsigned char)
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceRSSIinDataBase(int, unsigned char, unsigned char)
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeSecEngMsg(unsigned char*, unsigned char)
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCountersFromDataBase()
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRemoteBootTrigger()
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCommandToDataBase()
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OrganizeRepeatersinDB()
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickRfSequenceMachine()
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bNeedKfControlUpdate(unsigned char*, KEY_FOB_LOCK_CFG_S*)
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEGIsDeviceWOR(unsigned char, unsigned char)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceGlobalID(unsigned char*, int)
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccountNumber(unsigned char*)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingClearData()
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBaseCheckSum()
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateUpdate(RPC_RESULT_E)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer1()
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllUpdates(bool)
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceType()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDataBase()
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCounters()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDataBase()
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[881]"></a>RF_INPUT_get_entry(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ram_rf_input_dev.o(i._Z18RF_INPUT_get_entryh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_INPUT_get_entry(unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnNPT(int, int, int*, void*)
</UL>

<P><STRONG><a name="[7df]"></a>RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, rf_output.o(i._Z18RF_OUTPUT_send_msg20E_ACTION_DEVICE_MODEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_DEVICE_operation(unsigned char, unsigned char)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[647]"></a>RSU_GetMsmeMessage(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rsu_task.o(i._Z18RSU_GetMsmeMessageh))
<BR><BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[243]"></a>RTC_GetTimeAndDate(RTC_Time_t*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtc_api.o(i._Z18RTC_GetTimeAndDateP10RTC_Time_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC_Ticker()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReadRTC(char*, unsigned short, unsigned char)
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_full_time_date(unsigned char*)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time(unsigned char*)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_date(unsigned char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate(unsigned char*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init(unsigned char*, bool)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimeStamp(unsigned char*)
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Condensed_RTC(unsigned char*)
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacketToLogger(unsigned char*, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[245]"></a>RTC_SetTimeAndDate(RTC_Time_t*)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtc_api.o(i._Z18RTC_SetTimeAndDateP10RTC_Time_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Start()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init(unsigned char*, bool)
</UL>

<P><STRONG><a name="[bce]"></a>Radio_CalcChecksum(unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z18Radio_CalcChecksumPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Radio_CalcChecksum(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EarlyPacketFiltering(unsigned char*)
</UL>

<P><STRONG><a name="[82d]"></a>Radio_SetHwTxPower(signed char)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z18Radio_SetHwTxPowera))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_SetHwTxPower(signed char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetPowerRegister(E_CC11XX_Freq_Table, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetTxPower(signed char)
</UL>

<P><STRONG><a name="[973]"></a>Radio_TrafficAbort()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z18Radio_TrafficAbortv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Radio_TrafficAbort() &rArr; Radio_GotoIdle() &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[974]"></a>ResetModifyHandler()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, apipckprocessing.o(i._Z18ResetModifyHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ResetModifyHandler() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetApi()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiModifyHandler_exec()
</UL>

<P><STRONG><a name="[6a0]"></a>RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, comm_stm_rx_manager.o(i._Z18RxMngParsRegBufferPPhPtS_P31S_COMM_STM_RX_MNG_COMM_TASK_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*) &rArr; RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferInsert(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferCreate(unsigned char, unsigned short)
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGetDataSize(OSAL_CyclicBuffer*)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicited(char*, unsigned short)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegStart(unsigned char*, unsigned)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegEnd(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[252]"></a>SECURITY_get_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security.o(i._Z18SECURITY_get_statev))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_process_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entry_Exit_Beeps_exec()
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKf3Status(S_KEY_FOB_ENTRY*, U_KEY_FOB_PARAMS*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeter_entry_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBootCondition()
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoPerimeterArmEnabled()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialHangUp()
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_reply_to_star_button(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_denied_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_state_LEDS_byte(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_no_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[81f]"></a>SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, security.o(i._Z18SECURITY_set_event16SECURITY_EVENT_E10U_DEV_TYPEh25SECURITY_PARTITION_TYPE_Ehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char) &rArr; IsAttackStateBlock(C_DEV_TYPE_E, unsigned char) &rArr; IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAttackStateBlock(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_SEC_EVENT_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_ARM_request(S_KEY_FOB*, KEY_FOB_REQUESTS_E, unsigned char, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[a94]"></a>SECURITY_was_alarm()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z18SECURITY_was_alarmv))
<BR><BR>[Called By]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>

<P><STRONG><a name="[3e1]"></a>SIREN_open_low_bat()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_siren.o(i._Z18SIREN_open_low_batv))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[5b0]"></a>SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, security.o(i._Z18SaveEntryExitAlarmhh20E_DELAYED_VIDEO_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForEmptyCellInMem()
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAlreadyInMem(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
</UL>

<P><STRONG><a name="[bf]"></a>SaveVideoFail_Exec()</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, videoengine.o(i._Z18SaveVideoFail_Execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SaveVideoFail_Exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVidDeviceOrdinal(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> videoengine.o(i._Z18SaveVideoFail_Execv)
</UL>
<P><STRONG><a name="[a57]"></a>SecuritySetISRFlag(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z18SecuritySetISRFlagh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[8a2]"></a>SendAttackDbUpdate(C_PROC_2_A_MESSAGE_E, C_DEV_TYPE_E, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, c_proc.o(i._Z18SendAttackDbUpdate20C_PROC_2_A_MESSAGE_E12C_DEV_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SendAttackDbUpdate(C_PROC_2_A_MESSAGE_E, C_DEV_TYPE_E, unsigned char) &rArr; AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertGeneralDeviceType(C_DEV_TYPE_E)
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[462]"></a>SendFlashAckToTask(unsigned short, unsigned, unsigned short, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, flash_func.o(i._Z18SendFlashAckToTasktjth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SendFlashAckToTask(unsigned short, unsigned, unsigned short, unsigned char) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
</UL>

<P><STRONG><a name="[397]"></a>SendFogWiredCfgMsg(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, process_income_message.o(i._Z18SendFogWiredCfgMsghhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendFogWiredCfgMsg(unsigned char, unsigned char, unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b1]"></a>SendSirenTest_exec()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, siren.o(i._Z18SendSirenTest_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SendSirenTest_exec() &rArr; SIREN_send_cmd(E_SIREN_RF_COMMANDS) &rArr; ALARM_on(ALRAM_TYPE_E, unsigned char, bool) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOldSirenCmd(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> siren.o(i._Z18SendSirenTest_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[97c]"></a>SendStateChangeMsg()</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, communicationstate.o(i._Z18SendStateChangeMsgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = SendStateChangeMsg() &rArr; DecisionAboutPosesoPoseseFogChain(COMM_STATUS_INPANEL_E) &rArr; StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecisionAboutPosesoPoseseFogChain(COMM_STATUS_INPANEL_E)
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ico_progress()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
</UL>

<P><STRONG><a name="[97d]"></a>SendTimerAckToTask(S_TimerInfo*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, osal_time_mng.o(i._Z18SendTimerAckToTaskP11S_TimerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SendTimerAckToTask(S_TimerInfo*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
</UL>

<P><STRONG><a name="[97]"></a>SendUserGuard_exec()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ram_user.o(i._Z18SendUserGuard_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SendUserGuard_exec() &rArr; ModifyGuardPinCode() &rArr; FL_PINCODE_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardPinCode()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardUser()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ram_user.o(i._Z18SendUserGuard_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[758]"></a>SendVideoToStation(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, videohandler.o(i._Z18SendVideoToStationP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendVideoToStation(S_MESSAGE_COMM_INFO*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIDEO_DIAL_exec()
</UL>

<P><STRONG><a name="[92f]"></a>SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, deviceconfigmachine.o(i._Z18SetCfgParamFromRam13RF_CFG_MODE_Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceLockUnlockCheck_exec()
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ConfigOnCDT(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddKfCUIUser(unsigned short, unsigned short*)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateKF3ConfigBit(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[95f]"></a>SetCheckOnlineFlag(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._Z18SetCheckOnlineFlagb))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
</UL>

<P><STRONG><a name="[2f4]"></a>SetSecAlarmPending(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z18SetSecAlarmPendingb))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_clear_annex_alarm_in_memory()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[14d]"></a>SirenStatusBuilder(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, ram_siren.o(i._Z18SirenStatusBuilderj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SirenStatusBuilder(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ram_db.o(.constdata)
</UL>
<P><STRONG><a name="[4ec]"></a>StartEntryDeletion(unsigned short, unsigned short)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, apipckprocessing.o(i._Z18StartEntryDeletiontt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartEntryDeletion(unsigned short, unsigned short) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnNPT(int, int, int*, void*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelAllPerif(int, int, int*, void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
</UL>

<P><STRONG><a name="[c27]"></a>StartFogGetBitExec()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i._Z18StartFogGetBitExecv))
<BR><BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[8fd]"></a>StartPowerSaveMode(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, power_save_mode_vf.o(i._Z18StartPowerSaveModej))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartPowerSaveMode(unsigned) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_EN_N_DIS(bool)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMainPowerMSGProcess(bool, bool, bool)
</UL>

<P><STRONG><a name="[56e]"></a>SwitchToFullDuplex()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, voice_manager.o(i._Z18SwitchToFullDuplexv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SwitchToFullDuplex() &rArr; SetGSMAudioConfig(unsigned char, unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGSMAudioConfig(unsigned char, unsigned char)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRingTone(bool)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
</UL>

<P><STRONG><a name="[5ba]"></a>SystemStartupDelay()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardware_vf.o(i._Z18SystemStartupDelayv))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_VF()
</UL>

<P><STRONG><a name="[1a8]"></a>Test_PowerSaveMode(char*, unsigned short, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, test_func.o(i._Z18Test_PowerSaveModePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Test_PowerSaveMode(char*, unsigned short, unsigned char) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerSaveWithACTestFlag(unsigned char)
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerSaveTestFlag(bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>Test_RfSendCarrier(char*, unsigned short, unsigned char)</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, test_func.o(i._Z18Test_RfSendCarrierPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Test_RfSendCarrier(char*, unsigned short, unsigned char) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_NextCarrierDuty()
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipCommaAndWhiteSps(char*, char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>Test_RfStopCarrier(char*, unsigned short, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, test_func.o(i._Z18Test_RfStopCarrierPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Test_RfStopCarrier(char*, unsigned short, unsigned char) &rArr; RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char) &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>TimeManagementTask(void*)</STRONG> (Thumb, 728 bytes, Stack size 24 bytes, osal_time_mng.o(i._Z18TimeManagementTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TimeManagementTask(void*) &rArr; SendTimerAckToTask(S_TimerInfo*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetElement(OSAL_PriorityQueue*, unsigned short)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDeleteElement(OSAL_PriorityQueue*, unsigned short)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetMaxFunc(OSAL_PriorityQueue*, unsigned*, void**)
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerAckToTask(S_TimerInfo*)
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTicker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[5c0]"></a>UART_EnableUart0Tx()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_api.o(i._Z18UART_EnableUart0Txv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EnableUart0Tx() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp()
</UL>

<P><STRONG><a name="[5bf]"></a>UART_EnableUart1Tx()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_api.o(i._Z18UART_EnableUart1Txv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EnableUart1Tx() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_HE910_Module_PowerUp(unsigned)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp()
</UL>

<P><STRONG><a name="[981]"></a>UDP_APP_read_logic(unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, udp_app.o(i._Z18UDP_APP_read_logicPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UDP_APP_read_logic(unsigned char*) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
</UL>

<P><STRONG><a name="[39c]"></a>UnRegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gsm_api.o(i._Z18UnRegForConfRxDatahtPjPth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = UnRegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[347]"></a>UpdateGroupTracker(unsigned short*, unsigned char, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cpui_func.o(i._Z18UpdateGroupTrackerPtht))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[4a3]"></a>UpdateKF3ConfigBit(unsigned short, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, apicmdutilfunc.o(i._Z18UpdateKF3ConfigBittt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UpdateKF3ConfigBit(unsigned short, unsigned short) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindKfId(unsigned)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
</UL>

<P><STRONG><a name="[751]"></a>VAT_SessionHandler(S_VAT_Info*, S_VatTaskGlobalData*)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, vat_func.o(i._Z18VAT_SessionHandlerP10S_VAT_InfoP19S_VatTaskGlobalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = VAT_SessionHandler(S_VAT_Info*, S_VatTaskGlobalData*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[8b4]"></a>VOICE_DTMF_handler(unsigned char)</STRONG> (Thumb, 970 bytes, Stack size 32 bytes, voice_manager.o(i._Z18VOICE_DTMF_handlerh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = VOICE_DTMF_handler(unsigned char) &rArr; OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMProcFlags()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_voice(bool)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRingTone()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_switched_POSESO(bool)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_Create_POSESO_Reply(unsigned char*, unsigned short)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialHangUp()
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArgNum(POSESO_CMD_TYPE_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdCode(unsigned char*)
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Perform_DTMF_Code_Actions()
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_compare_dtmf_code()
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_To_Voice_Mode()
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_close_call(E_VOICE_DEVICE)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_listen()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_talk()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[72]"></a>VOICE_RECEIVE_exec()</STRONG> (Thumb, 1218 bytes, Stack size 48 bytes, voice_manager.o(i._Z18VOICE_RECEIVE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = VOICE_RECEIVE_exec() &rArr; VOICE_close_call(E_VOICE_DEVICE) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_IsBeepInProcess()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_Disable()
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_Enable()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetIsVATDisabled()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexAlarm()
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageDuringVoiceAvailable()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_PANIC_state()
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoCommMachineIdle()
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_gsm_level()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreAlarmStatus()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSavePeriodicCounters()
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPossesoVoice()
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSecurityTimerExpired()
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Perform_DTMF_Code_Actions()
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_voice_call_status()
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_To_Voice_Mode()
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_handle_call(E_VOICE_DEVICE)
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_close_call(E_VOICE_DEVICE)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_listen()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> voice_manager.o(i._Z18VOICE_RECEIVE_execv)
</UL>
<P><STRONG><a name="[8b6]"></a>VOICE_receive_call(E_VOICE_DEVICE)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, voice_manager.o(i._Z18VOICE_receive_call14E_VOICE_DEVICE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = VOICE_receive_call(E_VOICE_DEVICE) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_gsm_level()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_voice(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[86d]"></a>VirusCryptObj_Open(TVirusCryptObj*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, viruscryptobj.o(i._Z18VirusCryptObj_OpenP14TVirusCryptObj))
<BR><BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusMessage(unsigned char*)
</UL>

<P><STRONG><a name="[98f]"></a>WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, internalflash_util.o(i._Z18WriteFlashPageLoopP13Sector_Page_sS0_Ph))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_RAM2Flash(unsigned char*, unsigned char*, unsigned, unsigned)
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeedNextFreePage(Sector_Page_s*, Sector_Page_s*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Erase()
</UL>

<P><STRONG><a name="[819]"></a>aes_encrypt_key128(const unsigned char*, aes_ctx*)</STRONG> (Thumb, 210 bytes, Stack size 28 bytes, aeskey.o(i._Z18aes_encrypt_key128PKhP7aes_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = aes_encrypt_key128(const unsigned char*, aes_ctx*)
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned)
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[991]"></a>getJammSensitivity()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z18getJammSensitivityv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getJammSensitivity() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[47c]"></a>get_C_PROC_Q_empty()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, c_proc_q.o(i._Z18get_C_PROC_Q_emptyv))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_MACHINE_exec()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[7a7]"></a>get_DTMF_int_state()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dtmf.o(i._Z18get_DTMF_int_statev))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[495]"></a>get_G_PROC_Q_empty()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsmq.o(i._Z18get_G_PROC_Q_emptyv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[2fd]"></a>get_KEY_FOB_status(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ram_key_fob.o(i._Z18get_KEY_FOB_statush))
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[7f4]"></a>get_a_boot_request()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init.o(i._Z18get_a_boot_requestv))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[399]"></a>get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool)</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, process_income_message.o(i._Z18get_bypass_messageP21S_SEC_ZONE_ENTRY_DATAbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool) &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterMagnet(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[c03]"></a>get_c_boot_request()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(i._Z18get_c_boot_requestv))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[e0]"></a>progAddModOutgNumb(int, int, int*, void*)</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, kpdprogs.o(i._Z18progAddModOutgNumbiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = progAddModOutgNumb(int, int, int*, void*) &rArr; FL_OUTGOING_PHONE_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_RunProgFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[ed]"></a>progEnablePrintGSM(int, int, int*, void*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, kpdprogs.o(i._Z18progEnablePrintGSMiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = progEnablePrintGSM(int, int, int*, void*) &rArr; SetValToPrintGSM(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValToPrintGSM(unsigned char, bool)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[390]"></a>set_KEY_FOB_status(unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ram_key_fob.o(i._Z18set_KEY_FOB_statushh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_KEY_FOB_status(unsigned char, unsigned char) &rArr; set_bit(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>

<P><STRONG><a name="[992]"></a>start_pre_arm_exit(PRE_ARM_EXIT_SCENARIO_E)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z18start_pre_arm_exit23PRE_ARM_EXIT_SCENARIO_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_pre_arm_exit(PRE_ARM_EXIT_SCENARIO_E) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[993]"></a>ActivateFlashEraser()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, processflash.o(i._Z19ActivateFlashEraserv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ActivateFlashEraser() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Erase_Flash_Sectors(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[994]"></a>AddEntityGroup2List(unsigned short, rules_arg_t*, FitEntitiesList_t*, unsigned short*)</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, apicmdprocessing.o(i._Z19AddEntityGroup2ListtP11rules_arg_tP17FitEntitiesList_tPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = AddEntityGroup2List(unsigned short, rules_arg_t*, FitEntitiesList_t*, unsigned short*) &rArr; CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add2List(unsigned char, unsigned char, unsigned char, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short)
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftFitList(FitEntitiesList_t*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityList4Group(unsigned short, unsigned short*, rules_arg_t*)
</UL>

<P><STRONG><a name="[770]"></a>AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, annex.o(i._Z19AnnexAddAlarmToListi21RF_DETECTOR_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexFindEmptyEntryDetectionSlot()
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDeviceEntryFindInList(int, RF_DETECTOR_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexInstantAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E)
</UL>

<P><STRONG><a name="[607]"></a>AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)</STRONG> (Thumb, 970 bytes, Stack size 64 bytes, comm_common_funcs.o(i._Z19AtCmd_Table_HandlerhP23S_GSM_FUNC_TABLE_HANDLEP27S_COMM_STM_RX_MNG_RX_BUFFERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short) &rArr; GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; GSM_StrmResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortForceMutexRelease(unsigned*)
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_DetachGprs(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_API_GetModemParams()
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTN_API_SendInitPstn(unsigned char, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxEndIndication(unsigned char)
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxResponse(unsigned char)
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommandsTable(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnToTaskWithState(unsigned char, unsigned short, E_GSM_REPLY_STATUS_MESSAGE)
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTableCommandIndex(S_GSM_FUNC_TABLE_HANDLE*, unsigned short)
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommandRespondTime(unsigned char, unsigned char)
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleFunctionRow(unsigned char)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[99c]"></a>AttackDbElementExec(TAttackDataBase*, bool)</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, cyberattackstates.o(i._Z19AttackDbElementExecP15TAttackDataBaseb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AttackDbElementExec(TAttackDataBase*, bool) &rArr; AttackDbElementClose(TAttackDataBase*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateLockoutParamsReset(TAttackDataBase*)
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementClose(TAttackDataBase*)
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReadyTimerBlock(unsigned char*, unsigned char)
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAttackExist(TAttackDataBase*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementPeriodicalCheck(bool)
</UL>

<P><STRONG><a name="[c23]"></a>BUTTONS_ActivateRow(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, buttons_func.o(i._Z19BUTTONS_ActivateRowh))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_RecognizeButtonPressed()
</UL>

<P><STRONG><a name="[c24]"></a>BUTTONS_GetColValue()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buttons_func.o(i._Z19BUTTONS_GetColValuev))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_RecognizeButtonPressed()
</UL>

<P><STRONG><a name="[62b]"></a>BuildIridiumVersion(unsigned char*)</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, message.o(i._Z19BuildIridiumVersionPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BuildIridiumVersion(unsigned char*) &rArr; decstr2int2(unsigned char*) &rArr; decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardwareVersion()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoreSubVersion()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoreVersion()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int2(unsigned char*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_get_release_version()
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManufacturer()
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
</UL>

<P><STRONG><a name="[551]"></a>CLOCK_get_time_date(unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, clock.o(i._Z19CLOCK_get_time_datePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_get_time_date(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeftDateSmaller(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>

<P><STRONG><a name="[1bd]"></a>CPUI_CallGuardBlink(unsigned*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cpui_func.o(i._Z19CPUI_CallGuardBlinkPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPUI_CallGuardBlink(unsigned*) &rArr; IsMute()
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingTonePlaying()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[33e]"></a>CPUI_Init_Variables()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cpui_task_manager.o(i._Z19CPUI_Init_Variablesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CPUI_Init_Variables() &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[61e]"></a>CYBER_GetCyberFlags()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cybermachine.o(i._Z19CYBER_GetCyberFlagsv))
<BR><BR>[Called By]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>

<P><STRONG><a name="[94a]"></a>CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, cybermachine.o(i._Z19CYBER_machine_startPh20E_CYBER_DETECTED_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD) &rArr; SaveI2CBuffCopy(S_CyberInfo*, unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSleepStatus(unsigned char)
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCyberMachineActivationModeAndCounters(S_CyberInfo*, E_CYBER_DETECTED_CMD)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveI2CBuffCopy(S_CyberInfo*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedCyberProcess(unsigned char*)
</UL>

<P><STRONG><a name="[56]"></a>C_PROC_RECEIVE_exec()</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, c_proc.o(i._Z19C_PROC_RECEIVE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = C_PROC_RECEIVE_exec() &rArr; C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char) &rArr; C_PROC_process_MESSAGE(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*, bool) &rArr; C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E) &rArr; PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_ReceiveNewRFProtocolPacket(unsigned char*)
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_RF_PROC_EVENT_ptr()
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_RF_PROC_EVENT()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSaveFileIdle()
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoBuffer(unsigned char*)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Checksum(unsigned char*, unsigned)
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBusyFlag()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfQEmpty()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_ack(C_PROC_ACK_E)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z19C_PROC_RECEIVE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[9a6]"></a>CheckForSupervisory(unsigned char)</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, checkforsupervisory.o(i._Z19CheckForSupervisoryh))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = CheckForSupervisory(unsigned char) &rArr; HandleNewMessage() &rArr; RefreshRxTimeout() &rArr; TIMER_ResetRFresetCounter() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCounters_CalculateMissedMessages(int, int)
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNewMessage()
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[9fa]"></a>ClearCommInfoStruct()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, voice_manager.o(i._Z19ClearCommInfoStructv))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[5f6]"></a>ClearReceiveSSPFIFO(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssp_spi_func.o(i._Z19ClearReceiveSSPFIFOh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init(unsigned char, unsigned char, unsigned)
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData(unsigned char, unsigned char*, unsigned)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
</UL>

<P><STRONG><a name="[aac]"></a>ClearTransportDelay()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z19ClearTransportDelayv))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
</UL>

<P><STRONG><a name="[b7]"></a>ClearUpdatesMachine()</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, deviceupdatemachine.o(i._Z19ClearUpdatesMachinev))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ClearUpdatesMachine() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRamRemoteParamStatTbl()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> deviceupdatemachine.o(i._Z19ClearUpdatesMachinev)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[80b]"></a>ClrBypassIndication()</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, gsm_comm.o(i._Z19ClrBypassIndicationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ClrBypassIndication()
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[9ff]"></a>ClrSessionIndicator()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, videohandler.o(i._Z19ClrSessionIndicatorv))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[695]"></a>ConcMsgFromQMemCopy(OSAL_PriorityQueue*, unsigned char*, unsigned, S_COMM_STM_RX_MNG_BUFFER_WITH_LEN**)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, comm_stm_rx_manager.o(i._Z19ConcMsgFromQMemCopyP18OSAL_PriorityQueuePhjPP33S_COMM_STM_RX_MNG_BUFFER_WITH_LEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ConcMsgFromQMemCopy(OSAL_PriorityQueue*, unsigned char*, unsigned, S_COMM_STM_RX_MNG_BUFFER_WITH_LEN**) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[9a8]"></a>CopyAllCUI2UIStates(unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, apipckprocessing.o(i._Z19CopyAllCUI2UIStatest))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = CopyAllCUI2UIStates(unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyUsersByDevices(unsigned char*, bool)
</UL>

<P><STRONG><a name="[797]"></a>CopyPhoneOrGprsData(unsigned char*)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gsm_comm.o(i._Z19CopyPhoneOrGprsDataPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CopyPhoneOrGprsData(unsigned char*) &rArr; num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommInformation()
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[b1d]"></a>CorrectOutputBuffer(unsigned char*, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, deviceupdatemachine.o(i._Z19CorrectOutputBufferPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CorrectOutputBuffer(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[86f]"></a>CreateCyberCheckSum(unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cybermachine.o(i._Z19CreateCyberCheckSumPh))
<BR><BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusMessage(unsigned char*)
</UL>

<P><STRONG><a name="[768]"></a>CreateRFOutputEntry(int, unsigned char*, unsigned char, bool)</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, do_it_yourself.o(i._Z19CreateRFOutputEntryiPhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = CreateRFOutputEntry(int, unsigned char*, unsigned char, bool) &rArr; init_ram_db(unsigned char, unsigned char) &rArr; FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[8b5]"></a>DATALINK_rec_packet(unsigned char*, unsigned char, E_TRANSPORTS)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, data_link_manager.o(i._Z19DATALINK_rec_packetPhh12E_TRANSPORTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DATALINK_rec_packet(unsigned char*, unsigned char, E_TRANSPORTS) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketTimeout(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_handler_exec()
</UL>

<P><STRONG><a name="[9a9]"></a>DATALINK_state_nack()</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, data_link_manager.o(i._Z19DATALINK_state_nackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DATALINK_state_nack() &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
</UL>

<P><STRONG><a name="[5b]"></a>DIAL_PHONE_NUM_exec()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dial_phone_num.o(i._Z19DIAL_PHONE_NUM_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DIAL_PHONE_NUM_exec() &rArr; phone_driver_mux(S_MESSAGE_COMM_INFO*) &rArr; JD_MESSAGE_send(S_MESSAGE_COMM_INFO*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_driver_mux(S_MESSAGE_COMM_INFO*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> dial_phone_num.o(i._Z19DIAL_PHONE_NUM_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[af6]"></a>DIAL_PHONE_NUM_init()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dial_phone_num.o(i._Z19DIAL_PHONE_NUM_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7bf]"></a>DIAL_RETRY_send_msg(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dial_retry.o(i._Z19DIAL_RETRY_send_msgP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DIAL_RETRY_send_msg(S_MESSAGE_COMM_INFO*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_dial_sequence_GET_ptr(int)
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommMsgFlag()
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
</UL>

<P><STRONG><a name="[ad]"></a>DeviceReconfig_exec()</STRONG> (Thumb, 644 bytes, Stack size 72 bytes, deviceconfigmachine.o(i._Z19DeviceReconfig_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = DeviceReconfig_exec() &rArr; RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTypedecode()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> deviceconfigmachine.o(i._Z19DeviceReconfig_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[9ac]"></a>FL_RF_INPUT_DEV_ers(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fl_types.o(i._Z19FL_RF_INPUT_DEV_ersh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FL_RF_INPUT_DEV_ers(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
</UL>

<P><STRONG><a name="[104]"></a>FL_RF_SEC_ZONE_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z19FL_RF_SEC_ZONE_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_regular_entry_JD_config(unsigned char*, void*)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMajorAndMinorVersions(unsigned char, unsigned char)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ers(unsigned char)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDefectTr5Version(DEVICE_TYPE, unsigned char)
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_device_ptr(unsigned char, unsigned short, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
</UL>
<P><STRONG><a name="[9ad]"></a>FL_RF_SIREN_DEV_ers(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fl_types.o(i._Z19FL_RF_SIREN_DEV_ersh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FL_RF_SIREN_DEV_ers(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_sirens()
</UL>

<P><STRONG><a name="[9ae]"></a>FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)</STRONG> (Thumb, 168 bytes, Stack size 120 bytes, apipckprocessing.o(i._Z19FillFitEntitiesListPhS_PtS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*) &rArr; AddEntities2List(rules_arg_t*, FitEntitiesList_t*, unsigned short*) &rArr; CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*) &rArr; CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRule(unsigned char)
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEntityValue(unsigned short)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValue(unsigned short, unsigned char*, unsigned char*, unsigned short*)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFieldId(unsigned short)
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntities2List(rules_arg_t*, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityList4Group(unsigned short, unsigned short*, rules_arg_t*)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRuleArgs(unsigned char*, unsigned short*, rules_arg_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[5ee]"></a>Flash_BulkEraseFunc(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flash_func.o(i._Z19Flash_BulkEraseFunch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Flash_BulkEraseFunc(unsigned char) &rArr; Flash_WriteEnable(unsigned char) &rArr; Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitIsNotBusy(unsigned char)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteCommand(S_FLASH_TransferReqInfo*)
</UL>

<P><STRONG><a name="[5ec]"></a>Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, flash_func.o(i._Z19Flash_PageWriteFunchjPhjhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*) &rArr; Flash_WriteEnable(unsigned char) &rArr; Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitTxFIFOIsEmpty(unsigned char)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitIsNotBusy(unsigned char)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable(unsigned char)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnable(unsigned char)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteCommand(S_FLASH_TransferReqInfo*)
</UL>

<P><STRONG><a name="[79b]"></a>GPRS_SEQUENCE_INDEX(unsigned char*, unsigned char, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dial_sequence.o(i._Z19GPRS_SEQUENCE_INDEXPhhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPRS_SEQUENCE_INDEX(unsigned char*, unsigned char, unsigned) &rArr; phone_num_GET_ptr(unsigned char) &rArr; FL_DOMAIN_EXTANSION_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[9b2]"></a>GSM_Msg_build_frame(unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gsm_comm.o(i._Z19GSM_Msg_build_framePhS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GSM_Msg_build_frame(unsigned char*, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Checksum(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
</UL>

<P><STRONG><a name="[718]"></a>GSM_VOICE_open_call(unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gsm_voice.o(i._Z19GSM_VOICE_open_callPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GSM_VOICE_open_call(unsigned char*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_driver_mux(S_MESSAGE_COMM_INFO*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTest(int, int, int*, void*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVoiceCall()
</UL>

<P><STRONG><a name="[c6d]"></a>GSM_clr_worst_depth()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsmq.o(i._Z19GSM_clr_worst_depthv))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[5e]"></a>G_PROC_RECEIVE_exec()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, gsm_comm.o(i._Z19G_PROC_RECEIVE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = G_PROC_RECEIVE_exec() &rArr; G_PROC_decode_msg(unsigned char*, unsigned char) &rArr; VOICE_DTMF_handler(unsigned char) &rArr; OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataLinkFree()
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_G_PROC_EVENT_ptr()
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_G_PROC_EVENT()
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIncomeSmsState()
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmSendAckNack()
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstAckNackFlag()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gsm_comm.o(i._Z19G_PROC_RECEIVE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[c1f]"></a>GetAbortWindowState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security.o(i._Z19GetAbortWindowStatev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[557]"></a>GetCameraTypeForLog(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, videoengine.o(i._Z19GetCameraTypeForLogh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCameraTypeForLog(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCameraCommand(void*, unsigned char, unsigned char)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogVideoEvent(void*, VIDEO_STATUS_E)
</UL>

<P><STRONG><a name="[315]"></a>GetDeviceStatusBits(unsigned, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ram_db.o(i._Z19GetDeviceStatusBitsjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetDeviceStatusBits(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[314]"></a>GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, apicmdprocessing.o(i._Z19GetFieldIDByteValuettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeEntityID(unsigned short)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelAllHandler_exec()
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyUsersByDevices(unsigned char*, bool)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKF2UserMap()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceNotDuplicate(unsigned char*, int, int)
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateConfigKF3Msg(unsigned char)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKeypadEntity(unsigned char*, int*)
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddKfCUIUser(unsigned short, unsigned short*)
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPrivilege2CUI(unsigned short, unsigned short)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveGuardUser(unsigned short, unsigned short*, unsigned short*)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeKfId()
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short)
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short)
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSameSerial(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[5ff]"></a>GetKFLowBattPrevent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_key_fob.o(i._Z19GetKFLowBattPreventv))
<BR><BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneralSetLeds(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)
</UL>

<P><STRONG><a name="[455]"></a>GetPinCodeEntryTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, process_c_proc_messages.o(i._Z19GetPinCodeEntryTimev))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[590]"></a>GetSaveFlashAddress()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z19GetSaveFlashAddressv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[668]"></a>GetSubDeviceAndMode(unsigned char, RF_SEC_ZONE_TYPE_E*, RF_INPUT_DEV_TYPE_E*, SIREN_TYPE_E*, unsigned char*)</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, do_it_yourself.o(i._Z19GetSubDeviceAndModehP18RF_SEC_ZONE_TYPE_EP19RF_INPUT_DEV_TYPE_EP12SIREN_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetSubDeviceAndMode(unsigned char, RF_SEC_ZONE_TYPE_E*, RF_INPUT_DEV_TYPE_E*, SIREN_TYPE_E*, unsigned char*) &rArr; get_number_of_devices(RF_SEC_ZONE_TYPE_E) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number_of_devices(RF_SEC_ZONE_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[97b]"></a>GetVidDeviceOrdinal(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ram_rf_sec_zone.o(i._Z19GetVidDeviceOrdinalh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVidDeviceOrdinal(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoFailRetrieve_Exec()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFail_Exec()
</UL>

<P><STRONG><a name="[9bc]"></a>Get_phone_comm_type(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ram_phone_num.o(i._Z19Get_phone_comm_typeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_phone_comm_type(unsigned char) &rArr; FL_PHONE_NUM_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PHONE_NUM_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLastChannelInDialSequence(COMMUNICATION_CHANNEL_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c7a]"></a>HAL_InitResetSource()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_api.o(i._Z19HAL_InitResetSourcev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_InitResetSource()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)</STRONG> (Thumb, 4148 bytes, Stack size 120 bytes, gsm_module_funcs_he910.o(i._Z19HE910_AnswerHandlerhP23S_GSM_FUNC_TABLE_HANDLEPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short) &rArr; GSM_Control_API_SaveCurrentStatistics() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPermanentStatistics()
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SaveCurrentStatistics()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPeriodicStatistics()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxResponse(unsigned char)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2Digit(char)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnTransparency(unsigned)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuxChannel(unsigned char)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_All_Socket_Indication(unsigned char)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTableCommandIndex(S_GSM_FUNC_TABLE_HANDLE*, unsigned short)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ParseSmsMsg(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned char, MODEM*)
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponseLegality(S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommHexStr2Num(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII2Integer(char*)
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks1(unsigned char)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnFullTransparency(unsigned)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnMuxParser(unsigned)
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_On_Packet_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_On_ODM_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_StopModemGsmStatus()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStmStreamingErrorHandler(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStmMessageErrorHandler(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStmControlErrorHandler(unsigned)
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPeriodicSession()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[7d6]"></a>HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, process_income_message.o(i._Z19HandleCallSDCommandhbP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*) &rArr; MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRkp()
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPossesoVoice()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[126]"></a>I2CTaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_manager_task.o(i._Z19I2CTaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>INCOME_MESSAGE_exec()</STRONG> (Thumb, 756 bytes, Stack size 48 bytes, process_income_message.o(i._Z19INCOME_MESSAGE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = INCOME_MESSAGE_exec() &rArr; OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmeFlags()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init(unsigned char*, bool)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2int(unsigned char*, unsigned char)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_Create_POSESO_Reply(unsigned char*, unsigned short)
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_NUMBER_ptr(unsigned short)
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_SetSTUN_NACK()
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_SetSTUN_ACK()
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStunDontChgIPandPort()
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmSyncTimeout()
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdCode(unsigned char*)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 4]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> process_income_message.o(i._Z19INCOME_MESSAGE_execv)
<LI> process_income_message.o(i._Z26INCOME_MESSAGE_process_smsPhh)
</UL>
<P><STRONG><a name="[b00]"></a>INCOME_MESSAGE_init()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process_income_message.o(i._Z19INCOME_MESSAGE_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[28b]"></a>INIT_IsInitComplete()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_task.o(i._Z19INIT_IsInitCompletev))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegacyFunc()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[64]"></a>IP_APP_COMMAND_exec()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ip_app.o(i._Z19IP_APP_COMMAND_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = IP_APP_COMMAND_exec() &rArr; IP_COMMAND_state_receive() &rArr; IP_APP_decode_command(unsigned char*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_receive()
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_wait4c()
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_tag(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[65]"></a>IP_APP_MACHINE_exec()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ip_app.o(i._Z19IP_APP_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP_APP_MACHINE_exec() &rArr; IP_APP_off() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_C_PROC_Q_empty()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[883]"></a>IP_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ip_app.o(i._Z19IP_APP_learn_device12C_DEV_TYPE_EhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IP_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[adf]"></a>IfIsPerimeterDevice(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, process_c_proc_messages.o(i._Z19IfIsPerimeterDeviceP21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9cc]"></a>InternalFlash_Erase()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, internalflash_api.o(i._Z19InternalFlash_Erasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InternalFlash_Erase() &rArr; WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeedNextFreePage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_ERASE()
</UL>

<P><STRONG><a name="[9cd]"></a>InternalFlash_Write(unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, internalflash_api.o(i._Z19InternalFlash_WritetPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InternalFlash_Write(unsigned short, unsigned char*, unsigned short) &rArr; WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeedNextFreePage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector(unsigned char, unsigned char)
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Read(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteId(unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[75a]"></a>IsCommSessionFailed()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, videohandler.o(i._Z19IsCommSessionFailedv))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIDEO_DIAL_exec()
</UL>

<P><STRONG><a name="[2ab]"></a>IsGsmVoiceHandlerOn()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_voice.o(i._Z19IsGsmVoiceHandlerOnv))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[570]"></a>IsPanelInAlarmInMem()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z19IsPanelInAlarmInMemv))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[7c8]"></a>IsPanelTamperBypass()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z19IsPanelTamperBypassv))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[934]"></a>IsVideoCommBypassed(COMMUNICATION_CHANNEL_E)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, videohandler.o(i._Z19IsVideoCommBypassed23COMMUNICATION_CHANNEL_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsVideoCommBypassed(COMMUNICATION_CHANNEL_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
</UL>

<P><STRONG><a name="[9ce]"></a>IsVirusMsgThisPanel(unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cybermachine.o(i._Z19IsVirusMsgThisPanelPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = IsVirusMsgThisPanel(unsigned char*) &rArr; VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char) &rArr; PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned) &rArr; aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelSerialNumberValid(unsigned char*)
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[494]"></a>Is_GSM_MESSAGE_Idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm_message.o(i._Z19Is_GSM_MESSAGE_Idlev))
<BR><BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[499]"></a>Is_SMS_MESSAGE_Idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sms_message.o(i._Z19Is_SMS_MESSAGE_Idlev))
<BR><BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[9d0]"></a>KickRfParamsMachine()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sendrfparameters.o(i._Z19KickRfParamsMachinev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KickRfParamsMachine() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendParamsByRequest()
</UL>

<P><STRONG><a name="[6fe]"></a>LED_OperateLedLatch()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_func.o(i._Z19LED_OperateLedLatchv))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
</UL>

<P><STRONG><a name="[60d]"></a>LsnSendTableCommand(unsigned char, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gsm_stm_listen.o(i._Z19LsnSendTableCommandht))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LsnSendTableCommand(unsigned char, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
</UL>

<P><STRONG><a name="[119]"></a>MidLeftButtonAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z19MidLeftButtonActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MidLeftButtonAction(S_CPUI_ButtonInfo*) &rArr; RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*) &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>ModifyFileName_exec()</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, filesystemmanagment.o(i._Z19ModifyFileName_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ModifyFileName_exec() &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Address Reference Count : 3]<UL><LI> filesystemmanagment.o(i._Z19ModifyFileName_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[6df]"></a>MsgSendTableCommand(unsigned char, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gsm_stm_message.o(i._Z19MsgSendTableCommandht))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = MsgSendTableCommand(unsigned char, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
</UL>

<P><STRONG><a name="[703]"></a>MsmeGetCurrentEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msme_q.o(i._Z19MsmeGetCurrentEventv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MsmeGetCurrentEvent() &rArr; GetCurrentEvent(sEventDrivenQ*)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentEvent(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_fail()
</UL>

<P><STRONG><a name="[9d1]"></a>OSAL_HeapCheckUsage(unsigned, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, osal_heap.o(i._Z19OSAL_HeapCheckUsagejh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSAL_HeapCheckUsage(unsigned, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_DebugCheckHeapOverflow()
</UL>

<P><STRONG><a name="[63a]"></a>OSAL_IsMailBoxEmpty(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal_msg.o(i._Z19OSAL_IsMailBoxEmptyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_IsMailBoxEmpty(unsigned char) &rArr; OSAL_PortIsMailBoxEmpty(void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskMailBoxHandle(unsigned char)
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortIsMailBoxEmpty(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CreateTempTaskWithPendingMessage()
</UL>

<P><STRONG><a name="[709]"></a>OSAL_ListDeleteHead(OSAL_List*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, osal_list.o(i._Z19OSAL_ListDeleteHeadP9OSAL_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSAL_ListDeleteHead(OSAL_List*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDelete(OSAL_List*)
</UL>

<P><STRONG><a name="[9d3]"></a>OSAL_ListDeleteTail(OSAL_List*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, osal_list.o(i._Z19OSAL_ListDeleteTailP9OSAL_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSAL_ListDeleteTail(OSAL_List*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[710]"></a>OSAL_PortTaskCreate(void(*)(void*), const signed char*, unsigned short, void*, unsigned short, unsigned*, unsigned*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, osal_port.o(i._Z19OSAL_PortTaskCreatePFvPvEPKatS_tPjS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_PortTaskCreate(void(*)(void*), const signed char*, unsigned short, void*, unsigned short, unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CreateTempTaskWithPendingMessage()
</UL>

<P><STRONG><a name="[711]"></a>OSAL_PortTaskDelete()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osal_port.o(i._Z19OSAL_PortTaskDeletev))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskDelete(unsigned char)
</UL>

<P><STRONG><a name="[98]"></a>Prealarm_siren_exec()</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, prealarm_handler.o(i._Z19Prealarm_siren_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Prealarm_siren_exec() &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityISNSirenAfterSafety(unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrGuardCodeCycleFlag()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGuardCodeFlag()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCode()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_panel_siren_active()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> prealarm_handler.o(i._Z19Prealarm_siren_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[516]"></a>ProcessAddEntityCmd(unsigned char*, unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, apipckprocessing.o(i._Z19ProcessAddEntityCmdPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = ProcessAddEntityCmd(unsigned char*, unsigned char*) &rArr; StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*) &rArr; AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short) &rArr; AddEntityBody(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEntityValue(unsigned short)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCmdProcess(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[861]"></a>ProcessAddKfCUIUser(unsigned short, unsigned short*)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, apicopyuiprocessing.o(i._Z19ProcessAddKfCUIUsertPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = ProcessAddKfCUIUser(unsigned short, unsigned short*) &rArr; AddKfCUIUser(unsigned short, unsigned short, unsigned short) &rArr; CopyKFEntity(unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKfCUIUser(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDevicesPerUser(unsigned short, unsigned short*, unsigned char*, bool)
</UL>

<P><STRONG><a name="[9d6]"></a>ProcessDeleteAllCmd(unsigned char, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, apicmdprocessing.o(i._Z19ProcessDeleteAllCmdhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProcessDeleteAllCmd(unsigned char, unsigned char*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetAllCmd(unsigned char, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[9d7]"></a>ProcessGetEntityCmd(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, apipckprocessing.o(i._Z19ProcessGetEntityCmdPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProcessGetEntityCmd(unsigned char*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[69]"></a>RB_APP_COMMAND_exec()</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, rb_app.o(i._Z19RB_APP_COMMAND_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = RB_APP_COMMAND_exec() &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_clear_packet_pending()
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_packet_pending()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_COMMAND_wait_for_comm(unsigned char*)
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[6a]"></a>RB_APP_MACHINE_exec()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rb_app.o(i._Z19RB_APP_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RB_APP_MACHINE_exec() &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_open_protocol_F()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[2ff]"></a>RF_INPUT_get_status(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ram_rf_input_dev.o(i._Z19RF_INPUT_get_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_INPUT_get_status(unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_IsPrevInputTlbMsgAcked(unsigned char)
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetInputTlbMsgWaitAck(unsigned char)
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetTlbMsgAckStatus(MSME_MSG_ACK_STATUS_E)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfInputStatusBuilder(unsigned)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreviosTamperState(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_device_status(U_DEV_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[3d5]"></a>RF_SEC_ZONE_monitor()</STRONG> (Thumb, 744 bytes, Stack size 56 bytes, ram_rf_sec_zone.o(i._Z19RF_SEC_ZONE_monitorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = RF_SEC_ZONE_monitor() &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_SetOpenZoneAndTamperBits(unsigned)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecTamperFault(bool)
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextScan()
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[13c]"></a>RSUTaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rsu_task.o(i._Z19RSUTaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[72a]"></a>RSU_FreeInfoBuffers(S_RSU_MANAGER_INFO*)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rsu_task.o(i._Z19RSU_FreeInfoBuffersP18S_RSU_MANAGER_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RSU_FreeInfoBuffers(S_RSU_MANAGER_INFO*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[643]"></a>RSU_GetTargetCpuEsi(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rsu_task.o(i._Z19RSU_GetTargetCpuEsih))
<BR><BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDeviceTableOffset(unsigned char, unsigned)
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[c68]"></a>RadioApi_IsRfInIdle()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfdrv_api.o(i._Z19RadioApi_IsRfInIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRFIdle()
</UL>

<P><STRONG><a name="[8e1]"></a>Radio_CalFreq_FSCAL(unsigned char*, unsigned char*)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z19Radio_CalFreq_FSCALPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Radio_CalFreq_FSCAL(unsigned char*, unsigned char*) &rArr; Radio_GotoIdle() &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[a69]"></a>Radio_GetFreqOffset()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z19Radio_GetFreqOffsetv))
<BR><BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[9de]"></a>Radio_HandleTraffic()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z19Radio_HandleTrafficv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Radio_HandleTraffic() &rArr; Radio_RxFifoReceiveHandler(unsigned char) &rArr; Radio_IsRxTxOverflow(unsigned char, unsigned char) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_TxFifoSendHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[9e0]"></a>Radio_ReadWriteRegs(unsigned, unsigned, unsigned char*, int)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z19Radio_ReadWriteRegsjjPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_ReadWriteRegs(unsigned, unsigned, unsigned char*, int) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadStatistics(S_RF_ReqInfo*)
</UL>

<P><STRONG><a name="[64c]"></a>RemoveFromScheduler(void(*)(), tQ_TYPE)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, smartscheduler.o(i._Z19RemoveFromSchedulerPFvvE7tQ_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionId(void(*)())
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEventFromQ(sPriorityQ*, unsigned char)
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHighPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadTimeBaseScenario(tSCENARIO_ID)
</UL>

<P><STRONG><a name="[955]"></a>ResetRfSecZoneValid(int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z19ResetRfSecZoneValidi))
<BR><BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyKeypadEntity(int*, int, unsigned char*, bool)
</UL>

<P><STRONG><a name="[7d2]"></a>RetrieveFailedVideo(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, videoengine.o(i._Z19RetrieveFailedVideohh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RetrieveFailedVideo(unsigned char, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[604]"></a>RxMngRegForCommTask(unsigned char, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, comm_stm_rx_manager.o(i._Z19RxMngRegForCommTaskht))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = RxMngRegForCommTask(unsigned char, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[9e1]"></a>SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)</STRONG> (Thumb, 692 bytes, Stack size 64 bytes, security.o(i._Z19SAFETY_MACHINE_execP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_Disable()
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_Enable()
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetIsVATDisabled()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSafetyPending(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
</UL>

<P><STRONG><a name="[7c5]"></a>SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, security.o(i._Z19SECURITY_arm_checks25SECURITY_PARTITION_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; SECURITY_zone_partition(SECURITY_PARTITION_TYPE_E, unsigned char, E_DETECTOR_SCAN_MODE, unsigned char*, unsigned char*) &rArr; RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKFLowBattPrevent()
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKFLowBattPrevent(bool)
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_tamper()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_OpenTamper()
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_zone_partition(SECURITY_PARTITION_TYPE_E, unsigned char, E_DETECTOR_SCAN_MODE, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveOpenZoneLed(U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*, bool)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[67a]"></a>SECURITY_get_status()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, security.o(i._Z19SECURITY_get_statusv))
<BR><BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_tag_present_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
</UL>

<P><STRONG><a name="[7c7]"></a>SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, security.o(i._Z19SECURITY_remote_arm7E_MEDIAhhhbP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*) &rArr; SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_SetSliderWindowTest()
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertSecStateToQ()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[4aa]"></a>SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, security.o(i._Z19SECURITY_set_event116SECURITY_EVENT_E10U_DEV_TYPEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char) &rArr; SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char) &rArr; IsAttackStateBlock(C_DEV_TYPE_E, unsigned char) &rArr; IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisarmPanel(char*, unsigned short, unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[73c]"></a>SMT_ClearActiveFlag()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smt_api.o(i._Z19SMT_ClearActiveFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[800]"></a>SMT_FlipAndWriteKey(unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, smt_api.o(i._Z19SMT_FlipAndWriteKeyPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SMT_FlipAndWriteKey(unsigned char*) &rArr; InternalFlash_WriteId(unsigned short, unsigned char*) &rArr; InternalFlash_Write(unsigned short, unsigned char*, unsigned short) &rArr; WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteId(unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[651]"></a>SaveVideoFailRecord(U_FAILED_VIDEO_RECORD*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, videoengine.o(i._Z19SaveVideoFailRecordP21U_FAILED_VIDEO_RECORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SaveVideoFailRecord(U_FAILED_VIDEO_RECORD*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFailRecord()
</UL>

<P><STRONG><a name="[9e8]"></a>SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, priorityq.o(i._Z19SendItemToPriorityQP10sPriorityQPvhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewPriorityQEvent(t_node*, void*, unsigned char)
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaceEventInPriorityQ(sPriorityQ*, t_node*)
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPriorityQEmpty(sPriorityQ*)
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPriorityQFull(sPriorityQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long)
</UL>

<P><STRONG><a name="[9ec]"></a>SendParamsByRequest()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sendrfparameters.o(i._Z19SendParamsByRequestv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendParamsByRequest() &rArr; KickRfParamsMachine() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickRfParamsMachine()
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[9e4]"></a>SetKFLowBattPrevent(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_key_fob.o(i._Z19SetKFLowBattPreventb))
<BR><BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
</UL>

<P><STRONG><a name="[613]"></a>SetMaxEndIndication(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, comm_stm_rx_manager.o(i._Z19SetMaxEndIndicationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SetMaxEndIndication(unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxParsingSkip(unsigned char)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[58c]"></a>SetSirenTamperFault(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_db.o(i._Z19SetSirenTamperFaultb))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_monitor()
</UL>

<P><STRONG><a name="[88d]"></a>StartJammingHandler(bool)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, c_proc.o(i._Z19StartJammingHandlerb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartJammingHandler(bool) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9ed]"></a>StartLookingForFile(VIDEO_COMM_SESSION_S*)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, filesystemmanagment.o(i._Z19StartLookingForFileP20VIDEO_COMM_SESSION_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = StartLookingForFile(VIDEO_COMM_SESSION_S*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
</UL>

<P><STRONG><a name="[638]"></a>StartModifyHandling(unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, apipckprocessing.o(i._Z19StartModifyHandlingtth))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartModifyHandling(unsigned short, unsigned short, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_key_fob_data()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardUser()
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyKeypadEntity(int*, int, unsigned char*, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyCUIEntry(int*, unsigned char*, bool*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[9ee]"></a>StartVideoRFMahcine()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, videoengine.o(i._Z19StartVideoRFMahcinev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartVideoRFMahcine() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
</UL>

<P><STRONG><a name="[9ef]"></a>Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, poseso_listen.o(i._Z19Start_Poseso_LISTEN20POSESO_LISTEN_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListenModeBypassToChannel(int)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListenModeBypassVideoChannel(int)
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckPosesoOnLineFlag(bool)
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosesoTimeWin(POSESO_LISTEN_TYPE_E)
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetListenMaxRetryParam(unsigned char, unsigned)
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOnlineMaxRetryParam(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_precondition_exec()
</UL>

<P><STRONG><a name="[9f6]"></a>TAMPER_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, security.o(i._Z19TAMPER_MACHINE_execP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = TAMPER_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*) &rArr; ALARM_off() &rArr; SetSirenOff() &rArr; CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
</UL>

<P><STRONG><a name="[1a6]"></a>Test_ACPowerControl(char*, unsigned short, unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, test_func.o(i._Z19Test_ACPowerControlPcth))
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>Test_ReadBatCharger(char*, unsigned short, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, test_func.o(i._Z19Test_ReadBatChargerPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Test_ReadBatCharger(char*, unsigned short, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargerEnabled()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>Test_RfSetFrequency(char*, unsigned short, unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, test_func.o(i._Z19Test_RfSetFrequencyPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Test_RfSetFrequency(char*, unsigned short, unsigned char) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioAPI_FreqToRegister(void*, void*, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>Test_RfSetPowerMode(char*, unsigned short, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, test_func.o(i._Z19Test_RfSetPowerModePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Test_RfSetPowerMode(char*, unsigned short, unsigned char) &rArr; RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char) &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>Timer0_CH0_Isr_exec()</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, m_pdaprocess.o(i._Z19Timer0_CH0_Isr_execv))
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[1ff]"></a>TimerTimeoutExpired(SYS_TASK*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, processsystemtask.o(i._Z19TimerTimeoutExpiredP8SYS_TASKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerTimeoutExpired(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
</UL>

<P><STRONG><a name="[905]"></a>UART_DisableUart0Tx()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart_api.o(i._Z19UART_DisableUart0Txv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DisableUart0Tx() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemGoPowerDown()
</UL>

<P><STRONG><a name="[534]"></a>UART_DisableUart1Tx()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart_api.o(i._Z19UART_DisableUart1Txv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DisableUart1Tx() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Power_Off(unsigned char)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_HE910_Module_PowerUp(unsigned)
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemGoPowerDown()
</UL>

<P><STRONG><a name="[9f8]"></a>UART_MuxSendMessage(unsigned char, unsigned char*, unsigned short*, unsigned short*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gsm_mux_control.o(i._Z19UART_MuxSendMessagehPhPtS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_MuxSendMessage(unsigned char, unsigned char*, unsigned short*, unsigned short*) &rArr; GsmMuxAllocateBuffer(unsigned char, unsigned short) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxFreeBuffer(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxAllocateBuffer(unsigned char, unsigned short)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOneLenByte(unsigned short)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxBuilder(unsigned char, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
</UL>

<P><STRONG><a name="[9f9]"></a>UpdateBatteryStatus(DEVICE_TYPE, unsigned char, C_DEV_TYPE_E, unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, devicebatterystate.o(i._Z19UpdateBatteryStatus11DEVICE_TYPEh12C_DEV_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = UpdateBatteryStatus(DEVICE_TYPE, unsigned char, C_DEV_TYPE_E, unsigned char) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ConfigOnCDT(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[33f]"></a>UpdateEventsTracker(unsigned char*, unsigned char, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cpui_func.o(i._Z19UpdateEventsTrackerPhht))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateEventsTracker(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[138]"></a>VATTaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vat_task.o(i._Z19VATTaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>VOICE_TRANSMIT_exec()</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, voice_manager.o(i._Z19VOICE_TRANSMIT_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = VOICE_TRANSMIT_exec() &rArr; VOICE_close_call(E_VOICE_DEVICE) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_voice_call(S_MESSAGE_COMM_INFO*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCommInfoStruct()
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_close_call(E_VOICE_DEVICE)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> voice_manager.o(i._Z19VOICE_TRANSMIT_execv)
</UL>
<P><STRONG><a name="[9fc]"></a>VideoCommandsParser()</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, videocommandsparser.o(i._Z19VideoCommandsParserv))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = VideoCommandsParser() &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoPacket()
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[81]"></a>VideoRFMachine_exec()</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, videoengine.o(i._Z19VideoRFMachine_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = VideoRFMachine_exec() &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSaveFileIdle()
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLastAckedPacket()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCameraCommand(void*, unsigned char, unsigned char)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRFProcess(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfVideoQueueFull()
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityDelayedSliderTest()
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SliderTestDone()
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pre_alarm_rkp_notification()
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_TriggerDelayedSliderTest()
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_SliderTestPending()
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoQ_PurgeClosedWindowFiles()
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurrentTransferActive(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseRFTransferEvent(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextVideoRFTransfer()
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSessionIndicator()
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionFailed()
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompensateForNoVidReady(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogVideoEvent(void*, VIDEO_STATUS_E)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> videoengine.o(i._Z19VideoRFMachine_execv)
</UL>
<P><STRONG><a name="[7c3]"></a>blank_check_sectors(unsigned, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, flash_iap_api.o(i._Z19blank_check_sectorsjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blank_check_sectors(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_flash_iap_api_c_iap_func___Z28OSAL_PortDisableCpuInterruptv
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_flash_iap_api_c_iap_func___Z27OSAL_PortEnableCpuInterruptv
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchActiveSectorAndPage(Sector_Page_s*)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeedNextFreePage(Sector_Page_s*, Sector_Page_s*)
</UL>

<P><STRONG><a name="[67c]"></a>calc_next_ack_state()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, videohandler.o(i._Z19calc_next_ack_statev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = calc_next_ack_state() &rArr; GetGSMModuleType() &rArr; CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_video_ack()
</UL>

<P><STRONG><a name="[612]"></a>findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, comm_common_funcs.o(i._Z19findEndOfTableIndexP23S_GSM_FUNC_TABLE_HANDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTableCommandIndex(S_GSM_FUNC_TABLE_HANDLE*, unsigned short)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[a0a]"></a>getAlwaysAttachMode()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z19getAlwaysAttachModev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getAlwaysAttachMode() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[454]"></a>get_CURRENT_USER_id()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_user.o(i._Z19get_CURRENT_USER_idv))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertSecStateToQ()
</UL>

<P><STRONG><a name="[871]"></a>get_DATE_STRING_ptr(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ram_strings.o(i._Z19get_DATE_STRING_ptrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_DATE_STRING_ptr(unsigned short) &rArr; FL_DATE_STRING_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DATE_STRING_logical_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init_params(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2fa]"></a>get_RF_SEC_ZONE_ptr(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z19get_RF_SEC_ZONE_ptri))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDeleteEntryMessages()
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVS_loss_and_inactivity_check()
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOpenRxCmd(unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_GET_BIT_RESULT_exec()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJDNag(unsigned)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpddAckReceived(unsigned char, unsigned char, bool)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_camera_cover_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_BIT_Result_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_SKC_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_Fog_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ConfigIPDESensitivity(unsigned char)
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngineSendConfig(int, int)
<LI><a href="#[c3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_IsPrevRfDetectorTlbMsgAcked(unsigned char)
<LI><a href="#[c37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetRfDetectorTlbMsgWaitAck(unsigned char)
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetTlbMsgAckStatus(MSME_MSG_ACK_STATUS_E)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDNag()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFgPhotoTable(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ErrorMessageCheckCode(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ClearDeviceUpdateBit(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ArmAwarenessConfig(unsigned char*, void*)
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceInfoResp(unsigned char*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSecZoneStatusBuilder(unsigned)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityMarkCloseScenario(unsigned char)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEEramMem(bool)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreviosTamperState(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SendOpenRx()
</UL>

<P><STRONG><a name="[313]"></a>get_TIME_STRING_ptr(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ram_strings.o(i._Z19get_TIME_STRING_ptrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_TIME_STRING_ptr(unsigned short) &rArr; FL_TIME_STRING_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_TIME_STRING_logical_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init_params(unsigned char, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPeriodic(unsigned short, unsigned char*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[7e8]"></a>get_user_device_ptr(unsigned char, unsigned short, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, process_income_message.o(i._Z19get_user_device_ptrhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_user_device_ptr(unsigned char, unsigned short, unsigned char) &rArr; FL_RKP_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a0c]"></a>initIntefaceMachine()</STRONG> (Thumb, 316 bytes, Stack size 4 bytes, kpdoutstub.o(i._Z19initIntefaceMachinev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = initIntefaceMachine() &rArr; KPDFuncRegister(int(*)(int, int, int*, void*), const char*, void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPDFuncRegister(int(*)(int, int, int*, void*), const char*, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0e]"></a>is_gsm_data_call_on()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_comm.o(i._Z19is_gsm_data_call_onv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = is_gsm_data_call_on() &rArr; Refresh_GSM_Stat() &rArr; GSM_decode_status(S_GSM_STATUS*) &rArr; GSM_JammingRestoreActions() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_GSM_Stat()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[b98]"></a>is_sec_device_valid(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z19is_sec_device_validh))
<BR><BR>[Called By]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
</UL>

<P><STRONG><a name="[a8]"></a>primeter_entry_exec()</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, prealarm_handler.o(i._Z19primeter_entry_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = primeter_entry_exec() &rArr; SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool) &rArr; tag_reader_IsEfmTr5WithEntryBeeps() &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> prealarm_handler.o(i._Z19primeter_entry_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[70]"></a>AFP_APP_COMMAND_exec()</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, afp_app.o(i._Z20AFP_APP_COMMAND_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = AFP_APP_COMMAND_exec() &rArr; AFP_APP_decode_command(unsigned char*) &rArr; create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_clear_packet_pending()
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_packet_pending()
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_total_size(unsigned char)
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_decode_command(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[71]"></a>AFP_APP_MACHINE_exec()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, afp_app.o(i._Z20AFP_APP_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AFP_APP_MACHINE_exec() &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_open_protocol_F()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[a13]"></a>AIT_ReadADLRuleEntry(S_ADLRuleInfo*, unsigned char, unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ait_stub.o(i._Z20AIT_ReadADLRuleEntryP13S_ADLRuleInfohPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AIT_ReadADLRuleEntry(S_ADLRuleInfo*, unsigned char, unsigned char*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
</UL>

<P><STRONG><a name="[183]"></a>AccessByConfigAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z20AccessByConfigActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AccessByConfigAction(S_CPUI_ButtonInfo*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[749]"></a>ActivateResetMachine(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, process_income_message.o(i._Z20ActivateResetMachineh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ActivateResetMachine(unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftResetAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[775]"></a>AttackDbElementClose(TAttackDataBase*)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, cyberattackstates.o(i._Z20AttackDbElementCloseP15TAttackDataBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AttackDbElementClose(TAttackDataBase*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateLockoutParamsReset(TAttackDataBase*)
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PublicParamsReset(TAttackDataBase*)
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementExec(TAttackDataBase*, bool)
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool)
</UL>

<P><STRONG><a name="[5c4]"></a>CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, codec_api.o(i._Z20CODEC_SetMasterSlavehhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_set_codec_mode(int)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
</UL>

<P><STRONG><a name="[344]"></a>CPUI_GetStateTimeOut(unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, cpui_func.o(i._Z20CPUI_GetStateTimeOutt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CPUI_GetStateTimeOut(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetTriggerOrLevelState(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[378]"></a>CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, cpui_func.o(i._Z20CPUI_PerformPlugBeephhPP15S_CPUI_BeepInfoh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char) &rArr; CPUI_StopBeep(unsigned char) &rArr; CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_Beep(unsigned, int, int, unsigned, int, int, void(*)())
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[d4]"></a>CPUI_SendStopBeepMsg()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cpui_func.o(i._Z20CPUI_SendStopBeepMsgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CPUI_SendStopBeepMsg() &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_func.o(i._Z16CPUI_PerformBeephhPP15S_CPUI_BeepInfoh)
</UL>
<P><STRONG><a name="[bd5]"></a>CPUI_SetAlarmDetails(unsigned char, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpui_func.o(i._Z20CPUI_SetAlarmDetailshh))
<BR><BR>[Called By]<UL><LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[57]"></a>C_PROC_TRANSMIT_exec()</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, c_proc.o(i._Z20C_PROC_TRANSMIT_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = C_PROC_TRANSMIT_exec() &rArr; ProcessI2cProtocol(unsigned char*, unsigned char) &rArr; ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBattHandler()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse(unsigned char*, int)
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_C_PROC_EVENT_ptr()
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_C_PROC_EVENT()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_C_PROC_Q_empty()
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_rpc_ack(unsigned short)
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_alloc_interim_buffer(unsigned char**, unsigned)
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_build_ack_msg(unsigned char*, C_PROC_ACK_E)
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_build_msg(unsigned char*, S_C_PROC_EVENT*)
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_build_frame(unsigned char*, unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z20C_PROC_TRANSMIT_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[a16]"></a>C_PROC_build_ack_msg(unsigned char*, C_PROC_ACK_E)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, c_proc.o(i._Z20C_PROC_build_ack_msgPh12C_PROC_ACK_E))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[476]"></a>C_PROC_get_tx_driver()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, c_proc.o(i._Z20C_PROC_get_tx_driverv))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
</UL>

<P><STRONG><a name="[a1b]"></a>CalculateNewDeviceID(int, int, int)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, incomingbufferparser.o(i._Z20CalculateNewDeviceIDiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CalculateNewDeviceID(int, int, int) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildMasterLearnPayLoad(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[8d]"></a>ChangeCommState_exec()</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, communicationstate.o(i._Z20ChangeCommState_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ChangeCommState_exec() &rArr; SendStateChangeMsg() &rArr; DecisionAboutPosesoPoseseFogChain(COMM_STATUS_INPANEL_E) &rArr; StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Poseso_LISTEN_exec()
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_ico_signal_recieved()
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_ico_msg_in_progress()
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_ico_progress()
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomNum(unsigned long, unsigned long)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStateChangeMsg()
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> communicationstate.o(i._Z20ChangeCommState_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[74b]"></a>CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, deviceconfigmachine.o(i._Z20CheckDeviceNeedReCfghhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool) &rArr; LockCfgChanged(unsigned char) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_PANIC_state()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTypedecode()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCfgChanged(unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHandshakeDecision(RX_COMMAND, PRIVATE_ID)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[4c]"></a>CheckDtmfTimout_exec()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, voice_manager.o(i._Z20CheckDtmfTimout_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CheckDtmfTimout_exec() &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialHangUp()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> voice_manager.o(i._Z10DialHangUpv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[655]"></a>CheckForRepeaterinDB()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, checkdevicetype.o(i._Z20CheckForRepeaterinDBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckForRepeaterinDB()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
</UL>

<P><STRONG><a name="[6d4]"></a>CtrlSendTableCommand(unsigned char, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gsm_stm_control.o(i._Z20CtrlSendTableCommandht))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = CtrlSendTableCommand(unsigned char, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[6b3]"></a>DATALINK_free_buffer(unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, data_link_manager.o(i._Z20DATALINK_free_bufferPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DATALINK_free_buffer(unsigned char*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_handler_F(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[a20]"></a>DATALINK_state_frame()</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, data_link_manager.o(i._Z20DATALINK_state_framev))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = DATALINK_state_frame() &rArr; EL_L2_handler_F(unsigned char*, unsigned char*) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_handler_F(unsigned char*, unsigned char*)
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_drop_packet_processed()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
</UL>

<P><STRONG><a name="[a22]"></a>DATALINK_state_start()</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, data_link_manager.o(i._Z20DATALINK_state_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DATALINK_state_start() &rArr; MAINTENANCE_MACHINE_start() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_get_state()
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_fake_scptr(unsigned char*)
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
</UL>

<P><STRONG><a name="[7bd]"></a>DIAL_RETRY_send_STUN(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dial_retry.o(i._Z20DIAL_RETRY_send_STUNP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DIAL_RETRY_send_STUN(S_MESSAGE_COMM_INFO*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_STUN_read()
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
</UL>

<P><STRONG><a name="[a25]"></a>DMASendMessageToTask(unsigned char, unsigned short, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dma_func.o(i._Z20DMASendMessageToTaskhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DMASendMessageToTask(unsigned char, unsigned short, unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsgFromInt()
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ISR()
</UL>

<P><STRONG><a name="[6af]"></a>EL_get_serial_number()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z20EL_get_serial_numberv))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[aa]"></a>ERS_all_devices_exec()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, do_it_yourself.o(i._Z20ERS_all_devices_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ERS_all_devices_exec() &rArr; FL_RF_SEC_ZONE_ers(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ers(unsigned char)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_ers(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> do_it_yourself.o(i._Z20ERS_all_devices_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[105]"></a>FL_RF_INPUT_DEV_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z20FL_RF_INPUT_DEV_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_CheckIfDeviceValid(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*)
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_ers(unsigned char)
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDeviceBatteryLevelTable(Inf4SendTechinfInfoTask_t*)
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_entry(unsigned char)
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_input_dev_init(unsigned char, unsigned char)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_valid(unsigned char)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_DEV_monitor()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
</UL>
<P><STRONG><a name="[a27]"></a>FL_RF_OUTPUT_DEV_ers(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fl_types.o(i._Z20FL_RF_OUTPUT_DEV_ersh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FL_RF_OUTPUT_DEV_ers(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
</UL>

<P><STRONG><a name="[6ef]"></a>FL_RF_SEC_ZONE_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fl_types.o(i._Z20FL_RF_SEC_ZONE_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_RF_SEC_ZONE_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[9b1]"></a>FillEntityList4Group(unsigned short, unsigned short*, rules_arg_t*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, apipckprocessing.o(i._Z20FillEntityList4GrouptPtP11rules_arg_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FillEntityList4Group(unsigned short, unsigned short*, rules_arg_t*) &rArr; AddEntityGroup2List(unsigned short, rules_arg_t*, FitEntitiesList_t*, unsigned short*) &rArr; CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityGroup2List(unsigned short, rules_arg_t*, FitEntitiesList_t*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[817]"></a>FindFirstSirenTamper()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ram_siren.o(i._Z20FindFirstSirenTamperv))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a28]"></a>GSM_LsnResetStmFlags()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsm_stm_listen.o(i._Z20GSM_LsnResetStmFlagsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GSM_LsnResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[78d]"></a>GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 516 bytes, Stack size 48 bytes, gsm_message.o(i._Z20GSM_MESSAGE_send_msgP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLastChannelInDialSequence(COMMUNICATION_CHANNEL_E, unsigned char, unsigned char*)
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoiceStartFlag()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BypassToChannel(COMMUNICATION_CHANNEL_E)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_clear_nack_received()
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_clear_ack_received()
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_nack_received()
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_ack_received()
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_exec()
</UL>

<P><STRONG><a name="[a2a]"></a>GSM_MsgResetStmFlags()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsm_stm_message.o(i._Z20GSM_MsgResetStmFlagsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GSM_MsgResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[a2b]"></a>GSM_supervision_test()</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, scheduler.o(i._Z20GSM_supervision_testv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GSM_supervision_test() &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_comm_fault_timers()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
</UL>

<P><STRONG><a name="[60]"></a>G_PROC_TRANSMIT_exec()</STRONG> (Thumb, 1126 bytes, Stack size 40 bytes, gsm_comm.o(i._Z20G_PROC_TRANSMIT_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = G_PROC_TRANSMIT_exec() &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBattHandler()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrChannel()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLastChannelInDialSequence(COMMUNICATION_CHANNEL_E, unsigned char, unsigned char*)
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommInformation()
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoiceStartFlag()
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_ack_msg(unsigned char*, G_PROC_ACK_E)
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_build_frame(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BypassToChannel(COMMUNICATION_CHANNEL_E)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gsm_comm.o(i._Z20G_PROC_TRANSMIT_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[a2d]"></a>G_PROC_build_ack_msg(unsigned char*, G_PROC_ACK_E)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gsm_comm.o(i._Z20G_PROC_build_ack_msgPh12G_PROC_ACK_E))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[2f7]"></a>GetCallMeLedArgument()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process_income_message.o(i._Z20GetCallMeLedArgumentv))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[a3b]"></a>GetCyberMachineState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cybermachine.o(i._Z20GetCyberMachineStatev))
<BR><BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[84b]"></a>GetDataLinkTransport()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_link_manager.o(i._Z20GetDataLinkTransportv))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketTimeout(TimerStruct_S*)
</UL>

<P><STRONG><a name="[944]"></a>GetDeviceAttackState(C_DEV_TYPE_E, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cyberattackstates.o(i._Z20GetDeviceAttackState12C_DEV_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDeviceAttackState(C_DEV_TYPE_E, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAttackStateBlock(C_DEV_TYPE_E, unsigned char)
</UL>

<P><STRONG><a name="[30a]"></a>GetFieldIDByteValue1(unsigned short, unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apicmdprocessing.o(i._Z20GetFieldIDByteValue1tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCopyAllCUI2UIHandler_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDuplicateCUI(unsigned char*, int, int)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_adjust_partition_by_user(SECURITY_PARTITION_TYPE_E*, unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelAllPerif(int, int, int*, void*)
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPrivilege2UI(unsigned short)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateKF3ConfigBit(unsigned short, unsigned short)
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelParallel_UI_Entity(unsigned)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrintEntity(unsigned char)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[2bc]"></a>GetFileSizeInSectors()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z20GetFileSizeInSectorsv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_video_sequences_timeout()
</UL>

<P><STRONG><a name="[593]"></a>GetFlashEraserStatus()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, processflash.o(i._Z20GetFlashEraserStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[6e8]"></a>GetGeneralInactivity()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inactivity.o(i._Z20GetGeneralInactivityv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetGeneralInactivity() &rArr; CONTROL_PANEL_get_sysinactivity_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysinactivity_ptr()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[2c5]"></a>GetGeneralParameters()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main_power.o(i._Z20GetGeneralParametersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewNightModeAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeAction(S_CPUI_ButtonInfo*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Entry_Exit_Beeps(unsigned char)
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChimeOrInactivityCntBit()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPowerMsgEn()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pre_alarm_rkp_notification()
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Perimeter_window_value()
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_VideoParamsConfig(unsigned char*, void*)
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMsgLog(unsigned char*)
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_chime_inactivity_cnt(bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngine_BuildVidParamsBuffer(unsigned char*, unsigned char, RF_SEC_ZONE_TYPE_E)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanelBeepsConfig(int, int, int*, void*)
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[6d0]"></a>GetModuleFunctionRow(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, comm_common_funcs.o(i._Z20GetModuleFunctionRowh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetModuleFunctionRow(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[a3e]"></a>GetPointerToFunction(tFUNCTIONS_ID)</STRONG> (Thumb, 1208 bytes, Stack size 0 bytes, scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID))
<BR><BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHighPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadTimeBaseScenario(tSCENARIO_ID)
</UL>

<P><STRONG><a name="[3f8]"></a>GetPowerSaveTestFlag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z20GetPowerSaveTestFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcMsgToBeSent()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[a2f]"></a>GetSendPacketTimeOut()</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, rfutilfunc.o(i._Z20GetSendPacketTimeOutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetSendPacketTimeOut()
</UL>
<BR>[Calls]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfRetryOrBroadcast()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfMsg()
</UL>

<P><STRONG><a name="[759]"></a>GetVideoHandlerState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, videohandler.o(i._Z20GetVideoHandlerStatev))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIDEO_DIAL_exec()
</UL>

<P><STRONG><a name="[7d4]"></a>GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ram_rf_sec_zone.o(i._Z20GetVirtualDeviceTypeP21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDualSignalDevice(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexInstantAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDetectionMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_restore_msg(unsigned char)
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_active_msg(unsigned char)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[61a]"></a>GetVoiceWindowStatus()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, voice_manager.o(i._Z20GetVoiceWindowStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[30b]"></a>GsmGetFirmWareVerPtr()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gsm_api.o(i._Z20GsmGetFirmWareVerPtrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmGetFirmWareVerPtr()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[699]"></a>GsmMuxAllocateBuffer(unsigned char, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gsm_mux_control.o(i._Z20GsmMuxAllocateBufferht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GsmMuxAllocateBuffer(unsigned char, unsigned short) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOneLenByte(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MuxSendMessage(unsigned char, unsigned char*, unsigned short*, unsigned short*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[610]"></a>GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, comm_common_funcs.o(i._Z20GsmSendMessageToUarthhhPhtjPth))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char) &rArr; GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MuxSendMessage(unsigned char, unsigned char*, unsigned short*, unsigned short*)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[46]"></a>HE910_ExtructRingNum(unsigned char, char*, char**, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gsm_module_funcs_he910.o(i._Z20HE910_ExtructRingNumhPcPS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HE910_ExtructRingNum(unsigned char, char*, char**, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[38b]"></a>I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, i2c_api.o(i._Z20I2C_ExecuteOperationhhthhPhjtjjhhS_PjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>

<P><STRONG><a name="[44f]"></a>INIT_set_new_image_a(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, init.o(i._Z20INIT_set_new_image_ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = INIT_set_new_image_a(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
</UL>

<P><STRONG><a name="[450]"></a>INIT_set_new_image_c(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(i._Z20INIT_set_new_image_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = INIT_set_new_image_c(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
</UL>

<P><STRONG><a name="[a31]"></a>IncomingBufferParser()</STRONG> (Thumb, 4524 bytes, Stack size 584 bytes, incomingbufferparser.o(i._Z20IncomingBufferParserv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500 + Unknown Stack Size
<LI>Call Chain = IncomingBufferParser() &rArr; SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID) &rArr; IPD_Or_PIR_ConfigCheck(unsigned char*) &rArr; RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Old_RfApi_CRC16(void*, int)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSupervisory(unsigned char)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler2(unsigned char, unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBatteryStatus(DEVICE_TYPE, unsigned char, C_DEV_TYPE_E, unsigned char)
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VerifyCorrectISNVersion(unsigned char)
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfFlagsInitMode()
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMsgLog(unsigned char*)
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SerialNumberCheckInMemoryMap(DEVICE_TYPE, unsigned char*)
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLastTransmissionFromQueue(unsigned char)
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoReplyMessage(RX_COMMAND*, unsigned char)
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommandsParser()
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendParamsByRequest()
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfSequenceActive()
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeRx(unsigned char*)
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpdCommandsParser()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUnlocked(unsigned char, unsigned char, unsigned char)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler3()
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfDeviceBelongsToSystem()
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxPacketRssiLqiValue(const unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_Or_PIR_ConfigCheck(unsigned char*)
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateNewDeviceID(int, int, int)
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomeNewProtocol(unsigned char*)
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacketToLogger(unsigned char*, unsigned char)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDecision(RX_COMMAND, ID_BUFFER, PRIVATE_ID*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberCheck()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTypedecode()
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCountersToDataBase()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUpdates()
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCyberMachineState()
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVirusMsgThisPanel(unsigned char*)
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceRSSIinDataBase(int, unsigned char, unsigned char)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
</UL>

<P><STRONG><a name="[a56]"></a>InitPowerSupplyFlags(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main_power.o(i._Z20InitPowerSupplyFlagsh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[a3d]"></a>InternalFlash_ReadId(unsigned short, unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, internalflash_api.o(i._Z20InternalFlash_ReadIdtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InternalFlash_ReadId(unsigned short, unsigned char*) &rArr; InternalFlash_Read(unsigned short, unsigned char*, unsigned short) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Read(unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
</UL>

<P><STRONG><a name="[8c4]"></a>IsActivatedOdmSocket()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gsm_stm_streaming.o(i._Z20IsActivatedOdmSocketv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsActivatedOdmSocket()
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
</UL>

<P><STRONG><a name="[55a]"></a>IsBattEmptyOrMissing()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bat.o(i._Z20IsBattEmptyOrMissingv))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[bcb]"></a>IsBootWriteInProgres()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rb_app.o(i._Z20IsBootWriteInProgresv))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
</UL>

<P><STRONG><a name="[4e7]"></a>IsGsmGeneralStatusOk()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gsm_comm.o(i._Z20IsGsmGeneralStatusOkv))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[926]"></a>IsNewRepeaterVersion(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ram_rf_sec_zone.o(i._Z20IsNewRepeaterVersionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsNewRepeaterVersion(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_CopyIdFromRFMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
</UL>

<P><STRONG><a name="[bd0]"></a>IsOldOrNewRfProtocol(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z20IsOldOrNewRfProtocolPh))
<BR><BR>[Called By]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EarlyPacketFiltering(unsigned char*)
</UL>

<P><STRONG><a name="[a6c]"></a>IsRF_SEC_ZONE_ByPass()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z20IsRF_SEC_ZONE_ByPassv))
<BR><BR>[Called By]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[43a]"></a>IsVideoRFMachineIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, videoengine.o(i._Z20IsVideoRFMachineIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msme_q()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRepeatRkpStatus()
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
</UL>

<P><STRONG><a name="[2df]"></a>LED_DisableEnableLed(unsigned char, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, led_api.o(i._Z20LED_DisableEnableLedhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LED_DisableEnableLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTestAllLeds(int, int, int*, void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGsmLed(int, int, int*, void*)
</UL>

<P><STRONG><a name="[7b2]"></a>LoadTimeBaseScenario(tSCENARIO_ID)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, smartscheduler.o(i._Z20LoadTimeBaseScenario12tSCENARIO_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LoadTimeBaseScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointerToFunction(tFUNCTIONS_ID)
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long)
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFromScheduler(void(*)(), tQ_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateTimeBasedEvants(tFUNCTIONS_ID)
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewScenarios(tQ_TYPE)
</UL>

<P><STRONG><a name="[608]"></a>LsnSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gsm_stm_listen.o(i._Z20LsnSendAckToOrigTaskhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LsnSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
</UL>

<P><STRONG><a name="[47e]"></a>MAINTENANCE_update_C(bool)</STRONG> (Thumb, 934 bytes, Stack size 48 bytes, maintenance.o(i._Z20MAINTENANCE_update_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = MAINTENANCE_update_C(bool) &rArr; VideoEngineSendConfig(int, int) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_C_PROC_Q_empty()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_Reset_Jamming_Detector()
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInitJdItrAvaible(unsigned char)
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ConfigIPDESensitivity(unsigned char)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngineSendConfig(int, int)
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOpddConfig(int)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumOpdds()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
</UL>

<P><STRONG><a name="[118]"></a>MidRightButtonAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z20MidRightButtonActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MidRightButtonAction(S_CPUI_ButtonInfo*) &rArr; RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*) &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[6d9]"></a>MsgSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gsm_stm_message.o(i._Z20MsgSendAckToOrigTaskhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MsgSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
</UL>

<P><STRONG><a name="[a45]"></a>OSAL_CyclicBufferGet(OSAL_CyclicBuffer*, unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, osal_cyclic_buff.o(i._Z20OSAL_CyclicBufferGetP17OSAL_CyclicBufferPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSAL_CyclicBufferGet(OSAL_CyclicBuffer*, unsigned char*, unsigned short, unsigned short) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
</UL>

<P><STRONG><a name="[70c]"></a>OSAL_GetTaskHeapSize(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osal_task_util.o(i._Z20OSAL_GetTaskHeapSizeh))
<BR><BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
</UL>

<P><STRONG><a name="[6cd]"></a>OSAL_PortMutexCreate(unsigned**)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osal_port.o(i._Z20OSAL_PortMutexCreatePPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSAL_PortMutexCreate(unsigned**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init(unsigned char, unsigned char, unsigned)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[24a]"></a>OSAL_PortSuspendTask(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, osal_port.o(i._Z20OSAL_PortSuspendTaskj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_PortSuspendTask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTaskBusyPollAfterCapture(unsigned, unsigned, unsigned char)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MultipleSectorErase(unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_Init(unsigned char)
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910SetRTSLine(unsigned char)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910SetDTRLine(unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnableBpsk(unsigned char)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendMsg(unsigned char*, unsigned, unsigned)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reset()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init()
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_HE910_Module_PowerUp(unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_set_nv_mem
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_get_nv_mem
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_delay
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_change_frequency
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print2Uart(unsigned char*, unsigned short)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReadBatCharger(char*, unsigned short, unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicesSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetRSSI(char*, unsigned short, unsigned char)
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_EnterRadioTestMode(unsigned char)
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitOffsetArrays()
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FinishCodecSampleOperation()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_HandleReceivedCodecSample()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteHelpOperation(char*, unsigned short, unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteFlashErase(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[413]"></a>OSAL_SkipWhiteSpaces(char*, char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, osal_services.o(i._Z20OSAL_SkipWhiteSpacesPcS_))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PressButton(char*, unsigned short, unsigned char)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisarmPanel(char*, unsigned short, unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetRSSI(char*, unsigned short, unsigned char)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Tamper(char*, unsigned short, unsigned char)
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipCommaAndWhiteSps(char*, char*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ISN(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[331]"></a>PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, prealarm_handler.o(i._Z20PERIMETER_RKP_updateh23U_SECURITY_FAULT_STATUShbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PollIPDEWindowStates(unsigned char)
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityDelayedSliderTest()
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SliderTestDone()
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[514]"></a>ProcessNextModifyMsg(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, apipckprocessing.o(i._Z20ProcessNextModifyMsgPh))
<BR><BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCmdProcess(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[7eb]"></a>ProgramUserInterface(unsigned char*, S_POSESO_Reply*)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, process_income_message.o(i._Z20ProgramUserInterfacePhP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = ProgramUserInterface(unsigned char*, S_POSESO_Reply*) &rArr; ModifyCUIEntry(int*, unsigned char*, bool*) &rArr; AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int2(unsigned char*)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceNotDuplicate(unsigned char*, int, int)
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserId(unsigned char*)
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchValue2List(const LIST_S*, unsigned char)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyCUIEntry(int*, unsigned char*, bool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[96e]"></a>RFApiVSEGIsDeviceWOR(unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rfapivseg.o(i._Z20RFApiVSEGIsDeviceWORhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RFApiVSEGIsDeviceWOR(unsigned char, unsigned char) &rArr; RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[928]"></a>RFApiVSEG_SendReplay(unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfapivseg.o(i._Z20RFApiVSEG_SendReplayPh))
<BR><BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
</UL>

<P><STRONG><a name="[3d8]"></a>RF_INPUT_DEV_monitor()</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ram_rf_input_dev.o(i._Z20RF_INPUT_DEV_monitorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RF_INPUT_DEV_monitor() &rArr; RF_INPUT_valid(unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_valid(unsigned char)
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFInputTamperFault(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[a6]"></a>RPC_send_packet_exec()</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, rpc.o(i._Z20RPC_send_packet_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = RPC_send_packet_exec() &rArr; FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rpc.o(i._Z20RPC_send_packet_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[729]"></a>RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, rsu_task.o(i._Z20RSUTaskBufferHandlerP17OSAL_CyclicBufferPhtP18S_RSU_MANAGER_INFOP19S_RSU_ESI_FILE_INFOh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char) &rArr; FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferInsert(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGetDataSize(OSAL_CyclicBuffer*)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetRemoteBootFlashAdrres(unsigned char, unsigned char)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDeviceTableOffset(unsigned char, unsigned)
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBufferLength(unsigned short, S_RSU_ESI_FILE_INFO*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[724]"></a>RSU_CalcCRCFromFlash()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rsu_task.o(i._Z20RSU_CalcCRCFromFlashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = RSU_CalcCRCFromFlash() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[a4b]"></a>Radio_GetChipVersion(unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z20Radio_GetChipVersionPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Radio_GetChipVersion(unsigned char*) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
</UL>

<P><STRONG><a name="[a6a]"></a>Radio_GetRfFrequency()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z20Radio_GetRfFrequencyv))
<BR><BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
</UL>

<P><STRONG><a name="[a4d]"></a>Radio_ReadStatistics(S_RF_ReqInfo*)</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z20Radio_ReadStatisticsP12S_RF_ReqInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Radio_ReadStatistics(S_RF_ReqInfo*) &rArr; Radio_ReadWriteRegs(unsigned, unsigned, unsigned char*, int) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadWriteRegs(unsigned, unsigned, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[a4e]"></a>Radio_SetAttenuation(E_RfDrv_Attenuation)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z20Radio_SetAttenuation19E_RfDrv_Attenuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Radio_SetAttenuation(E_RfDrv_Attenuation) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[76]"></a>ReadSystemFlags_exec()</STRONG> (Thumb, 1754 bytes, Stack size 24 bytes, init.o(i._Z20ReadSystemFlags_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ReadSystemFlags_exec() &rArr; AnnexArm(int) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_FreeDebugBuffer()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPermanentStatistics()
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SaveCurrentStatistics()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPeriodicStatistics()
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetCurrentStatistics(unsigned char*)
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetFwUpInProgress(unsigned)
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationActivate()
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_set_DailyMsgCounter(unsigned char, unsigned char)
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_TestApplicationOnOff(unsigned char, bool)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValToPrintGSM(unsigned char, bool)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBattFlags(unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommFaultTimes(unsigned char*)
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ico_progress()
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPanelCommState(PANEL_COMM_STATE_E)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init(unsigned char*, bool)
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLastPicIndex(unsigned char)
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_init(unsigned char*)
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_RestoreRFresetCounterFromNVM(unsigned char)
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPeriodicRetryParameters(unsigned char*)
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_set_SigFoxCounter(unsigned char)
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMapSetTagSize(bool)
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPowerSupplyFlags(unsigned char)
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecuritySetISRFlag(unsigned char)
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMinutesCounter(unsigned char*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPINBeforeArm(int, int)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperMask(int, int)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxtMsgBits(unsigned char*, bool)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMutePhone(int, int)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChimeMask(int, int)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAlliance()
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPicNum(unsigned char)
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_boot_verbose_mode(unsigned char)
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init2byteflag(unsigned short*, unsigned char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> init.o(i._Z20ReadSystemFlags_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[78a]"></a>RemoveEventFromQueue(sEventDrivenQ*, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, eventdrivenq.o(i._Z20RemoveEventFromQueueP13sEventDrivenQh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RemoveEventFromQueue(sEventDrivenQ*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAlarmMsgesFromQ()
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[9ab]"></a>ResetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, deviceconfigmachine.o(i._Z20ResetCfgParamFromRam13RF_CFG_MODE_Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceLockUnlockCheck_exec()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ClearDeviceUpdateBit(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[598]"></a>ResetLastAckedPacket()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c_proc.o(i._Z20ResetLastAckedPacketv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[a5e]"></a>RfApiVSEGGetLastRSSI(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rfapivseg.o(i._Z20RfApiVSEGGetLastRSSIhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RfApiVSEGGetLastRSSI(unsigned char, unsigned char, unsigned char*) &rArr; RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
</UL>

<P><STRONG><a name="[92d]"></a>RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 184 bytes, rfapivseg.o(i._Z20RfApiVSEGSendMessagehhhhhPhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_FindCommandInRfTable(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceReconfig_exec()
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoReplyMessage(RX_COMMAND*, unsigned char)
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[a5f]"></a>RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, rf_manager_task.o(i._Z20RfDrvHandleExcParamsP12S_RF_ReqInfoP18S_Radio_StaticData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*) &rArr; Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnterFreqOffCalcMode()
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_QuitFreqOffCalcMode()
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetAddressFilter(E_RfDrv_Address_Filter, unsigned char)
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_WakeFromWORMode()
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetLengthFilter(unsigned)
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetCarrierSense(E_RfDrv_CS_RelThreshold, signed char, unsigned char)
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pRadio_GetStatistics()
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetAttenuation(E_RfDrv_Attenuation)
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadStatistics(S_RF_ReqInfo*)
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadWriteRegs(unsigned, unsigned, unsigned char*, int)
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetWORMode(int)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetTxPower(signed char)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnableBpsk(unsigned char)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoOff()
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[a67]"></a>RfDrvHandleGetParams(OSAL_Msg*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rf_manager_task.o(i._Z20RfDrvHandleGetParamsP8OSAL_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RfDrvHandleGetParams(OSAL_Msg*) &rArr; RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*) &rArr; SendMsg2RfTask(unsigned short, void*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*)
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pRadio_GetStatistics()
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetRfFrequency()
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetChipVersion(unsigned char*)
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetFreqOffset()
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RSSITodBm(signed char)
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadRSSI()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[14c]"></a>RfInputStatusBuilder(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ram_rf_input_dev.o(i._Z20RfInputStatusBuilderj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RfInputStatusBuilder(unsigned) &rArr; RF_INPUT_get_status(unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ram_db.o(.constdata)
</UL>
<P><STRONG><a name="[9e6]"></a>SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)</STRONG> (Thumb, 608 bytes, Stack size 72 bytes, security.o(i._Z20SECURITY_arm_actionsP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS25SECURITY_PARTITION_TYPE_EhbbP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_is_new_rf_api()
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Entry_Exit_Beeps(unsigned char)
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInactivityMachine()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecAlarmPending(bool)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstRF_SEC_ZONE_ByPass()
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRF_SEC_ZONE_ByPass()
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPossesoVoice()
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNineDigitPhoneNumber()
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_clear_count()
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[250]"></a>SECURITY_clear_panic()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, security.o(i._Z20SECURITY_clear_panicv))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialHangUp()
</UL>

<P><STRONG><a name="[3b4]"></a>SECURITY_init_params()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, security.o(i._Z20SECURITY_init_paramsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SECURITY_init_params() &rArr; CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_timer(unsigned char, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[ba3]"></a>SFD_GetCRCCalcResult()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfd_func.o(i._Z20SFD_GetCRCCalcResultv))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
</UL>

<P><STRONG><a name="[83c]"></a>SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 874 bytes, Stack size 48 bytes, sms_message.o(i._Z20SMS_MESSAGE_send_msgP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*) &rArr; is_gsm_data_call_on() &rArr; Refresh_GSM_Stat() &rArr; GSM_decode_status(S_GSM_STATUS*) &rArr; GSM_JammingRestoreActions() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsMuxOn()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLastChannelInDialSequence(COMMUNICATION_CHANNEL_E, unsigned char, unsigned char*)
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoiceStartFlag()
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_GSM_ClassB_on()
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_gsm_data_call_on()
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMProcFlags()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BypassToChannel(COMMUNICATION_CHANNEL_E)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_clear_nack_received()
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_clear_ack_received()
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_nack_received()
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_ack_received()
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetServerTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_exec()
</UL>

<P><STRONG><a name="[a6f]"></a>SSP_SPI_MutexAcquire(unsigned*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssp_spi_api.o(i._Z20SSP_SPI_MutexAcquirePj))
<BR><BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCapture(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GeneralAcquireRlease_SSP_Mutex(unsigned char, unsigned char)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AcquireRlease_SSPMutex(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a43]"></a>SaveInitJdItrAvaible(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, c_proc.o(i._Z20SaveInitJdItrAvaibleh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SaveInitJdItrAvaible(unsigned char) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[927]"></a>SendAutoReplyMessage(RX_COMMAND*, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, checkdevicetype.o(i._Z20SendAutoReplyMessageP10RX_COMMANDh))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = SendAutoReplyMessage(RX_COMMAND*, unsigned char) &rArr; RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshRxTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[a70]"></a>SendMessageToI2CTask(unsigned short, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c_func.o(i._Z20SendMessageToI2CTaskth))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendMessageToI2CTask(unsigned short, unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsgFromInt()
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ISR(unsigned char)
</UL>

<P><STRONG><a name="[839]"></a>SendRxPeripheralFail(unsigned char, eDetection_source)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rxfailuredetector.o(i._Z20SendRxPeripheralFailh17eDetection_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SendRxPeripheralFail(unsigned char, eDetection_source) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFailureCounter(unsigned char, eRX_Failure_Cmd)
</UL>

<P><STRONG><a name="[b2]"></a>SendSirensAlarm_exec()</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, siren.o(i._Z20SendSirensAlarm_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SendSirensAlarm_exec() &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOldSirenCmd(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> siren.o(i._Z20SendSirensAlarm_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[a71]"></a>SendWrongCodeMessage(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, process_c_proc_messages.o(i._Z20SendWrongCodeMessageh))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SendWrongCodeMessage(unsigned char) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[3bb]"></a>SetFileSizeInSectors(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z20SetFileSizeInSectorsi))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[97f]"></a>SetPowerSaveTestFlag(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z20SetPowerSaveTestFlagb))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PowerSaveMode(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[103]"></a>SetUartInterruptType()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware_vf.o(i._Z20SetUartInterruptTypev))
<BR>[Address Reference Count : 1]<UL><LI> power_save_mode_vf.o(i._Z29power_save_mode_entrance_execv)
</UL>
<P><STRONG><a name="[8c3]"></a>StrmSendTableCommand(unsigned char, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gsm_stm_streaming.o(i._Z20StrmSendTableCommandht))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = StrmSendTableCommand(unsigned char, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
</UL>

<P><STRONG><a name="[986]"></a>Switch_To_Voice_Mode()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, voice_manager.o(i._Z20Switch_To_Voice_Modev))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Switch_To_Voice_Mode() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageDuringVoiceAvailable()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[a72]"></a>TEST_FUNC_FLASH_INIT()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, internalflash_test.o(i._Z20TEST_FUNC_FLASH_INITv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TEST_FUNC_FLASH_INIT() &rArr; InternalFlash_Init() &rArr; SearchActiveSectorAndPage(Sector_Page_s*) &rArr; blank_check_sectors(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_INTERNAL_FLASH_INIT(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[412]"></a>Test_NextCarrierDuty()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, test_func.o(i._Z20Test_NextCarrierDutyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Test_NextCarrierDuty() &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSendCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
</UL>

<P><STRONG><a name="[1af]"></a>Test_QueryGsmVersion(char*, unsigned short, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, test_func.o(i._Z20Test_QueryGsmVersionPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Test_QueryGsmVersion(char*, unsigned short, unsigned char) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetFirmWareVer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[66c]"></a>TimerOperationChecks()</STRONG> (Thumb, 3078 bytes, Stack size 88 bytes, timer.o(i._Z20TimerOperationChecksv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = TimerOperationChecks() &rArr; StartPowerHandler() &rArr; Set220vRestore() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAllPendingReqEmpty()
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_COUNTER_Clear(unsigned char)
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_COUNTER_Get(unsigned char)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisableEnableLed(unsigned char, unsigned char)
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStatusRoutineActive()
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPeriodicSession()
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInitDone()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateResetMachine(unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_DebugGetHeapOverflowVector()
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_DebugGetStackOverflowVector()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_set_DailyMsgCounter(unsigned char, unsigned char)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperState(int, bool)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetLogRolloverFlag()
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get220Status()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBattHandler()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_STUN_read()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_get_state()
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbPeriodicalCheckGo(bool)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomNum(unsigned long, unsigned long)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_STRING_ptr(unsigned short)
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_full_time_date(unsigned char*)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJDNag(unsigned)
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int2(unsigned char*)
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage()
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_IsPanelRFJammed()
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInitJdItrAvaible(unsigned char)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ConfigIPDESensitivity(unsigned char)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerStructPtr()
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get220FaultStatus()
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedToSavePreOffset()
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedToSaveOffset()
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSavePreOffset()
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrPreOffsetSave()
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSaveOffset()
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrOffsetSave()
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPSM_STUN_On()
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSavePeriodicCounters()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_Embedded_Diagnostic_msg(unsigned short, unsigned char)
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPeriodicIndication()
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFogCounterArr()
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PollIPDEWindowStates(unsigned char)
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_gas_meter_installed()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCheckTemporaryBypass()
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeAlarmFriendlyMode(unsigned char)
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRepeatRkpStatus()
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageFgPhoto()
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_Exec(TWriteVirtualSnObj*)
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Exec(TReadVirtualSnObj*)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxPacket(unsigned char**)
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_TriggerRFresetCounter()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick_exec()
</UL>

<P><STRONG><a name="[18b]"></a>ToggleGsmPrintAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z20ToggleGsmPrintActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ToggleGsmPrintAction(S_CPUI_ButtonInfo*) &rArr; SetValToPrintGSM(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValToPrintGSM(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[41e]"></a>UART_EnableInterrupt(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart_api.o(i._Z20UART_EnableInterrupth))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortEnableInterrupts(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_HE910_Module_PowerUp(unsigned)
</UL>

<P><STRONG><a name="[6e]"></a>UDP_APP_COMMAND_exec()</STRONG> (Thumb, 466 bytes, Stack size 320 bytes, udp_app.o(i._Z20UDP_APP_COMMAND_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = UDP_APP_COMMAND_exec() &rArr; UDP_APP_decode_command(unsigned char*) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_clear_packet_pending()
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_packet_pending()
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_total_size(unsigned char)
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnApiSupport(unsigned char*)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_API_processing(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_device_status(U_DEV_TYPE, unsigned char)
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_delete_range(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[6f]"></a>UDP_APP_MACHINE_exec()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, udp_app.o(i._Z20UDP_APP_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UDP_APP_MACHINE_exec() &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_open_protocol_F()
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[422]"></a>UartClearFifoDmaMode(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart_func.o(i._Z20UartClearFifoDmaModeh))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
</UL>

<P><STRONG><a name="[124]"></a>UartTaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart_manager_task.o(i._Z20UartTaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[755]"></a>VAT_FlashDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vat_func.o(i._Z20VAT_FlashDoneHandlerP10S_VAT_InfoP19S_VatTaskGlobalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VAT_FlashDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnG729ADecRun
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListGetHead(OSAL_List*)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[85f]"></a>VIDEO_channel_select(S_MESSAGE_COMM_INFO*, COMMUNICATION_CHANNEL_E)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, videoengine.o(i._Z20VIDEO_channel_selectP19S_MESSAGE_COMM_INFO23COMMUNICATION_CHANNEL_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VIDEO_channel_select(S_MESSAGE_COMM_INFO*, COMMUNICATION_CHANNEL_E) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_driver_mux(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[5fd]"></a>VOICE_establish_call(E_VOICE_DEVICE)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, voice_manager.o(i._Z20VOICE_establish_call14E_VOICE_DEVICE))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
</UL>

<P><STRONG><a name="[3b5]"></a>VOICE_manager_params(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, voice_manager.o(i._Z20VOICE_manager_paramsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VOICE_manager_params(unsigned char) &rArr; get_NUMBER_ptr(unsigned short) &rArr; FL_NUMBER_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_NUMBER_ptr(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[86c]"></a>VirusCryptObj_Config(TVirusCryptObj*, unsigned)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, viruscryptobj.o(i._Z20VirusCryptObj_ConfigP14TVirusCryptObjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = VirusCryptObj_Config(TVirusCryptObj*, unsigned) &rArr; PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned) &rArr; aes_ecb_encrypt(const unsigned char*, unsigned char*, int, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformAesEcbEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusMessage(unsigned char*)
</UL>

<P><STRONG><a name="[bd]"></a>WaitForOPDDAcks_exec()</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, prealarm_handler.o(i._Z20WaitForOPDDAcks_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WaitForOPDDAcks_exec() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumOpdds()
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpddArray()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> prealarm_handler.o(i._Z20WaitForOPDDAcks_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[4e0]"></a>WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, apicmdprocessing.o(i._Z20WriteFieldIDDefValuettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>

<P><STRONG><a name="[4e1]"></a>WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, apicmdprocessing.o(i._Z20WriteFieldIDSetValuetttm))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyUsersByDevices(unsigned char*, bool)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKF2UserMap()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCfgChanged(unsigned char)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyKeypadEntity(int*, int, unsigned char*, bool)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformParsing(const PARSER_INSTRUCTION_S*, unsigned char*, int, int, bool*)
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPrivilege2UI(unsigned short)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyTagEntity(unsigned char*, unsigned short, bool)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>

<P><STRONG><a name="[969]"></a>bNeedKfControlUpdate(unsigned char*, KEY_FOB_LOCK_CFG_S*)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, deviceconfigmachine.o(i._Z20bNeedKfControlUpdatePhP18KEY_FOB_LOCK_CFG_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bNeedKfControlUpdate(unsigned char*, KEY_FOB_LOCK_CFG_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[6e9]"></a>check_for_inactivity()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z20check_for_inactivityv))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
</UL>

<P><STRONG><a name="[a98]"></a>findI5OLearnLocation(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z20findI5OLearnLocationh))
<BR><BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[a92]"></a>getLowBattIndication()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z20getLowBattIndicationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getLowBattIndication() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetLowBatteryIndication(unsigned*)
</UL>

<P><STRONG><a name="[a93]"></a>getRemoteCallInRings()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z20getRemoteCallInRingsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getRemoteCallInRings() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAnswerAfterRingsOption(unsigned char)
</UL>

<P><STRONG><a name="[bb6]"></a>get_software_version()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintenance.o(i._Z20get_software_versionv))
<BR><BR>[Called By]<UL><LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_read_panel_version()
</UL>

<P><STRONG><a name="[787]"></a>insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, msme_q.o(i._Z20insert_fault_message16COM_FAULT_TYPE_EP19S_MESSAGE_COMM_INFOb20DIAL_SEQUENCE_TYPE_Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool) &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_MSME_MESSAGES_Ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_comm_fail_msges(S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E)
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
</UL>

<P><STRONG><a name="[c6f]"></a>msme_clr_worst_depth()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msme_q.o(i._Z20msme_clr_worst_depthv))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[559]"></a>msme_q_STUN_msg_in_Q()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, msme_q.o(i._Z20msme_q_STUN_msg_in_Qv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msme_q_STUN_msg_in_Q()
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[794]"></a>msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, msme_q.o(i._Z20msme_q_SendCommFaulthhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJammingEventAction(S_CPUI_ButtonInfo*)
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_JammingRestoreActions()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
</UL>

<P><STRONG><a name="[a63]"></a>pRadio_GetStatistics()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z20pRadio_GetStatisticsv))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[42f]"></a>ram_rf_sec_zone_init(unsigned char, unsigned char)</STRONG> (Thumb, 582 bytes, Stack size 64 bytes, ram_rf_sec_zone.o(i._Z20ram_rf_sec_zone_inithh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ram_rf_sec_zone_init(unsigned char, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERS_all_devices_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiModifyHandler_exec()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelEntHandler_exec()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
</UL>

<P><STRONG><a name="[a19]"></a>release_C_PROC_EVENT()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, c_proc_q.o(i._Z20release_C_PROC_EVENTv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = release_C_PROC_EVENT() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[9b8]"></a>release_G_PROC_EVENT()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gsmq.o(i._Z20release_G_PROC_EVENTv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = release_G_PROC_EVENT() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[786]"></a>save_comm_fail_msges(S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E)</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, msme_q.o(i._Z20save_comm_fail_msgesP19S_MESSAGE_COMM_INFOb20DIAL_SEQUENCE_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = save_comm_fail_msges(S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E) &rArr; insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool) &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[a6e]"></a>sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, security.o(i._Z20sec_key_fob_send_msgP11S_SEC_EVENT17SECURITY_STATES_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a96]"></a>A2G_GetCallingLineNum(unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_a2g.o(i._Z21A2G_GetCallingLineNumPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A2G_GetCallingLineNum(unsigned char*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNineDigitPhoneNumber()
</UL>

<P><STRONG><a name="[884]"></a>AUTO_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, do_it_yourself.o(i._Z21AUTO_APP_learn_device12C_DEV_TYPE_EhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AUTO_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findI5OLearnLocation(unsigned char)
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number_of_devices(RF_SEC_ZONE_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[763]"></a>AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, apipckprocessing.o(i._Z21AddEntity2RamAndEpromtttPhPttS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[a99]"></a>AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, apipckprocessing.o(i._Z21AddEntityBeforeModifyttPhPtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short) &rArr; AddEntityBody(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityHead(unsigned short, unsigned short)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBody(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[7ec]"></a>AdjustOPDDSensitivity(int, int)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, process_income_message.o(i._Z21AdjustOPDDSensitivityii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = AdjustOPDDSensitivity(int, int) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ID2logical(unsigned char)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[bef]"></a>Annex_alarm_in_memory()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, annex.o(i._Z21Annex_alarm_in_memoryv))
<BR><BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[95]"></a>ApiDelAllHandler_exec()</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, apicmdprocessing.o(i._Z21ApiDelAllHandler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ApiDelAllHandler_exec() &rArr; DelParallel_UI_Entity(unsigned) &rArr; CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E) &rArr; MemMapEntityWrite2EPROM(unsigned char*, unsigned short) &rArr; MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelParallel_UI_Entity(unsigned)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> apicmdprocessing.o(i._Z21ApiDelAllHandler_execv)
</UL>
<P><STRONG><a name="[92]"></a>ApiDelEntHandler_exec()</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, apistatemachines.o(i._Z21ApiDelEntHandler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ApiDelEntHandler_exec() &rArr; DelParallel_UI_Entity(unsigned) &rArr; CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E) &rArr; MemMapEntityWrite2EPROM(unsigned char*, unsigned short) &rArr; MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelParallel_UI_Entity(unsigned)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDelHandler()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> apipckprocessing.o(i._Z15ResetDelHandlerv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[93]"></a>ApiModifyHandler_exec()</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, apistatemachines.o(i._Z21ApiModifyHandler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = ApiModifyHandler_exec() &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetModifyHandler()
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsItLastPacket(unsigned char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> apipckprocessing.o(i._Z18ResetModifyHandlerv)
</UL>
<P><STRONG><a name="[a9b]"></a>AttackDbElementConfig(TAttackDataBase*, C_DEV_TYPE_E, unsigned char, EAttackState)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cyberattackstates.o(i._Z21AttackDbElementConfigP15TAttackDataBase12C_DEV_TYPE_Eh12EAttackState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AttackDbElementConfig(TAttackDataBase*, C_DEV_TYPE_E, unsigned char, EAttackState) &rArr; PrivateParamsInit(TAttackDataBase*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateParamsInit(TAttackDataBase*)
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementSearch(C_DEV_TYPE_E, unsigned char)
</UL>

<P><STRONG><a name="[776]"></a>AttackDbElementSearch(C_DEV_TYPE_E, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, cyberattackstates.o(i._Z21AttackDbElementSearch12C_DEV_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AttackDbElementSearch(C_DEV_TYPE_E, unsigned char) &rArr; AttackDbElementConfig(TAttackDataBase*, C_DEV_TYPE_E, unsigned char, EAttackState) &rArr; PrivateParamsInit(TAttackDataBase*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementConfig(TAttackDataBase*, C_DEV_TYPE_E, unsigned char, EAttackState)
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool)
</UL>

<P><STRONG><a name="[c1a]"></a>BUTTONS_EnableButtons()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buttons_api.o(i._Z21BUTTONS_EnableButtonsv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[a5a]"></a>CODEC_FreeDebugBuffer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, codec_api.o(i._Z21CODEC_FreeDebugBufferv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CODEC_FreeDebugBuffer() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[340]"></a>CPUI_ButtonsStateInit(unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z21CPUI_ButtonsStateInitPh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[a9c]"></a>CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, cpui_buttons_func.o(i._Z21CPUI_Buttons_CheckPinP17S_CPUI_ButtonInfoPKhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int) &rArr; StartSendCmd(unsigned char*, bool) &rArr; InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator &lang;&lang;(const char*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::operator =(int)
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::C2AMess(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::data()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[355]"></a>CPUI_GetLEDActionName(unsigned char, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cpui_func.o(i._Z21CPUI_GetLEDActionNamehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPUI_GetLEDActionName(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[a9e]"></a>CPUI_NotifyPinPressed(unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, buttons_api.o(i._Z21CPUI_NotifyPinPressedt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = CPUI_NotifyPinPressed(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ActivateProgram(S_CPUI_ButtonInfo*)
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse(unsigned char*, int)
</UL>

<P><STRONG><a name="[bd6]"></a>CPUI_SetArmedZoneBits(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpui_func.o(i._Z21CPUI_SetArmedZoneBitst))
<BR><BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
</UL>

<P><STRONG><a name="[a9f]"></a>C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, process_c_proc_messages.o(i._Z21C_PROC_decode_MESSAGE10U_DEV_TYPEhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E) &rArr; PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_CheckIfDeviceValid(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceGTID(unsigned char, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUTPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_MESSAGE(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*, bool)
</UL>

<P><STRONG><a name="[71f]"></a>C_PROC_sofware_update(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, c_proc.o(i._Z21C_PROC_sofware_updateh))
<BR><BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_done(unsigned char*)
</UL>

<P><STRONG><a name="[949]"></a>CheckCyberDetectedCmd(unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cybermachine.o(i._Z21CheckCyberDetectedCmdPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CheckCyberDetectedCmd(unsigned char*) &rArr; IsCommandTamperStateChanged(unsigned char*) &rArr; GetPreviosTamperState(C_DEV_TYPE_E, unsigned char) &rArr; get_RF_OUTPUT_DEV_ptr(int) &rArr; FL_RF_OUTPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommandTamperStateChanged(unsigned char*)
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommandDisarm(unsigned char*)
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommandArm(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedCyberProcess(unsigned char*)
</UL>

<P><STRONG><a name="[330]"></a>ClrGuardCodeCycleFlag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z21ClrGuardCodeCycleFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[c6e]"></a>Cproc_clr_worst_depth()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c_proc_q.o(i._Z21Cproc_clr_worst_depthv))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[6ce]"></a>CtrlSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gsm_stm_control.o(i._Z21CtrlSendAckToOrigTaskhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CtrlSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[59]"></a>DATALINK_manager_exec()</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, data_link_manager.o(i._Z21DATALINK_manager_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = DATALINK_manager_exec() &rArr; DATALINK_state_frame() &rArr; EL_L2_handler_F(unsigned char*, unsigned char*) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTransportDelayNeeded()
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTransportDelay()
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_wait4pending()
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_copybuf()
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_frame()
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_nack()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[af1]"></a>DATALINK_manager_init()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, data_link_manager.o(i._Z21DATALINK_manager_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a23]"></a>DATALINK_open_session(E_TRANSPORTS)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, data_link_manager.o(i._Z21DATALINK_open_session12E_TRANSPORTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DATALINK_open_session(E_TRANSPORTS) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_open_protocol_F()
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_data_call_on()
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_open(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[b5d]"></a>DIAL_RETRY_get_dialer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dial_retry.o(i._Z21DIAL_RETRY_get_dialerv))
<BR><BR>[Called By]<UL><LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_sms_send()
</UL>

<P><STRONG><a name="[a9a]"></a>DelParallel_UI_Entity(unsigned)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, apicmdprocessing.o(i._Z21DelParallel_UI_Entityj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = DelParallel_UI_Entity(unsigned) &rArr; CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E) &rArr; MemMapEntityWrite2EPROM(unsigned char*, unsigned short) &rArr; MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOffsetArrayElement(unsigned char)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindKfId(unsigned)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelEntHandler_exec()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelAllHandler_exec()
</UL>

<P><STRONG><a name="[ab0]"></a>DeleteAlarmMsgesFromQ()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, msme_q.o(i._Z21DeleteAlarmMsgesFromQv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DeleteAlarmMsgesFromQ() &rArr; RemoveEventFromQueue(sEventDrivenQ*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEventFromQueue(sEventDrivenQ*, unsigned char)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQempty()
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_MSME_MESSAGES_Ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[960]"></a>DoesQreachedWatermark(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, msme_q.o(i._Z21DoesQreachedWatermarkh))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[bc]"></a>Entry_Exit_Beeps_exec()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, control_panel.o(i._Z21Entry_Exit_Beeps_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Entry_Exit_Beeps_exec() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexAlarm()
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreAlarmStatus()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> control_panel.o(i._Z21Stop_Entry_Exit_Beepsv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[ab1]"></a>FL_DIAL_SEQUENCE_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z21FL_DIAL_SEQUENCE_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_DIAL_SEQUENCE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_dial_sequence_GET_ptr(int)
</UL>

<P><STRONG><a name="[bf2]"></a>FL_PINCODE_ID2logical(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fl_types.o(i._Z21FL_PINCODE_ID2logicalh))
<BR><BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[6f0]"></a>FL_RF_INPUT_DEV_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fl_types.o(i._Z21FL_RF_INPUT_DEV_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_RF_INPUT_DEV_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[106]"></a>FL_RF_OUTPUT_DEV_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z21FL_RF_OUTPUT_DEV_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_RF_OUTPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_ers(unsigned char)
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_output_dev_init(unsigned char, unsigned char)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh)
</UL>
<P><STRONG><a name="[ab2]"></a>FOG_Set_EnabledPoseso(unsigned char, unsigned char*, char, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, process_income_message.o(i._Z21FOG_Set_EnabledPosesohPhch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FOG_Set_EnabledPoseso(unsigned char, unsigned char*, char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5ed]"></a>Flash_SectorEraseFunc(unsigned char, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, flash_func.o(i._Z21Flash_SectorEraseFunchj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Flash_SectorEraseFunc(unsigned char, unsigned) &rArr; Flash_WriteEnable(unsigned char) &rArr; Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_WaitIsNotBusy(unsigned char)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteCommand(S_FLASH_TransferReqInfo*)
</UL>

<P><STRONG><a name="[784]"></a>GET_MSME_MESSAGES_Ptr()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msme.o(i._Z21GET_MSME_MESSAGES_Ptrv))
<BR><BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_q_BuildandSendSigFoxMsg(S_MSME_MSG_EVENT*)
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAlarmMsgesFromQ()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[277]"></a>GSM_API_GetModemFlags()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z21GSM_API_GetModemFlagsv))
<BR><BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_All_Socket_Indication(unsigned char)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommandRespondTime(unsigned char, unsigned char)
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetAccessTechnology()
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetRingIndication()
<LI><a href="#[c43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetFwUpInProgress()
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetFwUpRecovery()
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsRegFailure()
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsHwInitDone()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageReadyForCommand()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmControlReadyForCommand()
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLowGSMModemRSSIIndecator()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsFailure()
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsMuxOn()
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStatusRoutineActive()
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetFirmWareVerPtr()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetFirmWareVer()
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetBuildVer()
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetFwUpInProgress(unsigned)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsActivatedOdmSocket()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_On_Packet_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_On_ODM_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStmMessageErrorHandler(unsigned)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_GSM_ClassB_on()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICCcode()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOPERATORcode()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEIcode()
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_GetCallingLineNum(unsigned char*)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_GSM_Ring_on_Background()
</UL>

<P><STRONG><a name="[95e]"></a>GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, gsm_api.o(i._Z21GSM_Message_API_GetIphPcttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[ab3]"></a>GSM_SetIGNsignalHE910(int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gsm_module_funcs_he910.o(i._Z21GSM_SetIGNsignalHE910i))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GSM_SetIGNsignalHE910(int) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_HE910_Module_PowerUp(unsigned)
</UL>

<P><STRONG><a name="[ab4]"></a>GSM_SetModemPinsHE910()</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gsm_module_funcs_he910.o(i._Z21GSM_SetModemPinsHE910v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GSM_SetModemPinsHE910() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[ab5]"></a>GSM_StrmResetStmFlags()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsm_stm_streaming.o(i._Z21GSM_StrmResetStmFlagsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GSM_StrmResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[c3a]"></a>GetAllocatedChannelId(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma_api.o(i._Z21GetAllocatedChannelIdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetAllocatedChannelId(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init(unsigned char)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendTxBufferMsgByInterrupt(unsigned, unsigned char, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2bd]"></a>GetContentLengthDelta()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filehandler.o(i._Z21GetContentLengthDeltav))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[ab6]"></a>GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, c_proc.o(i._Z21GetDeviceBatteryLevelP25Inf4SendTechinfInfoTask_tP11ItrStatus_tPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*) &rArr; C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool) &rArr; Timer_GetRssiIndBmValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUT_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_siren_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
</UL>

<P><STRONG><a name="[661]"></a>GetGuardCodeCycleFlag()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z21GetGuardCodeCycleFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[54c]"></a>GetKeyfobStatusStruct(int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ram_key_fob.o(i._Z21GetKeyfobStatusStructi))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_delay_full_or_part_force_arm_4_open_zone_proc(unsigned char, ERROR_E*)
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_ARM_request(S_KEY_FOB*, KEY_FOB_REQUESTS_E, unsigned char, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_signals(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_SIGNALS_E)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_device_status(U_DEV_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[91a]"></a>GetLastClipScenarioID()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, videoengine.o(i._Z21GetLastClipScenarioIDv))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
</UL>

<P><STRONG><a name="[8ab]"></a>GetListenOnlineStatus()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, listen.o(i._Z21GetListenOnlineStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
</UL>

<P><STRONG><a name="[ab7]"></a>GetMainPowerMsgStatus()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main_power.o(i._Z21GetMainPowerMsgStatusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetMainPowerMsgStatus() &rArr; IsPowerMsgEn() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPowerMsgEn()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[ab8]"></a>GetPreviosTamperState(C_DEV_TYPE_E, unsigned char)</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, cybermachine.o(i._Z21GetPreviosTamperState12C_DEV_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPreviosTamperState(C_DEV_TYPE_E, unsigned char) &rArr; get_RF_OUTPUT_DEV_ptr(int) &rArr; FL_RF_OUTPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommandTamperStateChanged(unsigned char*)
</UL>

<P><STRONG><a name="[c42]"></a>GetRFInputTamperFault()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_db.o(i._Z21GetRFInputTamperFaultv))
<BR><BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_input_dev_GetRFInputError()
</UL>

<P><STRONG><a name="[ab9]"></a>INIT_InitOffsetArrays()</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, init_func.o(i._Z21INIT_InitOffsetArraysv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = INIT_InitOffsetArrays() &rArr; SetCyberMode(unsigned char*) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCyberMode(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[b91]"></a>INIT_get_send_ITR_IVT()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(i._Z21INIT_get_send_ITR_IVTv))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[ae3]"></a>INIT_set_send_ITR_IVT(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, init.o(i._Z21INIT_set_send_ITR_IVTh))
<BR><BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[aba]"></a>IPDE_new_send_open_rx(unsigned char*, unsigned char*)</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, videoengine.o(i._Z21IPDE_new_send_open_rxPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IPDE_new_send_open_rx(unsigned char*, unsigned char*) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test_exec()
</UL>

<P><STRONG><a name="[abb]"></a>IP_APP_decode_command(unsigned char*)</STRONG> (Thumb, 532 bytes, Stack size 48 bytes, ip_app.o(i._Z21IP_APP_decode_commandPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = IP_APP_decode_command(unsigned char*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_installation_completed(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_receive()
</UL>

<P><STRONG><a name="[9cb]"></a>IP_COMMAND_state_done()</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, ip_app.o(i._Z21IP_COMMAND_state_donev))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = IP_COMMAND_state_done() &rArr; IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char) &rArr; FL_RF_OUTPUT_DEV_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_gsm_level()
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRequestServerKeyFog(unsigned char, eRequestServerKeyFogType)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManufStructPtr()
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManufData()
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[abf]"></a>InternalFlash_ReadPtr(unsigned short, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, internalflash_api.o(i._Z21InternalFlash_ReadPtrtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InternalFlash_ReadPtr(unsigned short, unsigned short) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_GetIdPtr(unsigned short)
</UL>

<P><STRONG><a name="[7ff]"></a>InternalFlash_WriteId(unsigned short, unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, internalflash_api.o(i._Z21InternalFlash_WriteIdtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InternalFlash_WriteId(unsigned short, unsigned char*) &rArr; InternalFlash_Write(unsigned short, unsigned char*, unsigned short) &rArr; WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short)
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_FlipAndWriteKey(unsigned char*)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[60b]"></a>IsGsmMessageFullCycle()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm_stm_message.o(i._Z21IsGsmMessageFullCyclev))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[5fc]"></a>IsGsmTransimitSuccess()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gsm_comm.o(i._Z21IsGsmTransimitSuccessv))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
</UL>

<P><STRONG><a name="[4e4]"></a>IsMsmeQEmptyOrDeleted()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, msme_q.o(i._Z21IsMsmeQEmptyOrDeletedv))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_done()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
</UL>

<P><STRONG><a name="[a85]"></a>IsNeedToSavePreOffset()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, log.o(i._Z21IsNeedToSavePreOffsetv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[a80]"></a>IsStatusRoutineActive()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gsm_api.o(i._Z21IsStatusRoutineActivev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsStatusRoutineActive() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[49a]"></a>Is_VOICE_RECEIVE_Idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, voice_manager.o(i._Z21Is_VOICE_RECEIVE_Idlev))
<BR><BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[858]"></a>KPadLogicSetPrintMode(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z21KPadLogicSetPrintModeh))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TestButtons(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[968]"></a>KickRfSequenceMachine()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sendrfsequence.o(i._Z21KickRfSequenceMachinev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KickRfSequenceMachine() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[6b7]"></a>MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)</STRONG> (Thumb, 1072 bytes, Stack size 48 bytes, maintenance.o(i._Z21MP_SYSTEM_OP_commandsPhS_P15E_MP_ERROR_CODEP16EL_DRIVER_STATUSS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetAccessTechnology()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteId(unsigned short, unsigned char*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_SaveAllBatteryLevelToRam(unsigned char*, unsigned char)
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_ClearAllDeviceInfo()
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawData_ADLReportIntervalFunc(unsigned char, unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_FlipAndWriteKey(unsigned char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_is_backup_valid_bit(unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupRamMemMap()
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSirenTest(unsigned char, unsigned short)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_RSSI2RLQ(int)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_DEVICE_operation(unsigned char, unsigned char)
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGGetLastRSSI(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_installation_completed(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[788]"></a>MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)</STRONG> (Thumb, 628 bytes, Stack size 24 bytes, msme.o(i._Z21MSME_finalize_actionsP16S_MSME_MSG_EVENTb))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = MSME_finalize_actions(S_MSME_MSG_EVENT*, bool) &rArr; GSM_Control_API_SaveCurrentStatistics() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPermanentStatistics()
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SaveCurrentStatistics()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetPeriodicStatistics()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_ClearCurrentStatistics(MODEM_STATISTICS*)
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_SetWasBelowMinEventSent(unsigned char, unsigned char)
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_ReadADLRuleEntry(S_ADLRuleInfo*, unsigned char, unsigned char*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rkp_init(unsigned char, unsigned char)
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_erase(unsigned char)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_INCOMING_PHONE_erase(unsigned char)
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_ers(unsigned char)
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_ers(unsigned char)
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_erase(unsigned char)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RULES_read(unsigned char)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_ers(unsigned char)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ers(unsigned char)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_ers(unsigned char)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_output_dev_init(unsigned char, unsigned char)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_input_dev_init(unsigned char, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEntryDeletion(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[b63]"></a>NextVidLocationInPool()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, videoq.o(i._Z21NextVidLocationInPoolv))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
</UL>

<P><STRONG><a name="[70f]"></a>OSAL_GetTaskStackSize(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osal_db.o(i._Z21OSAL_GetTaskStackSizeh))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CreateTempTaskWithPendingMessage()
</UL>

<P><STRONG><a name="[568]"></a>OSAL_HeapCheckOverrun(unsigned char*)</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, osal_heap.o(i._Z21OSAL_HeapCheckOverrunPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSAL_HeapCheckOverrun(unsigned char*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IdleTask()
</UL>

<P><STRONG><a name="[ac4]"></a>OSAL_ListInsertToHead(unsigned char, OSAL_List*, void*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, osal_list.o(i._Z21OSAL_ListInsertToHeadhP9OSAL_ListPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OSAL_ListInsertToHead(unsigned char, OSAL_List*, void*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[58a]"></a>OSAL_PortMutexCapture(unsigned*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osal_port.o(i._Z21OSAL_PortMutexCapturePj))
<BR><BR>[Called By]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_MutexAcquire(unsigned*)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngPauseGSM(unsigned char, unsigned)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[1fd]"></a>OSAL_PortMutexRelease(unsigned*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_port.o(i._Z21OSAL_PortMutexReleasePj))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_MutexRelease(unsigned*)
</UL>

<P><STRONG><a name="[6d6]"></a>OSAL_TimerChangePause(unsigned short, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, osal_time_mng.o(i._Z21OSAL_TimerChangePauseth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSAL_TimerChangePause(unsigned short, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[7f6]"></a>OSAL_hexstr2numRetLen(unsigned char*, unsigned, unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, osal_services.o(i._Z21OSAL_hexstr2numRetLenPhjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSAL_hexstr2numRetLen(unsigned char*, unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[967]"></a>OrganizeRepeatersinDB()</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, checkdevicetype.o(i._Z21OrganizeRepeatersinDBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OrganizeRepeatersinDB()
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[694]"></a>PSTN_API_SendInitPstn(unsigned char, unsigned, unsigned char, unsigned*, unsigned short*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstn_stub.o(i._Z21PSTN_API_SendInitPstnhjhPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PSTN_API_SendInitPstn(unsigned char, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[9eb]"></a>PlaceEventInPriorityQ(sPriorityQ*, t_node*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, priorityq.o(i._Z21PlaceEventInPriorityQP10sPriorityQP6t_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7d]"></a>PollInteruptBits_exec()</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, scheduler.o(i._Z21PollInteruptBits_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = PollInteruptBits_exec() &rArr; VOICE_DTMF_handler(unsigned char) &rArr; OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPstnModuleEnable()
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_SendApplicationTestOpenningMsg(unsigned char)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_IsTestApplicationActive()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStateChangeMsg()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDebugMsgDis()
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_ABORT_time_out()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTamperMasked()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSdEnabled()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_supervision_test()
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelTamperBypass()
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRkp()
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstSdEnabled()
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pda_alloc_RX_buff()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[3c1]"></a>PowerSaveModeSetCount(unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z21PowerSaveModeSetCountPh))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfDbMatch()
</UL>

<P><STRONG><a name="[acb]"></a>PreparateConfigKF3Msg(unsigned char)</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, preparedatafortransmission.o(i._Z21PreparateConfigKF3Msgh))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PreparateConfigKF3Msg(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[517]"></a>ProcessNextMessageAck()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, apipckprocessing.o(i._Z21ProcessNextMessageAckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessNextMessageAck() &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCmdProcess(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[9d8]"></a>RB_APP_decode_command(unsigned char*, unsigned char*)</STRONG> (Thumb, 908 bytes, Stack size 56 bytes, rb_app.o(i._Z21RB_APP_decode_commandPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = RB_APP_decode_command(unsigned char*, unsigned char*) &rArr; StartBootHandler(bool) &rArr; INIT_set_boot_request_main(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBootHandler(bool)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCStatus()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRC32(unsigned long, unsigned long)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Erase_Flash_Sectors(unsigned char, unsigned char)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashEraserStatus()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_EX_EEPROM_read(unsigned char*, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triggger_Program_Flash_Subpage(unsigned long, unsigned char*, int)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCResult()
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_app_GetRSUTableEntryByTarget(unsigned char)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[88f]"></a>RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, rpc.o(i._Z21RPC_start_send_packethhhthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char) &rArr; C_PROC_set_jamming_machine(bool) &rArr; C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_close_session(RPC_RESULT_E)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSosStatus()
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_app_getDeviceRSUStartSector(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[726]"></a>RSU_IsMultiDeviceType(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rsu_task.o(i._Z21RSU_IsMultiDeviceTypeh))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[75e]"></a>RTC_DisableInterrupts()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc_api.o(i._Z21RTC_DisableInterruptsv))
<BR><BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortDisableInterrupts(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
</UL>

<P><STRONG><a name="[64b]"></a>Radio_CheckMisoStatus()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z21Radio_CheckMisoStatusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Radio_CheckMisoStatus() &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[4c2]"></a>Radio_HandleAmplifier(E_CC11XX_AMP)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc11xxdrvfncvfii.o(i._Z21Radio_HandleAmplifier12E_CC11XX_AMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Radio_HandleAmplifier(E_CC11XX_AMP) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetWORMode(int)
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoTx(unsigned char)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>

<P><STRONG><a name="[3e9]"></a>Radio_InitLnaPaParams()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cc11xxdrvfncvfii.o(i._Z21Radio_InitLnaPaParamsv))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reset()
</UL>

<P><STRONG><a name="[837]"></a>Radio_IsSigFoxEnabled()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z21Radio_IsSigFoxEnabledv))
<BR><BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
</UL>

<P><STRONG><a name="[a62]"></a>Radio_SetCarrierSense(E_RfDrv_CS_RelThreshold, signed char, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z21Radio_SetCarrierSense23E_RfDrv_CS_RelThresholdah))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_SetCarrierSense(E_RfDrv_CS_RelThreshold, signed char, unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[a61]"></a>Radio_SetLengthFilter(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z21Radio_SetLengthFilterj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_SetLengthFilter(unsigned) &rArr; Radio_SetPacketLengthCfg(unsigned char, E_CC11XX_Packet_Length_Cfg) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetPacketLengthCfg(unsigned char, E_CC11XX_Packet_Length_Cfg)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[4c0]"></a>Radio_VerifyIdleState()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z21Radio_VerifyIdleStatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CheckState()
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReturnToWOR()
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetWORMode(int)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoTx(unsigned char)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>

<P><STRONG><a name="[a66]"></a>Radio_WakeFromWORMode()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z21Radio_WakeFromWORModev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Radio_WakeFromWORMode() &rArr; Radio_GotoIdle() &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetParams(unsigned char)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[a77]"></a>ReadVirtualSnObj_Exec(TReadVirtualSnObj*)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, virtualsnobj.o(i._Z21ReadVirtualSnObj_ExecP17TReadVirtualSnObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ReadVirtualSnObj_Exec(TReadVirtualSnObj*) &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Close(TReadVirtualSnObj*)
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_Open(TWriteVirtualSnObj*)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[b3d]"></a>ReadVirtualSnObj_Open(TReadVirtualSnObj*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, virtualsnobj.o(i._Z21ReadVirtualSnObj_OpenP17TReadVirtualSnObj))
<BR><BR>[Called By]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVirtualSnRequest()
</UL>

<P><STRONG><a name="[ad5]"></a>ReleaseVideoCommEvent(VIDEO_COMM_SESSION_S*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, videoq.o(i._Z21ReleaseVideoCommEventP20VIDEO_COMM_SESSION_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReleaseVideoCommEvent(VIDEO_COMM_SESSION_S*) &rArr; ReleaseRFTransferEvent(VIDEO_RF_TRANSFER_S*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseRFTransferEvent(VIDEO_RF_TRANSFER_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
</UL>

<P><STRONG><a name="[a6d]"></a>RstRF_SEC_ZONE_ByPass()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z21RstRF_SEC_ZONE_ByPassv))
<BR><BR>[Called By]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[6b]"></a>SECURITY_MACHINE_exec()</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, security.o(i._Z21SECURITY_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = SECURITY_MACHINE_exec() &rArr; security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*) &rArr; SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumOpdds()
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIsRkpInstall()
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidSirenEntry()
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_SEC_EVENT_ptr()
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset(unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[af4]"></a>SECURITY_MACHINE_init()</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, security.o(i._Z21SECURITY_MACHINE_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[67e]"></a>SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, security.o(i._Z21SECURITY_alarm_in_mem24E_SEC_ALARM_IN_MEM_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annex_clear_alarm_in_memory()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecAlarmPending(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[95a]"></a>SECURITY_event_action(E_CONTROL_PANEL_EVENT)</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, security.o(i._Z21SECURITY_event_action21E_CONTROL_PANEL_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = SECURITY_event_action(E_CONTROL_PANEL_EVENT) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_event(E_CONTROL_PANEL_EVENT)
</UL>
<BR>[Called By]<UL><LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[4d4]"></a>SECURITY_get_duration()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z21SECURITY_get_durationv))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_KPD_Ack(int)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
</UL>

<P><STRONG><a name="[83d]"></a>SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 878 bytes, Stack size 80 bytes, sms_message.o(i._Z21SMS_MESSAGE_send_stunP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*) &rArr; GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Num2MinimalDecStr(unsigned, unsigned char*, unsigned)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetAccessTechnology()
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_STUN_read()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGeneralStatusOk()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_exec()
</UL>

<P><STRONG><a name="[74a]"></a>SOUND_IsBeepInProcess()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sound_api.o(i._Z21SOUND_IsBeepInProcessv))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundOrVAT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[468]"></a>SSP_WaitTxFIFOIsEmpty(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssp_spi_api.o(i._Z21SSP_WaitTxFIFOIsEmptyh))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
</UL>

<P><STRONG><a name="[8ed]"></a>SUPERVISORY_check_kpd()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, supervisory.o(i._Z21SUPERVISORY_check_kpdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_check_kpd() &rArr; SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_ers(unsigned char)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
</UL>

<P><STRONG><a name="[97a]"></a>ScanForEmptyCellInMem()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, security.o(i._Z21ScanForEmptyCellInMemv))
<BR><BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
</UL>

<P><STRONG><a name="[4ab]"></a>SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, security.o(i._Z21SendAlarmCancelledMsg10U_DEV_TYPEhhhhP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; VOICE_verification_window_on(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexWasAlarm()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterWasAlarm()
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexKf3Disarm(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[8f1]"></a>SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char)</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, process_c_proc_messages.o(i._Z21SendCloseEntryExitMsgP21S_SEC_ZONE_ENTRY_DATAhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IfIsPerimeterDevice(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
</UL>

<P><STRONG><a name="[46a]"></a>SendMsgToFlashManager(unsigned short, S_FLASH_TransferReqInfo*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, flash_func.o(i._Z21SendMsgToFlashManagertP23S_FLASH_TransferReqInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SendMsgToFlashManager(unsigned short, S_FLASH_TransferReqInfo*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
</UL>

<P><STRONG><a name="[8e]"></a>ServerKeyRequest_exec()</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, requestfogserverkey.o(i._Z21ServerKeyRequest_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ServerKeyRequest_exec() &rArr; Send_FG_GET_DEPLOYMENT_KEY(unsigned char, unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FG_GET_DEPLOYMENT_KEY(unsigned char, unsigned char)
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCellPtrFromRequestServerKeyFogTable()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> requestfogserverkey.o(i._Z21ServerKeyRequest_execv)
</UL>
<P><STRONG><a name="[998]"></a>SetCommandRespondTime(unsigned char, unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, comm_common_funcs.o(i._Z21SetCommandRespondTimehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetCommandRespondTime(unsigned char, unsigned char) &rArr; getMuxChannel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuxChannel(unsigned char)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
</UL>

<P><STRONG><a name="[990]"></a>SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, internalflash_util.o(i._Z21SetFirstSectorAndPageP13Sector_Page_sS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_RAM2Flash(unsigned char*, unsigned char*, unsigned, unsigned)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[846]"></a>SetGuardCodeCycleFlag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z21SetGuardCodeCycleFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
</UL>

<P><STRONG><a name="[a7b]"></a>SetPeriodicIndication()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msme.o(i._Z21SetPeriodicIndicationv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[a49]"></a>SetRFInputTamperFault(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_db.o(i._Z21SetRFInputTamperFaultb))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_DEV_monitor()
</UL>

<P><STRONG><a name="[8b7]"></a>SetSirenOff_ForModems()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, control_panel.o(i._Z21SetSirenOff_ForModemsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SetSirenOff_ForModems() &rArr; SetSirenOff() &rArr; CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[ae2]"></a>SndBatteryInformation(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, preparedatafortransmission.o(i._Z21SndBatteryInformationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SndBatteryInformation(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9d5]"></a>StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, apipckprocessing.o(i._Z21StartAddAndFillEntityttPhttS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*) &rArr; AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short) &rArr; AddEntityBody(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeEntityID(unsigned short)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValue(unsigned short, unsigned char*, unsigned char*, unsigned short*)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityBeforeModify(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddEntityCmd(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[676]"></a>StartChangePanelState(PANEL_COMM_STATE_E)</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, communicationstate.o(i._Z21StartChangePanelState18PANEL_COMM_STATE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = StartChangePanelState(PANEL_COMM_STATE_E) &rArr; VOICE_verification_window_on(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_send_ITR_IVT(unsigned char)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendCommunicationProtocolInf_ICI()
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions(unsigned short, unsigned short, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCheckActivationCode(unsigned char*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_installation_completed(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progSwitchMode(int, int, int*, void*)
</UL>

<P><STRONG><a name="[ae4]"></a>StartVideoCommMachine()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, videoengine.o(i._Z21StartVideoCommMachinev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartVideoCommMachine() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[32f]"></a>Stop_Entry_Exit_Beeps()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, control_panel.o(i._Z21Stop_Entry_Exit_Beepsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Stop_Entry_Exit_Beeps() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff_ForModems()
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeter_entry_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_perimeter_arm_status(unsigned char)
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[8c1]"></a>StrmSendAckToOrigTask(unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gsm_stm_streaming.o(i._Z21StrmSendAckToOrigTaskhhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = StrmSendAckToOrigTask(unsigned char, unsigned char, unsigned char, unsigned short, unsigned short) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
</UL>

<P><STRONG><a name="[ae5]"></a>TEST_FUNC_FLASH_CLEAR()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, internalflash_test.o(i._Z21TEST_FUNC_FLASH_CLEARv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TEST_FUNC_FLASH_CLEAR() &rArr; preparate_sectors_for_write(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sectors(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_INTERNAL_FLASH_CLEAR(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[ae6]"></a>TEST_FUNC_FLASH_ERASE()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, internalflash_test.o(i._Z21TEST_FUNC_FLASH_ERASEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TEST_FUNC_FLASH_ERASE() &rArr; InternalFlash_Erase() &rArr; WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Erase()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_INTERNAL_FLASH_ERASE(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[1ac]"></a>Test_DeleteAllDevices(char*, unsigned short, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_func.o(i._Z21Test_DeleteAllDevicesPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Test_DeleteAllDevices(char*, unsigned short, unsigned char) &rArr; DeleteGroupTypeDevices(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteGroupTypeDevices(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>Test_RfSetAttenuation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, test_func.o(i._Z21Test_RfSetAttenuationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Test_RfSetAttenuation(char*, unsigned short, unsigned char) &rArr; RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char) &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>Test_SetCommPrintMode(char*, unsigned short, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, test_func.o(i._Z21Test_SetCommPrintModePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Test_SetCommPrintMode(char*, unsigned short, unsigned char) &rArr; SetValToPrintGSM(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValToPrintGSM(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>TimerTaskErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, osal_time_mng.o(i._Z21TimerTaskErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[a8e]"></a>UDP_APP_device_status(U_DEV_TYPE, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, udp_app.o(i._Z21UDP_APP_device_status10U_DEV_TYPEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UDP_APP_device_status(U_DEV_TYPE, unsigned char) &rArr; get_RF_OUTPUT_DEV_ptr(int) &rArr; FL_RF_OUTPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_get_status(unsigned char)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_get_status(unsigned char)
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_get_status(unsigned char)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[aeb]"></a>USER_compare_password(unsigned char*, S_USER*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ram_user.o(i._Z21USER_compare_passwordPhP6S_USER))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USER_compare_password(unsigned char*, S_USER*) &rArr; compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[5d0]"></a>USER_set_current_user(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ram_user.o(i._Z21USER_set_current_userh))
<BR><BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[3c9]"></a>UpDateListenStatusBit()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, listen.o(i._Z21UpDateListenStatusBitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UpDateListenStatusBit() &rArr; GSM_Control_API_GetGsmStatus(S_GSM_STATUS*) &rArr; GSM_Control_StartStopRegDebounceTimer(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
</UL>

<P><STRONG><a name="[365]"></a>UpdateLoopTimeoutLeds(unsigned*, unsigned short)</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, cpui_func.o(i._Z21UpdateLoopTimeoutLedsPjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpdateLoopTimeoutLeds(unsigned*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLedTracker(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[82]"></a>VideoCommMachine_exec()</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, videoengine.o(i._Z21VideoCommMachine_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = VideoCommMachine_exec() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageDuringVoiceAvailable()
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_video_call(S_MESSAGE_COMM_INFO*, VIDEO_SCENARIO_TYPE_E)
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommInformation()
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLookingForFile(VIDEO_COMM_SESSION_S*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileNameGetState()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_fault_message(COM_FAULT_TYPE_E, S_MESSAGE_COMM_INFO*, bool, DIAL_SEQUENCE_TYPE_E, bool)
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextVideoCommSession()
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseVideoCommEvent(VIDEO_COMM_SESSION_S*)
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSessionIndicator()
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrVideoCommStruct()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> videoengine.o(i._Z21VideoCommMachine_execv)
</UL>
<P><STRONG><a name="[a42]"></a>VideoEngineSendConfig(int, int)</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, videoengine.o(i._Z21VideoEngineSendConfigii))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = VideoEngineSendConfig(int, int) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
</UL>

<P><STRONG><a name="[447]"></a>WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apicmdprocessing.o(i._Z21WriteFieldIDSetValue1ttm))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_key_fob_data()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardUser()
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyCUIEntry(int*, unsigned char*, bool*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAddKfCUIUser(unsigned short, unsigned short*)
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPrivilege2CUI(unsigned short, unsigned short)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPrivilege2UI(unsigned short)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPinCUIUser(unsigned short, unsigned short*)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKfCUIUser(unsigned short, unsigned short, unsigned short)
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCUIUserType(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[aef]"></a>decrement_USER_access(S_USER*, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ram_user.o(i._Z21decrement_USER_accessP6S_USERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = decrement_USER_access(S_USER*, unsigned char) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_ID2logical(unsigned char)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[667]"></a>device_id_calculation(unsigned char)</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, do_it_yourself.o(i._Z21device_id_calculationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = device_id_calculation(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTagReaderType(unsigned char)
</UL>

<P><STRONG><a name="[615]"></a>findTableCommandIndex(S_GSM_FUNC_TABLE_HANDLE*, unsigned short)</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, comm_common_funcs.o(i._Z21findTableCommandIndexP23S_GSM_FUNC_TABLE_HANDLEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = findTableCommandIndex(S_GSM_FUNC_TABLE_HANDLE*, unsigned short) &rArr; findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEndOfTableIndex(S_GSM_FUNC_TABLE_HANDLE*)
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[51e]"></a>get_CONTROL_PANEL_ptr()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z21get_CONTROL_PANEL_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_CONTROL_PANEL_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKPDInactivityStatus(unsigned char)
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralInactivity()
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetlInactivityWin()
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_STATUS_panel(ItrStatus_t*)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_init(unsigned char, unsigned char)
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_OpenTamper()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTamperMask(int, int, int*, void*)
</UL>

<P><STRONG><a name="[300]"></a>get_RF_OUTPUT_DEV_ptr(int)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ram_rf_output_dev.o(i._Z21get_RF_OUTPUT_DEV_ptri))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_RF_OUTPUT_DEV_ptr(int) &rArr; FL_RF_OUTPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUT_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_DEVICE_operation(unsigned char, unsigned char)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUTPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreviosTamperState(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_device_status(U_DEV_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[9bb]"></a>get_number_of_devices(RF_SEC_ZONE_TYPE_E)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, do_it_yourself.o(i._Z21get_number_of_devices18RF_SEC_ZONE_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_number_of_devices(RF_SEC_ZONE_TYPE_E) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSubDeviceAndMode(unsigned char, RF_SEC_ZONE_TYPE_E*, RF_INPUT_DEV_TYPE_E*, SIREN_TYPE_E*, unsigned char*)
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[988]"></a>get_voice_call_status()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, voice_manager.o(i._Z21get_voice_call_statusv))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[546]"></a>init_Software_Modules(unsigned char, unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, init.o(i._Z21init_Software_Moduleshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_Software_Modules(unsigned char, unsigned char) &rArr; RPC_init() &rArr; CopyParamTableFromEpromToRam() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_init()
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_init()
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_PHONE_NUM_init()
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_init()
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmQ()
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_init()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_init()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_Q_init()
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_init()
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_driver_init()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_init()
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_init()
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_Init()
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_init()
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_init()
<LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_init()
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_init()
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_init()
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerMsgFlag(bool)
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EVENT_init()
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_init()
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_init()
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_init()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_init()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVideoQ()
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitScheduler()
</UL>

<P><STRONG><a name="[b30]"></a>need_to_close_session()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rpc.o(i._Z21need_to_close_sessionv))
<BR><BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
</UL>

<P><STRONG><a name="[2b9]"></a>open_video_connection()</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, videohandler.o(i._Z21open_video_connectionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = open_video_connection() &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update_Socket_Param(unsigned char*, char*, unsigned char*)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_build_frame(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocket()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[5b1]"></a>perimeter_entry_start()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, prealarm_handler.o(i._Z21perimeter_entry_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = perimeter_entry_start() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
</UL>

<P><STRONG><a name="[42d]"></a>ram_rf_input_dev_init(unsigned char, unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ram_rf_input_dev.o(i._Z21ram_rf_input_dev_inithh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ram_rf_input_dev_init(unsigned char, unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
</UL>

<P><STRONG><a name="[9a4]"></a>release_RF_PROC_EVENT()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfq.o(i._Z21release_RF_PROC_EVENTv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = release_RF_PROC_EVENT() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfQEmpty()
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[999]"></a>returnToTaskWithState(unsigned char, unsigned short, E_GSM_REPLY_STATUS_MESSAGE)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, comm_common_funcs.o(i._Z21returnToTaskWithStateht26E_GSM_REPLY_STATUS_MESSAGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = returnToTaskWithState(unsigned char, unsigned short, E_GSM_REPLY_STATUS_MESSAGE) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
</UL>

<P><STRONG><a name="[bf8]"></a>sec_event_q_inc_index(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sec_event_q.o(i._Z21sec_event_q_inc_indexh))
<BR><BR>[Called By]<UL><LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_SEC_EVENT_ptr()
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_SEC_EVENT_ptr()
</UL>

<P><STRONG><a name="[766]"></a>start_ers_all_devices()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, do_it_yourself.o(i._Z21start_ers_all_devicesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = start_ers_all_devices() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelAllPerif(int, int, int*, void*)
</UL>

<P><STRONG><a name="[2ca]"></a>video_crc_transmision()</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, videohandler.o(i._Z21video_crc_transmisionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = video_crc_transmision() &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoCRC()
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrVideoCRC()
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocket()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[a11]"></a>AFP_APP_decode_command(unsigned char*)</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, afp_app.o(i._Z22AFP_APP_decode_commandPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = AFP_APP_decode_command(unsigned char*) &rArr; create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_read_panel_serial_num()
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_read_panel_version()
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_read_logic(U_UINT16)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[abe]"></a>AddRequestServerKeyFog(unsigned char, eRequestServerKeyFogType)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, requestfogserverkey.o(i._Z22AddRequestServerKeyFogh24eRequestServerKeyFogType))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AddRequestServerKeyFog(unsigned char, eRequestServerKeyFogType) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
</UL>

<P><STRONG><a name="[a2]"></a>Add_video_request_exec()</STRONG> (Thumb, 1064 bytes, Stack size 88 bytes, videoengine.o(i._Z22Add_video_request_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Add_video_request_exec() &rArr; CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*) &rArr; InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char) &rArr; StartVideoRFMahcine() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_label(unsigned char)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileSizeInSectors()
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_video_sequences_timeout()
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAllVideosReady(bool)
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngine_BuildVidParamsBuffer(unsigned char*, unsigned char, RF_SEC_ZONE_TYPE_E)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIVDentryId(SEQUENCER_LABEL_E)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> videoengine.o(i._Z22Add_video_request_execv)
</UL>
<P><STRONG><a name="[7e5]"></a>AdjustModeAndPartition(unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, process_income_message.o(i._Z22AdjustModeAndPartitionPhS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AdjustModeAndPartition(unsigned char*, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[90f]"></a>Aes128EcbAdditionalXor(unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, viruscryptobj.o(i._Z22Aes128EcbAdditionalXorPhS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Aes128EcbAdditionalXor(unsigned char*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[67d]"></a>AnnexSendEntryMessages()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, annex.o(i._Z22AnnexSendEntryMessagesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AnnexSendEntryMessages() &rArr; SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned long, unsigned char)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDeleteEntryMessages()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
</UL>

<P><STRONG><a name="[c15]"></a>BUTTONS_DisableButtons()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buttons_api.o(i._Z22BUTTONS_DisableButtonsv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[a7d]"></a>CHARGER_ON_if_GSM_idle()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gsm_comm.o(i._Z22CHARGER_ON_if_GSM_idlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CHARGER_ON_if_GSM_idle() &rArr; CHARGER_EN_N_DIS(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_EN_N_DIS(bool)
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Battery_Above_Chargers_Threshold()
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_VOICE_TRANSMIT_Idle()
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_VOICE_RECEIVE_Idle()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_SMS_MESSAGE_Idle()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_GSM_MESSAGE_Idle()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_G_PROC_TRANSMIT_Idle()
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_gsm_init_state_idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[2b8]"></a>CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, codec_api.o(i._Z22CODEC_ConnectToSpeakerjjhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::stop()
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformPlugBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_talk()
</UL>

<P><STRONG><a name="[b10]"></a>CPUI_Buttons_PrintMode(unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cpui_buttons_func.o(i._Z22CPUI_Buttons_PrintModeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_PrintMode(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_IsTestApplicationActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[1c7]"></a>CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z22CPUI_Buttons_Prog_FunchP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*) &rArr; CPUI_Button_EnterPinForProg(S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int) &rArr; StartSendCmd(unsigned char*, bool) &rArr; InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[686]"></a>CPUI_GetRevisionNumber()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cpui_func.o(i._Z22CPUI_GetRevisionNumberv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CPUI_GetRevisionNumber() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewNightModeAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeAction(S_CPUI_ButtonInfo*)
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelRevNum()
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init_Param()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[20c]"></a>CPUI_NotifyStateChange(unsigned short)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cpui_api.o(i._Z22CPUI_NotifyStateChanget))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetTriggerOrLevelState(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TestAllLeds(char*, unsigned short, unsigned char)
<LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJammingEventAction(S_CPUI_ButtonInfo*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewNightModeAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftButtonAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NightModeAction(S_CPUI_ButtonInfo*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_Status_Action_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_TypePinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_KeyErrorFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_Action_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init_Param()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_CheckMasterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsNightModeFunc()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ResumeBeep()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_clear_annex_alarm_in_memory()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_force_panic_disarm()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArm(int)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_voice_call(S_MESSAGE_COMM_INFO*)
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_video_call(S_MESSAGE_COMM_INFO*, VIDEO_SCENARIO_TYPE_E)
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_STUN(S_MESSAGE_COMM_INFO*)
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_exec()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularCallOption(unsigned char)
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff_ForModems()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entry_Exit_Beeps_exec()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundOrVAT_exec()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingTone_exec()
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMainPowerMSGProcess(bool, bool, bool)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChimeMask(int, int)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_done()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIDEO_DIAL_exec()
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre_alarm_indication_exec()
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_maintenance_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Perform_DTMF_Code_Actions()
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_open_call(unsigned)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTest(int, int, int*, void*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTestAllLeds(int, int, int*, void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftResetAction(S_CPUI_ButtonInfo*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVoiceCall()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[34f]"></a>CPUI_PerformLoopAction(unsigned*, unsigned char*)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, cpui_func.o(i._Z22CPUI_PerformLoopActionPjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CPUI_PerformLoopAction(unsigned*, unsigned char*) &rArr; LED_TurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GetLedState(unsigned char*, unsigned char)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOnLed(unsigned char, unsigned char)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLedTracker(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[379]"></a>CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, cpui_func.o(i._Z22CPUI_PerformSafetyBeephhPP15S_CPUI_BeepInfoh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = CPUI_PerformSafetyBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char) &rArr; CPUI_StopBeep(unsigned char) &rArr; CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_Beep(unsigned, int, int, unsigned, int, int, void(*)())
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[373]"></a>CPUI_RefreshPanelState()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cpui_api.o(i._Z22CPUI_RefreshPanelStatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = CPUI_RefreshPanelState() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_TestAllLeds(char*, unsigned short, unsigned char)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsNightModeFunc()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularCallOption(unsigned char)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTestAllLeds(int, int, int*, void*)
</UL>

<P><STRONG><a name="[341]"></a>CPUI_UpdateStopBeepMsg(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cpui_func.o(i._Z22CPUI_UpdateStopBeepMsgh))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[354]"></a>CPUI_WasCallBackCalled(void**, void*, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cpui_func.o(i._Z22CPUI_WasCallBackCalledPPvS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPUI_WasCallBackCalled(void**, void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[3f6]"></a>C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, c_proc.o(i._Z22C_PROC_RF_DEV_send_msghPhh10U_DEV_TYPEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCameraCommand(void*, unsigned char, unsigned char)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_DEVICE_operation(unsigned char, unsigned char)
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOpddConfig(int)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKfRFMsg(unsigned char, unsigned char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_message()
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDAcks_exec()
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOldSirenCmd(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[893]"></a>C_PROC_process_MESSAGE(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*, bool)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, process_c_proc_messages.o(i._Z22C_PROC_process_MESSAGE12C_DEV_TYPE_EhhPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_MESSAGE(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*, bool) &rArr; C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E) &rArr; PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[aa3]"></a>C_PROC_process_RKP_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, process_c_proc_messages.o(i._Z22C_PROC_process_RKP_msgh10U_DEV_TYPEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RKP_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[408]"></a>CheckHandshakeDecision(RX_COMMAND, PRIVATE_ID)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, incomingbufferparser.o(i._Z22CheckHandshakeDecision10RX_COMMAND10PRIVATE_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CheckHandshakeDecision(RX_COMMAND, PRIVATE_ID) &rArr; ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; CheckForSupervisory(unsigned char) &rArr; HandleNewMessage() &rArr; RefreshRxTimeout() &rArr; TIMER_ResetRFresetCounter() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRsuByteValid(unsigned char)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
</UL>

<P><STRONG><a name="[32b]"></a>ClearPanelTamperBypass()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z22ClearPanelTamperBypassv))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
</UL>

<P><STRONG><a name="[90e]"></a>CreateRandomSlotVector(unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, viruscryptobj.o(i._Z22CreateRandomSlotVectorPhS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CreateRandomSlotVector(unsigned char*, unsigned char*, unsigned char*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b16]"></a>DATALINK_close_session()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, data_link_manager.o(i._Z22DATALINK_close_sessionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DATALINK_close_session() &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_connection_closed(unsigned char)
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_close()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
</UL>

<P><STRONG><a name="[aaf]"></a>DATALINK_state_copybuf()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, data_link_manager.o(i._Z22DATALINK_state_copybufv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = DATALINK_state_copybuf() &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_RECEIVE_frame(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
</UL>

<P><STRONG><a name="[6a6]"></a>DIAL_SEQUENCE_send_msg(S_MESSAGE_COMM_INFO*, DRIVER_STATE_E, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dial_sequence.o(i._Z22DIAL_SEQUENCE_send_msgP19S_MESSAGE_COMM_INFO14DRIVER_STATE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DIAL_SEQUENCE_send_msg(S_MESSAGE_COMM_INFO*, DRIVER_STATE_E, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_exec()
</UL>

<P><STRONG><a name="[ae7]"></a>DeleteGroupTypeDevices(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, do_it_yourself.o(i._Z22DeleteGroupTypeDevicesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = DeleteGroupTypeDevices(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetMaxNumberOfDevices(unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetGenTypeInfo(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteAllDevices(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[b3]"></a>DeviceUpdateCheck_exec()</STRONG> (Thumb, 2626 bytes, Stack size 56 bytes, deviceupdatemachine.o(i._Z22DeviceUpdateCheck_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = DeviceUpdateCheck_exec() &rArr; RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDeviceTableOffset(unsigned char, unsigned)
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDevSupportBatteryInf(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRsuByteValid(unsigned char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustomerCode()
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSosStatus()
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfCanPushMessageToQueue(unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsuPacketSize32Byte()
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectOutputBuffer(unsigned char*, unsigned char)
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedMorePackets(unsigned char*, unsigned char)
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToRsuDelayState(DEVICE_REMOTE_UPDATE_STATE_E)
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacket2Collect(unsigned char*, unsigned char)
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIdBuffer(unsigned char*)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTargetType(unsigned char, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatStatus(unsigned char, unsigned char)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> deviceupdatemachine.o(i._Z22DeviceUpdateCheck_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[964]"></a>EnterCommandToDataBase()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, checkdevicetype.o(i._Z22EnterCommandToDataBasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EnterCommandToDataBase() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[25f]"></a>FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, flash_func.o(i._Z22FLASH_ExecuteOperationthPhjtjhS_PjPtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UpdatePendingRequestCounter(unsigned char, signed char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetNumOfPendingRequests(unsigned char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[308]"></a>FL_INCOMING_PHONE_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z22FL_INCOMING_PHONE_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_INCOMING_PHONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[309]"></a>FL_OUTGOING_PHONE_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z22FL_OUTGOING_PHONE_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_OUTGOING_PHONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTest(int, int, int*, void*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVoiceCall()
</UL>

<P><STRONG><a name="[6f1]"></a>FL_RF_OUTPUT_DEV_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fl_types.o(i._Z22FL_RF_OUTPUT_DEV_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_RF_OUTPUT_DEV_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRFOutputEntry(int, unsigned char*, unsigned char, bool)
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[674]"></a>FL_STRING_logical_read(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fl_types.o(i._Z22FL_STRING_logical_readt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_STRING_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_STRING_ptr(unsigned short)
</UL>

<P><STRONG><a name="[605]"></a>GSM_API_GetModemParams()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z22GSM_API_GetModemParamsv))
<BR><BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_All_Socket_Indication(unsigned char)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommandsTable(S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicited(char*, unsigned short)
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsActivatedOdmSocket()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_On_Packet_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_On_ODM_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[535]"></a>GSM_HE910_Power_Enable(bool)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, comm_common_funcs.o(i._Z22GSM_HE910_Power_Enableb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GSM_HE910_Power_Enable(bool) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Power_Off(unsigned char)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_HE910_Module_PowerUp(unsigned)
</UL>

<P><STRONG><a name="[43b]"></a>GSM_Set_Socket_Failure()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_comm.o(i._Z22GSM_Set_Socket_Failurev))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[28c]"></a>GenerateScheduler_exec()</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, smartscheduler.o(i._Z22GenerateScheduler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GenerateScheduler_exec() &rArr; OperateFunction(void(*)()) &rArr; OperateTimeBasedEvants(tFUNCTIONS_ID) &rArr; LoadNewScenarios(tQ_TYPE) &rArr; LoadHighPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextPriorityEventToDo(sPriorityQ*, unsigned char*, bool*)
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirstPriority(sPriorityQ*)
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHighPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewScenarios(tQ_TYPE)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegacyFunc()
</UL>

<P><STRONG><a name="[2ce]"></a>GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)</STRONG> (Thumb, 110 bytes, Stack size 96 bytes, videoengine.o(i._Z22GetCameraDeviceMessageh21CAMERA_MESSAGE_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoFailRetrieve_Exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[2be]"></a>GetContentLengthOffset()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filehandler.o(i._Z22GetContentLengthOffsetv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[930]"></a>GetDialSequencePhoneId(unsigned char, unsigned char*, unsigned char, bool)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dial_sequence.o(i._Z22GetDialSequencePhoneIdhPhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetDialSequencePhoneId(unsigned char, unsigned char*, unsigned char, bool) &rArr; c_proc_msg_over_JD_possible() &rArr; GetJDZoneEntry() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_msg_over_JD_possible()
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
</UL>

<P><STRONG><a name="[9fe]"></a>GetNextVideoRFTransfer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, videoq.o(i._Z22GetNextVideoRFTransferv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetNextVideoRFTransfer() &rArr; GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[be8]"></a>GetReceivedTamperState(unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cybermachine.o(i._Z22GetReceivedTamperStatePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetReceivedTamperState(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommandTamperStateChanged(unsigned char*)
</UL>

<P><STRONG><a name="[5b5]"></a>GetRsuPacketSize32Byte()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, deviceupdatemachine.o(i._Z22GetRsuPacketSize32Bytev))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndBootRequest(unsigned char)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndUpdateFile(unsigned char)
</UL>

<P><STRONG><a name="[89b]"></a>INCOME_MESSAGE_handler(unsigned char*, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, process_income_message.o(i._Z22INCOME_MESSAGE_handlerPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = INCOME_MESSAGE_handler(unsigned char*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7b5]"></a>INIT_get_memory_map_ok()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(i._Z22INIT_get_memory_map_okv))
<BR><BR>[Called By]<UL><LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[404]"></a>IPD_Or_PIR_ConfigCheck(unsigned char*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, incomingbufferparser.o(i._Z22IPD_Or_PIR_ConfigCheckPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = IPD_Or_PIR_ConfigCheck(unsigned char*) &rArr; RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
</UL>

<P><STRONG><a name="[a1d]"></a>IS_ico_msg_in_progress()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, msme.o(i._Z22IS_ico_msg_in_progressv))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
</UL>

<P><STRONG><a name="[a1e]"></a>IS_ico_signal_recieved()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, msme.o(i._Z22IS_ico_signal_recievedv))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
</UL>

<P><STRONG><a name="[ba7]"></a>IncreaseSliderPollTime()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i._Z22IncreaseSliderPollTimev))
<BR><BR>[Called By]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test()
</UL>

<P><STRONG><a name="[5f1]"></a>InitOffsetArrayElement(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, init_func.o(i._Z22InitOffsetArrayElementh))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = InitOffsetArrayElement(unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ers(unsigned char)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_ers(unsigned char)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelParallel_UI_Entity(unsigned)
</UL>

<P><STRONG><a name="[319]"></a>InternalFlash_GetIdPtr(unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, internalflash_api.o(i._Z22InternalFlash_GetIdPtrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InternalFlash_GetIdPtr(unsigned short) &rArr; InternalFlash_ReadPtr(unsigned short, unsigned short) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_ReadPtr(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIDValid()
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSFXLibrary()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[b1b]"></a>IsDevSupportBatteryInf(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, devicebatterystate.o(i._Z22IsDevSupportBatteryInfhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IsDevSupportBatteryInf(unsigned char, unsigned char, unsigned char) &rArr; CheckMajorAndMinorVersions(unsigned char, unsigned char) &rArr; ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMajorAndMinorVersions(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[91f]"></a>IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, checkdevicetype.o(i._Z22IsDeviceFrequencyValid11DEVICE_TYPEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char) &rArr; SaveFrequencyOffsetArray() &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_GetCyberFlags()
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFrequencyOffsetArray()
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceIndex(DEVICE_TYPE, unsigned char)
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDefectTr5Version(DEVICE_TYPE, unsigned char)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c54]"></a>IsEnoughPlaceInRfQueue(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, util.o(i._Z22IsEnoughPlaceInRfQueueh))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
</UL>

<P><STRONG><a name="[690]"></a>IsFoundRegTaskByTaskId(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, comm_stm_rx_manager.o(i._Z22IsFoundRegTaskByTaskIdh))
<BR><BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngSwitchTransparenceMode(unsigned char, unsigned)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[98e]"></a>IsSecurityTimerExpired()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security.o(i._Z22IsSecurityTimerExpiredv))
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[bdc]"></a>IsSendRaaMessageEnable(C_DEV_TYPE_E, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, cyberattackstates.o(i._Z22IsSendRaaMessageEnable12C_DEV_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsSendRaaMessageEnable(C_DEV_TYPE_E, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[9c5]"></a>IsStunDontChgIPandPort()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sms_message.o(i._Z22IsStunDontChgIPandPortv))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[aae]"></a>IsTransportDelayNeeded()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, el_v2_driver.o(i._Z22IsTransportDelayNeededv))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
</UL>

<P><STRONG><a name="[795]"></a>IsVideoCommMachineIdle()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, videoengine.o(i._Z22IsVideoCommMachineIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_precondition_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
</UL>

<P><STRONG><a name="[48e]"></a>Is_DIAL_PHONE_NUM_Idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dial_phone_num.o(i._Z22Is_DIAL_PHONE_NUM_Idlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[497]"></a>Is_IP_APP_COMMAND_idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip_app.o(i._Z22Is_IP_APP_COMMAND_idlev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[49b]"></a>Is_VOICE_TRANSMIT_Idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, voice_manager.o(i._Z22Is_VOICE_TRANSMIT_Idlev))
<BR><BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[b0f]"></a>Is_gsm_init_state_idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm_comm.o(i._Z22Is_gsm_init_state_idlev))
<BR><BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[88e]"></a>JammingBypassToChannel(int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gsm_comm.o(i._Z22JammingBypassToChanneli))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JammingBypassToChannel(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_JammingRestoreActions()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6c0]"></a>MP_SYSTEM_BIT_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, unsigned char*)</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, maintenance.o(i._Z22MP_SYSTEM_BIT_commandsPhS_P15E_MP_ERROR_CODES_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MP_SYSTEM_BIT_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, unsigned char*) &rArr; MP_BIT_calc_software_checksum(unsigned long, unsigned long, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_BIT_calc_software_checksum(unsigned long, unsigned long, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[b24]"></a>MSME_state_wait4answer()</STRONG> (Thumb, 760 bytes, Stack size 40 bytes, msme.o(i._Z22MSME_state_wait4answerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = MSME_state_wait4answer() &rArr; DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*) &rArr; MSME_q_BuildandSendSigFoxMsg(S_MSME_MSG_EVENT*) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_ClearSigFoxMessages()
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSavePeriodicCounters()
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SetSigFoxIDEAlarm(unsigned char)
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPeriodicRetry(bool)
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSosStatus(int)
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSosStatus()
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetTlbMsgAckStatus(MSME_MSG_ACK_STATUS_E)
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_close_channel(unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_exec()
</UL>

<P><STRONG><a name="[950]"></a>MultiplyUsersByDevices(unsigned char*, bool)</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, apicopyuiprocessing.o(i._Z22MultiplyUsersByDevicesPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = MultiplyUsersByDevices(unsigned char*, bool) &rArr; AddDevicesPerUser(unsigned short, unsigned short*, unsigned char*, bool) &rArr; AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool) &rArr; CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyAllCUI2UIStates(unsigned short)
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDevicesPerUser(unsigned short, unsigned short*, unsigned char*, bool)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveGuardUser(unsigned short, unsigned short*, unsigned short*)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTagCUIUser(unsigned short, unsigned short*, unsigned short, unsigned char*, bool)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[584]"></a>OSAL_CyclicBufferClear(OSAL_CyclicBuffer*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, osal_cyclic_buff.o(i._Z22OSAL_CyclicBufferClearP17OSAL_CyclicBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSAL_CyclicBufferClear(OSAL_CyclicBuffer*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
</UL>

<P><STRONG><a name="[4dd]"></a>OSAL_Num2MinimalDecStr(unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, osal_services.o(i._Z22OSAL_Num2MinimalDecStrjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSAL_Num2MinimalDecStr(unsigned, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetRSSI(char*, unsigned short, unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[957]"></a>OSAL_PortIsMailBoxFull(void*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osal_port.o(i._Z22OSAL_PortIsMailBoxFullPv))
<BR><BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IsMailBoxFull(unsigned char)
</UL>

<P><STRONG><a name="[70e]"></a>OSAL_PortMailBoxCreate(unsigned short, void**)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, osal_port.o(i._Z22OSAL_PortMailBoxCreatetPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OSAL_PortMailBoxCreate(unsigned short, void**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
</UL>

<P><STRONG><a name="[958]"></a>OSAL_PortWaitOnMessage(void*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, osal_port.o(i._Z22OSAL_PortWaitOnMessagePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_PortWaitOnMessage(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
</UL>

<P><STRONG><a name="[2a2]"></a>OSAL_SendMessageToTask(OSAL_Msg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_msg.o(i._Z22OSAL_SendMessageToTaskP8OSAL_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_End_TCP_Full_Msg_Cycle()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_DetachGprs(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxEndIndication(unsigned char)
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxResponse(unsigned char)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnTransparency(unsigned)
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyVirtualButtonPress()
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyPinPressed(unsigned short)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg2RfTask(unsigned short, void*)
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvExtractFromQ(OSAL_PriorityQueue*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_StartStopRegDebounceTimer(unsigned)
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_StrmResetStmFlags()
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MsgResetStmFlags()
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LsnResetStmFlags()
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetAudioConfiguration(unsigned char, unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[c35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendEndOfSession(unsigned char)
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendEndOfSession(unsigned char)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallClose(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallDial(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_CloseOdmGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_AnswerCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendSMS(unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngPauseGSM(unsigned char, unsigned)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_End_CSD_Full_Msg_Cycle()
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetGsmStatus(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngRegForCommTask(unsigned char, unsigned short)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnFullTransparency(unsigned)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnMuxParser(unsigned)
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrmSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LsnSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LsnSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TimerChangePause(unsigned short, unsigned char)
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimerExt(unsigned short, unsigned char)
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlSendTableCommand(unsigned char, unsigned short)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_SendAckUpdateStatus(S_VAT_Info*, unsigned short, unsigned char)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_SessionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStop(unsigned char, unsigned char, unsigned*)
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_SendApplicationTestOpenningMsg(unsigned char)
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationDeactivate()
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationActivate()
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_CalcCRCFromFlash()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskCallBack(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_Task_API_FTPGetFile(char*, char*, char*, char*, char*, void*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyLoopIterationState(unsigned char, unsigned short)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerAckToTask(S_TimerInfo*)
</UL>

<P><STRONG><a name="[717]"></a>OperateTimeBasedEvants(tFUNCTIONS_ID)</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, smartscheduler.o(i._Z22OperateTimeBasedEvants13tFUNCTIONS_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OperateTimeBasedEvants(tFUNCTIONS_ID) &rArr; LoadNewScenarios(tQ_TYPE) &rArr; LoadHighPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextPriorityEventToDo(sPriorityQ*, unsigned char*, bool*)
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadTimeBaseScenario(tSCENARIO_ID)
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewScenarios(tQ_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateFunction(void(*)())
</UL>

<P><STRONG><a name="[6bb]"></a>OutOfHome_IsInOOHState()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, outofhome_api_stub.o(i._Z22OutOfHome_IsInOOHStatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OutOfHome_IsInOOHState() &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[691]"></a>PSTN_ClearResetCounter()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pstn_stub.o(i._Z22PSTN_ClearResetCounterv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PSTN_ClearResetCounter() &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[7a4]"></a>PreparateIpLearnTagMsg(unsigned char*, unsigned char*, bool)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ip_app.o(i._Z22PreparateIpLearnTagMsgPhS_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PreparateIpLearnTagMsg(unsigned char*, unsigned char*, bool) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_tag(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b28]"></a>ProcessDeleteEntityCmd(unsigned short, unsigned char*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, apipckprocessing.o(i._Z22ProcessDeleteEntityCmdtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProcessDeleteEntityCmd(unsigned short, unsigned char*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[515]"></a>ProcessDeleteGetAllCmd(unsigned char, unsigned char*, unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, apipckprocessing.o(i._Z22ProcessDeleteGetAllCmdhPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ProcessDeleteGetAllCmd(unsigned char, unsigned char*, unsigned char*) &rArr; ProcessGetAllCmd(unsigned char, unsigned char*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArgByte(unsigned char*)
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteAllCmd(unsigned char, unsigned char*)
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGetAllCmd(unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCmdProcess(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[b29]"></a>ProcessModifyEntityCmd(unsigned short, unsigned short*, unsigned char*, unsigned char*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, apipckprocessing.o(i._Z22ProcessModifyEntityCmdtPtPhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ProcessModifyEntityCmd(unsigned short, unsigned short*, unsigned char*, unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[a79]"></a>ProcessRepeatRkpStatus()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, security.o(i._Z22ProcessRepeatRkpStatusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ProcessRepeatRkpStatus() &rArr; ForceAlarm_Off() &rArr; ALARM_off() &rArr; SetSirenOff() &rArr; CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceAlarm_Off()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoRFMachineIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[50]"></a>Progressive_siren_exec()</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, control_panel.o(i._Z22Progressive_siren_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = Progressive_siren_exec() &rArr; StartDelayedAlarm() &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetNumOfDevicePending(unsigned char)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMasterSlave(unsigned char, unsigned char, unsigned*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTestAlarm()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceIDLE()
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> control_panel.o(i._Z11SetSirenOffv)
<LI> control_panel.o(i._Z21SetSirenOff_ForModemsv)
<LI> control_panel.o(i._Z22Progressive_siren_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[9e5]"></a>RAM_DB_num_open_tamper()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ram_db.o(i._Z22RAM_DB_num_open_tamperv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RAM_DB_num_open_tamper()
</UL>
<BR>[Calls]<UL><LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_open_tamper()
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_open_tamper()
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_open_tamper()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[ae8]"></a>RF_SEC_ZONE_get_status(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z22RF_SEC_ZONE_get_statush))
<BR><BR>[Called By]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_device_status(U_DEV_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[891]"></a>RPC_clear_page_counter()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpc.o(i._Z22RPC_clear_page_counterv))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[972]"></a>Radio_GetPowerRegister(E_CC11XX_Freq_Table, unsigned char, bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cc11xxdrvfncvfii.o(i._Z22Radio_GetPowerRegister19E_CC11XX_Freq_Tablehb))
<BR><BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetHwTxPower(signed char)
</UL>

<P><STRONG><a name="[82a]"></a>Radio_GotoDefaultState()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z22Radio_GotoDefaultStatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Radio_GotoDefaultState() &rArr; Radio_CalExec() &rArr; Radio_SendStrobe(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetRxGDOs()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalExec()
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CheckState()
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetWORMode(int)
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
</UL>

<P><STRONG><a name="[a60]"></a>Radio_SetAddressFilter(E_RfDrv_Address_Filter, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z22Radio_SetAddressFilter22E_RfDrv_Address_Filterh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_SetAddressFilter(E_RfDrv_Address_Filter, unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[b2d]"></a>Radio_StaticDataPtrSet(void*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z22Radio_StaticDataPtrSetPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Radio_StaticDataPtrSet(void*) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[a58]"></a>RamMemoryMapSetTagSize(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rammemorymap.o(i._Z22RamMemoryMapSetTagSizeb))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[80f]"></a>RamRfSec_SetPhotoDelay(unsigned char*)</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, ram_rf_sec_zone.o(i._Z22RamRfSec_SetPhotoDelayPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = RamRfSec_SetPhotoDelay(unsigned char*) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[ad3]"></a>ReadVirtualSnObj_Close(TReadVirtualSnObj*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, virtualsnobj.o(i._Z22ReadVirtualSnObj_CloseP17TReadVirtualSnObj))
<BR><BR>[Called By]<UL><LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Exec(TReadVirtualSnObj*)
</UL>

<P><STRONG><a name="[a06]"></a>ReleaseRFTransferEvent(VIDEO_RF_TRANSFER_S*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, videoq.o(i._Z22ReleaseRFTransferEventP19VIDEO_RF_TRANSFER_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReleaseRFTransferEvent(VIDEO_RF_TRANSFER_S*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseVideoCommEvent(VIDEO_COMM_SESSION_S*)
</UL>

<P><STRONG><a name="[82b]"></a>RfAttribProcessingSend(S_Radio_ComFifo*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rfdrv_func.o(i._Z22RfAttribProcessingSendP15S_Radio_ComFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RfAttribProcessingSend(S_Radio_ComFifo*) &rArr; SendMsg2RfTask(unsigned short, void*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg2RfTask(unsigned short, void*)
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttributeReleaseTxBuffers(S_Radio_ComFifo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
</UL>

<P><STRONG><a name="[14a]"></a>RfSecZoneStatusBuilder(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, ram_rf_sec_zone.o(i._Z22RfSecZoneStatusBuilderj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RfSecZoneStatusBuilder(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ram_db.o(.constdata)
</UL>
<P><STRONG><a name="[6a5]"></a>RxMngSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, comm_stm_rx_manager.o(i._Z22RxMngSendAckToOrigTaskhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RxMngSendAckToOrigTask(unsigned char, unsigned char, unsigned short, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[b2f]"></a>SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, security.o(i._Z22SECURITY_alarm_actions17SECURITY_STATES_EP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUSh))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char) &rArr; SECURITY_event_action(E_CONTROL_PANEL_EVENT) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityISNSirenAfterSafety(unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCodeMsg(CP_ARM_TYPE_E)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGuardCodeFlag()
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGuardCode()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_close_session(RPC_RESULT_E)
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_to_close_session()
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[7ca]"></a>SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, security.o(i._Z22SECURITY_remote_disarm7E_MEDIAbP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertSecStateToQ()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b32]"></a>SFD_ResetCRCCalculator()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sfd_func.o(i._Z22SFD_ResetCRCCalculatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFD_ResetCRCCalculator() &rArr; SFD_InitRC() &rArr; rc_init(rc_state*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFD_InitRC()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
</UL>

<P><STRONG><a name="[4d]"></a>SOUND_D2ACodecCallBack()</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sound_api.o(i._Z22SOUND_D2ACodecCallBackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SOUND_D2ACodecCallBack() &rArr; HW_TIMER_Start(unsigned char, unsigned, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Stop(unsigned char)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Start(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound_api.o(i._Z10SOUND_Initv)
</UL>
<P><STRONG><a name="[b33]"></a>SaveCommStatusInMemMap()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, communicationstate.o(i._Z22SaveCommStatusInMemMapv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SaveCommStatusInMemMap() &rArr; SaveCommStatus(PANEL_COMM_STATE_E) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommStatus(PANEL_COMM_STATE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
</UL>

<P><STRONG><a name="[894]"></a>SaveTemperatureReading(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msme.o(i._Z22SaveTemperatureReadingh))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7c2]"></a>SearchFreePageInSector(unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, internalflash_util.o(i._Z22SearchFreePageInSectorhh))
<BR><BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeedNextFreePage(Sector_Page_s*, Sector_Page_s*)
</UL>

<P><STRONG><a name="[a41]"></a>SendArmedVidDeviceList()</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, ram_rf_sec_zone.o(i._Z22SendArmedVidDeviceListv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendArmedVidDeviceList() &rArr; C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
</UL>

<P><STRONG><a name="[11e]"></a>SendJammingEventAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z22SendJammingEventActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SendJammingEventAction(S_CPUI_ButtonInfo*) &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIDValid()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_IsPanelRFJammed()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpui_buttons_func.o(.constdata)
</UL>
<P><STRONG><a name="[b34]"></a>SendMessageBeforeReset(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, process_income_message.o(i._Z22SendMessageBeforeReseth))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SendMessageBeforeReset(unsigned char) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetRFresetCounter()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_power_cycle_exec()
</UL>

<P><STRONG><a name="[b36]"></a>SetKPDInactivityStatus(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, inactivity.o(i._Z22SetKPDInactivityStatush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetKPDInactivityStatus(unsigned char) &rArr; CONTROL_PANEL_get_sysinactivity_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysinactivity_ptr()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInactivityButtonStatus()
</UL>

<P><STRONG><a name="[9f3]"></a>SetListenMaxRetryParam(unsigned char, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, listen.o(i._Z22SetListenMaxRetryParamhj))
<BR><BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
</UL>

<P><STRONG><a name="[9f4]"></a>SetOnlineMaxRetryParam(unsigned char, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, link.o(i._Z22SetOnlineMaxRetryParamhj))
<BR><BR>[Called By]<UL><LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
</UL>

<P><STRONG><a name="[b37]"></a>SndRstAfterNumOfSVLost(U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, deviceconfigmachine.o(i._Z22SndRstAfterNumOfSVLost10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SndRstAfterNumOfSVLost(U_DEV_TYPE, unsigned char, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_sirens()
</UL>

<P><STRONG><a name="[7d8]"></a>StartInactivityMachine()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, inactivity.o(i._Z22StartInactivityMachinev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = StartInactivityMachine() &rArr; GetInactivityButtonStatus() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChimeOrInactivityCntBit()
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInactivityButtonStatus()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d1]"></a>Start_Entry_Exit_Beeps(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, control_panel.o(i._Z22Start_Entry_Exit_Beepsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Start_Entry_Exit_Beeps(unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[199]"></a>TEST_ExecuteFlashErase(char*, unsigned short, unsigned char)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, test_func.o(i._Z22TEST_ExecuteFlashErasePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteFlashErase(char*, unsigned short, unsigned char) &rArr; FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_IsBusy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>Test_DisplayAllDevices(char*, unsigned short, unsigned char)</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, test_func.o(i._Z22Test_DisplayAllDevicesPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Test_DisplayAllDevices(char*, unsigned short, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_num2hexstr(unsigned, unsigned char*, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetMaxNumberOfDevices(unsigned char)
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Info_InPanel(unsigned char, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceGTID(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>Test_RfSetCarrierSense(char*, unsigned short, unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, test_func.o(i._Z22Test_RfSetCarrierSensePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Test_RfSetCarrierSense(char*, unsigned short, unsigned char) &rArr; RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char) &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[b39]"></a>Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, timer.o(i._Z22Timer_BuildArmAwarnMsgP21S_SEC_ZONE_ENTRY_DATAP13S_RF_SEC_ZONE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
</UL>

<P><STRONG><a name="[633]"></a>Timer_IsCSDVoiceWindow()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i._Z22Timer_IsCSDVoiceWindowv))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c10]"></a>UART_SetIntIndCallback(void(*)(), unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_api.o(i._Z22UART_SetIntIndCallbackPFvvEh))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[a8c]"></a>UDP_APP_API_processing(unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, udp_app.o(i._Z22UDP_APP_API_processingPhS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UDP_APP_API_processing(unsigned char*, unsigned char*, unsigned char*) &rArr; RxPacketProcessingStates(unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacketProcessingStates(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[a8d]"></a>UDP_APP_decode_command(unsigned char*)</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, udp_app.o(i._Z22UDP_APP_decode_commandPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = UDP_APP_decode_command(unsigned char*) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOffsetArrayElement(unsigned char)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_read_logic(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[b3b]"></a>UpdateVirtualSnRequest()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, init.o(i._Z22UpdateVirtualSnRequestv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateVirtualSnRequest()
</UL>
<BR>[Calls]<UL><LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Config(TReadVirtualSnObj*, TWriteVirtualSnObj*, PanelId_t, PanelId_t*)
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Open(TReadVirtualSnObj*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[c0]"></a>VideoFailRetrieve_Exec()</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, videoengine.o(i._Z22VideoFailRetrieve_Execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = VideoFailRetrieve_Exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVidDeviceOrdinal(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> videoengine.o(i._Z22VideoFailRetrieve_Execv)
</UL>
<P><STRONG><a name="[7e9]"></a>WriteSimNumberToEEProm(unsigned char*, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, message.o(i._Z22WriteSimNumberToEEPromPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = WriteSimNumberToEEProm(unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a76]"></a>WriteVirtualSnObj_Exec(TWriteVirtualSnObj*)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, virtualsnobj.o(i._Z22WriteVirtualSnObj_ExecP18TWriteVirtualSnObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = WriteVirtualSnObj_Exec(TWriteVirtualSnObj*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_Close(TWriteVirtualSnObj*)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[ad4]"></a>WriteVirtualSnObj_Open(TWriteVirtualSnObj*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, virtualsnobj.o(i._Z22WriteVirtualSnObj_OpenP18TWriteVirtualSnObj))
<BR><BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSetVirtualSnPoseso(unsigned char*, MSME_MSG_E*, unsigned char*)
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Exec(TReadVirtualSnObj*)
</UL>

<P><STRONG><a name="[8b9]"></a>c_proc_IsPanelRFJammed()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c_proc.o(i._Z22c_proc_IsPanelRFJammedv))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJammingEventAction(S_CPUI_ButtonInfo*)
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_JammingRestoreActions()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[328]"></a>delete_pre_alarm_video()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, videoengine.o(i._Z22delete_pre_alarm_videov))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a9]"></a>device_auto_learn_exec()</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, do_it_yourself.o(i._Z22device_auto_learn_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = device_auto_learn_exec() &rArr; save_key_fob_data() &rArr; AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rkp_data(unsigned char*, unsigned char*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_C_PROC_Q_empty()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_key_fob_data()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> do_it_yourself.o(i._Z22device_auto_learn_execv)
<LI> do_it_yourself.o(i._Z9DIY_Abortv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[9d4]"></a>get_panel_siren_active()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z22get_panel_siren_activev))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
</UL>

<P><STRONG><a name="[380]"></a>isDigitButtonsDisabled()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z22isDigitButtonsDisabledv))
<BR><BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[a7c]"></a>is_gas_meter_installed()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_rf_input_dev.o(i._Z22is_gas_meter_installedv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[b6b]"></a>pre_alarm_notification()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z22pre_alarm_notificationv))
<BR><BR>[Called By]<UL><LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[42a]"></a>ram_control_panel_init(unsigned char, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ram_control_panel.o(i._Z22ram_control_panel_inithh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ram_control_panel_init(unsigned char, unsigned char) &rArr; get_CONTROL_PANEL_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[42e]"></a>ram_rf_output_dev_init(unsigned char, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ram_rf_output_dev.o(i._Z22ram_rf_output_dev_inithh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ram_rf_output_dev_init(unsigned char, unsigned char) &rArr; FL_RF_OUTPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[51c]"></a>recover_voice_settings()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, control_panel.o(i._Z22recover_voice_settingsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = recover_voice_settings() &rArr; SPEAKER_on()
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_IsBusy()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_StopBeep(unsigned char)
</UL>

<P><STRONG><a name="[748]"></a>reset_inactivity_timer()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inactivity.o(i._Z22reset_inactivity_timerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = reset_inactivity_timer() &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInactivityMachine()
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetlInactivityWin()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftResetAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[892]"></a>save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ram_rf_input_dev.o(i._Z22save_gas_meter_counterh12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_entry(unsigned char)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nible_by_id(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_valid(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ada]"></a>security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)</STRONG> (Thumb, 550 bytes, Stack size 64 bytes, security.o(i._Z22security_state_machineP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*) &rArr; SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetResetSource()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrGuardCodeCycleFlag()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_maintenance_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertSecStateToQ()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEEramMem(bool)
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_SEC_EVENT(S_SEC_EVENT*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
</UL>

<P><STRONG><a name="[4b0]"></a>set_panel_notification(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z22set_panel_notificationb))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
</UL>

<P><STRONG><a name="[648]"></a>tag_reader_getSettings(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tag_reader.o(i._Z22tag_reader_getSettingsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_is_fast_force_arm(unsigned char)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_restore_msg(unsigned char)
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_active_msg(unsigned char)
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_IsEfmTr5WithEntryBeeps()
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_tr5_entry_beep_builder(unsigned char*)
</UL>

<P><STRONG><a name="[b4c]"></a>tryCheckActivationCode(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, init.o(i._Z22tryCheckActivationCodePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tryCheckActivationCode(unsigned char*) &rArr; INIT_set_installation_completed(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTEMANCE_get_IC()
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_installation_completed(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[2c6]"></a>video_close_connection()</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, videohandler.o(i._Z22video_close_connectionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = video_close_connection() &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Msg_build_frame(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrVideoCRC()
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocket()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[7e0]"></a>ACTION_DEVICE_operation(unsigned char, unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, process_c_proc_messages.o(i._Z23ACTION_DEVICE_operationhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ACTION_DEVICE_operation(unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[55]"></a>AP_PROTOCL_MACHINE_exec()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, maintenance.o(i._Z23AP_PROTOCL_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = AP_PROTOCL_MACHINE_exec() &rArr; EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> maintenance.o(i._Z23AP_PROTOCL_MACHINE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[b4d]"></a>ActivateFlashProgrammer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, processflash.o(i._Z23ActivateFlashProgrammerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ActivateFlashProgrammer() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triggger_Program_Flash_Subpage(unsigned long, unsigned char*, int)
</UL>

<P><STRONG><a name="[91]"></a>ApiPackProcHandler_exec()</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, apistatemachines.o(i._Z23ApiPackProcHandler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ApiPackProcHandler_exec() &rArr; SndUdpMsg(FLAG_FIELD*, unsigned char*, unsigned char) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndUdpMsg(FLAG_FIELD*, unsigned char*, unsigned char)
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTxCmd(unsigned char*, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCmdProcess(unsigned char*, unsigned char*)
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTxParams(unsigned char*, FLAG_FIELD*, unsigned char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> apipckprocessing.o(i._Z13ResetPackProcv)
<LI> apistatemachines.o(i._Z23ApiPackProcHandler_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[add]"></a>CONTROL_PANEL_get_event(E_CONTROL_PANEL_EVENT)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z23CONTROL_PANEL_get_event21E_CONTROL_PANEL_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CONTROL_PANEL_get_event(E_CONTROL_PANEL_EVENT) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
</UL>

<P><STRONG><a name="[7e3]"></a>CONTROL_PANEL_set_timer(unsigned char, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ram_control_panel.o(i._Z23CONTROL_PANEL_set_timerhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = CONTROL_PANEL_set_timer(unsigned char, unsigned char) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_timer(unsigned char, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b51]"></a>CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z23CPUI_Buttons_PinEnteredP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*) &rArr; tryCheckActivationCode(unsigned char*) &rArr; INIT_set_installation_completed(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCheckActivationCode(unsigned char*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StartGoodPinCodeFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[376]"></a>CPUI_PerformBlinkAction(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, cpui_func.o(i._Z23CPUI_PerformBlinkActionjPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CPUI_PerformBlinkAction(unsigned, unsigned char*, unsigned char) &rArr; CPUI_TurnOnPartLed(unsigned char, unsigned char) &rArr; LED_TurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GetLedState(unsigned char*, unsigned char)
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_TurnOnPartLed(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[b54]"></a>CPUI_RefreshPanelRevNum()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpui_api.o(i._Z23CPUI_RefreshPanelRevNumv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CPUI_RefreshPanelRevNum() &rArr; CPUI_GetRevisionNumber() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[58]"></a>CP_PROTOCL_MACHINE_exec()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, maintenance.o(i._Z23CP_PROTOCL_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CP_PROTOCL_MACHINE_exec() &rArr; EL_CP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_clear_packet_pending()
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_packet_pending()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketTimeout(TimerStruct_S*)
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_CP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> maintenance.o(i._Z23CP_PROTOCL_MACHINE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[395]"></a>C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, c_proc.o(i._Z23C_PROC_INSTALL_send_msgh18A2C_PROC_MESSAGE_E12C_DEV_TYPE_EPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOpenRxCmd(unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_GET_BIT_RESULT_exec()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFogWiredCfgMsg(unsigned char, unsigned char, unsigned char)
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages_exec()
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_Reset_Jamming_Detector()
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_Ask4TimeStamp(unsigned char*)
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FG_GET_DEPLOYMENT_KEY(unsigned char, unsigned char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCameraCommand(void*, unsigned char, unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTagReaderType(unsigned char)
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ConfigIPDESensitivity(unsigned char)
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_decode_command(unsigned char*)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PollIPDEWindowStates(unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_sirens()
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_kpd()
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest(unsigned char, unsigned char, unsigned char)
<LI><a href="#[c2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_send_start_cover_test_msg(unsigned char)
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_send_open_rx(unsigned char*, unsigned char*)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_decode_command(unsigned char*)
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*)
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SendOpenRx()
</UL>

<P><STRONG><a name="[b55]"></a>Calc_Internal_Flash_CRC()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, processflash.o(i._Z23Calc_Internal_Flash_CRCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Calc_Internal_Flash_CRC() &rArr; ActivateCRC32Calc() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateCRC32Calc()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[802]"></a>ChangeAlarmFriendlyMode(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, process_income_message.o(i._Z23ChangeAlarmFriendlyModeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ChangeAlarmFriendlyMode(unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[a30]"></a>CheckIfRetryOrBroadcast()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, checkifretryorbroadcast.o(i._Z23CheckIfRetryOrBroadcastv))
<BR><BR>[Called By]<UL><LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendPacketPreambleCounter()
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendPacketTimeOut()
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfMsg()
</UL>

<P><STRONG><a name="[b56]"></a>CheckSendNewRfHandshake(unsigned char, RX_COMMAND*)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, preparedatafortransmission.o(i._Z23CheckSendNewRfHandshakehP10RX_COMMAND))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckSendNewRfHandshake(unsigned char, RX_COMMAND*)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfCanPushMessageToQueue(unsigned char)
</UL>

<P><STRONG><a name="[69a]"></a>ClearRegTaskIndications(S_COMM_STM_RX_MNG_COMM_TASK_REG*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comm_stm_rx_manager.o(i._Z23ClearRegTaskIndicationsP31S_COMM_STM_RX_MNG_COMM_TASK_REG))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[9b]"></a>Close_voice_window_exec()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, voice_manager.o(i._Z23Close_voice_window_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Close_voice_window_exec() &rArr; VOICE_verification_window_on(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> voice_manager.o(i._Z23Close_voice_window_execv)
</UL>
<P><STRONG><a name="[6ec]"></a>Clr_InActivity_Counters()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, inactivity.o(i._Z23Clr_InActivity_Countersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Clr_InActivity_Counters() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
</UL>

<P><STRONG><a name="[a09]"></a>CompensateForNoVidReady(VIDEO_RF_TRANSFER_S*)</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, videoengine.o(i._Z23CompensateForNoVidReadyP19VIDEO_RF_TRANSFER_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CompensateForNoVidReady(VIDEO_RF_TRANSFER_S*) &rArr; GetVideoEntry(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Types_CheckDeviceType(unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIVDentryId(SEQUENCER_LABEL_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[9ea]"></a>CreateNewPriorityQEvent(t_node*, void*, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, priorityq.o(i._Z23CreateNewPriorityQEventP6t_nodePvh))
<BR><BR>[Called By]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6a9]"></a>DATALINK_packet_pending()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_link_manager.o(i._Z23DATALINK_packet_pendingv))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_PROTOCL_MACHINE_exec()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_PROTOCL_MACHINE_exec()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_receive()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[7be]"></a>DIAL_PHONE_NUM_send_msg(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dial_phone_num.o(i._Z23DIAL_PHONE_NUM_send_msgP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DIAL_PHONE_NUM_send_msg(S_MESSAGE_COMM_INFO*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
</UL>

<P><STRONG><a name="[96b]"></a>DeviceRemoteBootTrigger()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, deviceupdatemachine.o(i._Z23DeviceRemoteBootTriggerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DeviceRemoteBootTrigger() &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[a39]"></a>EnterCountersToDataBase()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, entercounterstodatabase.o(i._Z23EnterCountersToDataBasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EnterCountersToDataBase() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[675]"></a>FL_INCOMING_PHONE_erase(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z23FL_INCOMING_PHONE_eraseh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = FL_INCOMING_PHONE_erase(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelIncNumb(int, int, int*, void*)
</UL>

<P><STRONG><a name="[7e6]"></a>FL_INCOMING_PHONE_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fl_types.o(i._Z23FL_INCOMING_PHONE_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_INCOMING_PHONE_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
</UL>

<P><STRONG><a name="[767]"></a>FL_OUTGOING_PHONE_erase(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z23FL_OUTGOING_PHONE_eraseh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = FL_OUTGOING_PHONE_erase(unsigned char) &rArr; ENTRY_erase(unsigned short) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelOutgNumb(int, int, int*, void*)
</UL>

<P><STRONG><a name="[7e7]"></a>FL_OUTGOING_PHONE_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fl_types.o(i._Z23FL_OUTGOING_PHONE_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_OUTGOING_PHONE_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
</UL>

<P><STRONG><a name="[c9]"></a>FOG_GET_BIT_RESULT_exec()</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, fog_bit_result.o(i._Z23FOG_GET_BIT_RESULT_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FOG_GET_BIT_RESULT_exec() &rArr; SendOpenRxCmd(unsigned char, unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOpenRxCmd(unsigned char, unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 3]<UL><LI> fog_bit_result.o(i._Z23FOG_GET_BIT_RESULT_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[6c9]"></a>FileNameQueryCompliance(unsigned char*, unsigned char*)</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, filesystemmanagment.o(i._Z23FileNameQueryCompliancePhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FileNameQueryCompliance(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
</UL>

<P><STRONG><a name="[814]"></a>FindFirstSecurityTamper()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ram_rf_sec_zone.o(i._Z23FindFirstSecurityTamperv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FindFirstSecurityTamper() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[8ae]"></a>GSM_Control_API_IsMuxOn()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_api.o(i._Z23GSM_Control_API_IsMuxOnv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Control_API_IsMuxOn()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_HwPowerSaveControl(unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageDuringVoiceAvailable()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[4f7]"></a>GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, gsm_api.o(i._Z23GSM_Control_API_OpenCSDhPcttS_htPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[4f6]"></a>GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, gsm_api.o(i._Z23GSM_Control_API_SendCSDhPcttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[4f4]"></a>GSM_Control_API_SendSMS(unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, gsm_api.o(i._Z23GSM_Control_API_SendSMShPctS_ttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_SendSMS(unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[b57]"></a>GSM_SetONOFFsignalHE910(int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gsm_module_funcs_he910.o(i._Z23GSM_SetONOFFsignalHE910i))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GSM_SetONOFFsignalHE910(int) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_HE910_Module_PowerUp(unsigned)
</UL>

<P><STRONG><a name="[79a]"></a>GSM_Update_Socket_Param(unsigned char*, char*, unsigned char*)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, m_a2g.o(i._Z23GSM_Update_Socket_ParamPhPcS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GSM_Update_Socket_Param(unsigned char*, char*, unsigned char*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa(unsigned char*, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
</UL>

<P><STRONG><a name="[96a]"></a>GetCountersFromDataBase()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, entercounterstodatabase.o(i._Z23GetCountersFromDataBasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetCountersFromDataBase() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[99a]"></a>GetCurrentCommandsTable(S_GSM_FUNC_TABLE_HANDLE*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, comm_common_funcs.o(i._Z23GetCurrentCommandsTableP23S_GSM_FUNC_TABLE_HANDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetCurrentCommandsTable(S_GSM_FUNC_TABLE_HANDLE*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleTableRow(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
</UL>

<P><STRONG><a name="[aec]"></a>GetNextVideoCommSession()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, videoq.o(i._Z23GetNextVideoCommSessionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetNextVideoCommSession() &rArr; GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
</UL>

<P><STRONG><a name="[7c6]"></a>GetNineDigitPhoneNumber()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, process_income_message.o(i._Z23GetNineDigitPhoneNumberv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetNineDigitPhoneNumber() &rArr; A2G_GetCallingLineNum(unsigned char*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_GetCallingLineNum(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[8fa]"></a>GetPerimeterSirenDevice()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z23GetPerimeterSirenDevicev))
<BR><BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
</UL>

<P><STRONG><a name="[a35]"></a>GetRxPacketRssiLqiValue(const unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, incomingbufferparser.o(i._Z23GetRxPacketRssiLqiValuePKhPhS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetRxPacketRssiLqiValue(const unsigned char*, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[b38]"></a>Get_Device_Info_InPanel(unsigned char, unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, do_it_yourself.o(i._Z23Get_Device_Info_InPanelhPhS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Device_Info_InPanel(unsigned char, unsigned char*, unsigned char*, unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceTypeSubTypeOffset(unsigned char)
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetGenTypeInfo(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[b5a]"></a>Get_GSM_SIM_CENTER_code()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gsm_comm.o(i._Z23Get_GSM_SIM_CENTER_codev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_GSM_SIM_CENTER_code() &rArr; get_STRING_ptr(unsigned short) &rArr; FL_STRING_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_STRING_ptr(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[94e]"></a>Get_MM_update_table_num()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init.o(i._Z23Get_MM_update_table_numv))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[b5b]"></a>HAL_PatformSpecificInit()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_platforminit.o(i._Z23HAL_PatformSpecificInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PatformSpecificInit() &rArr; HW_COUNTER_Init(unsigned char, unsigned short, unsigned char, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetGPOPin(unsigned char, unsigned char, unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgToGPIO(unsigned char, unsigned char, unsigned char)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_SetPins(unsigned char)
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_COUNTER_Init(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Start(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init()
</UL>

<P><STRONG><a name="[b5c]"></a>INCOME_MESSAGE_sms_send()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, process_income_message.o(i._Z23INCOME_MESSAGE_sms_sendv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = INCOME_MESSAGE_sms_send() &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_get_dialer()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_ack(unsigned char*)
</UL>

<P><STRONG><a name="[b5e]"></a>INIT_CheckIfNewSWLoaded(unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, init_func.o(i._Z23INIT_CheckIfNewSWLoadedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = INIT_CheckIfNewSWLoaded(unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[b5f]"></a>INIT_EnterRadioTestMode(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, init_func.o(i._Z23INIT_EnterRadioTestModeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = INIT_EnterRadioTestMode(unsigned char) &rArr; TEST_TestApplicationActivate() &rArr; UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationActivate()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[8f3]"></a>INIT_set_Pic_last_index(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, init.o(i._Z23INIT_set_Pic_last_indexh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = INIT_set_Pic_last_index(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeveFileName_exec()
</UL>

<P><STRONG><a name="[888]"></a>IP_ALL_walk_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ip_app.o(i._Z23IP_ALL_walk_test_device12C_DEV_TYPE_EhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IP_ALL_walk_test_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9ca]"></a>IP_COMMAND_state_wait4c()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ip_app.o(i._Z23IP_COMMAND_state_wait4cv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IP_COMMAND_state_wait4c()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[b60]"></a>InitMainPowerMSGProcess(bool, bool, bool)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main_power.o(i._Z23InitMainPowerMSGProcessbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = InitMainPowerMSGProcess(bool, bool, bool) &rArr; Set220vRestore() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_power_status(unsigned char)
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerSaveMode(unsigned)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[b61]"></a>Init_Poseso_LISTEN_exec()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, poseso_listen.o(i._Z23Init_Poseso_LISTEN_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Init_Poseso_LISTEN_exec() &rArr; phone_num_GET_ptr(unsigned char) &rArr; FL_DOMAIN_EXTANSION_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_dial_sequence_GET_ptr(int)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosesoTimeWin(POSESO_LISTEN_TYPE_E)
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOnlineModeDialerParam(SMS_OR_GPRS_DATA_U*)
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOnlineMaxRetryParam(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_precondition_exec()
</UL>

<P><STRONG><a name="[5af]"></a>InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, videoq.o(i._Z23InsertVideoRFRequestToQP21VideoCommonRegister_SP21ServiceDataRegister_Sb13U_VIDEO_FLAGSh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char) &rArr; StartVideoRFMahcine() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoRFMachineIdle()
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextVidLocationInPool()
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVideoRFMahcine()
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIVDentryId(SEQUENCER_LABEL_E)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
</UL>

<P><STRONG><a name="[a08]"></a>IsCurrentTransferActive(VIDEO_RF_TRANSFER_S*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, videoq.o(i._Z23IsCurrentTransferActiveP19VIDEO_RF_TRANSFER_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsCurrentTransferActive(VIDEO_RF_TRANSFER_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[434]"></a>IsModifyHandlingNotBusy()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apipckprocessing.o(i._Z23IsModifyHandlingNotBusyv))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_new_user(unsigned char, E_USER_SECURITY_LEVEL, unsigned char, bool, unsigned char*)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_key_fob_data()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardUser()
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramUserInterface(unsigned char*, S_POSESO_Reply*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramKeyPad(unsigned char*, S_POSESO_Reply*, unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
</UL>

<P><STRONG><a name="[493]"></a>Is_G_PROC_TRANSMIT_Idle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gsm_comm.o(i._Z23Is_G_PROC_TRANSMIT_Idlev))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
</UL>

<P><STRONG><a name="[8ad]"></a>MAINTENANCE_MACHINE_off(unsigned char)</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, maintenance.o(i._Z23MAINTENANCE_MACHINE_offh))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = MAINTENANCE_MACHINE_off(unsigned char) &rArr; DATALINK_close_session() &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSwBootSrc(unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_close_session()
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_reset()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_reset_state()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_L2_reset_F()
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetApi()
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_maitenance_mode_on(unsigned char)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_off()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_off()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_APP_off()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[66]"></a>MP_PROTOCL_MACHINE_exec()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, maintenance.o(i._Z23MP_PROTOCL_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = MP_PROTOCL_MACHINE_exec() &rArr; EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*) &rArr; MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_clear_packet_pending()
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_packet_pending()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketTimeout(TimerStruct_S*)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_APP_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> maintenance.o(i._Z23MP_PROTOCL_MACHINE_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[b25]"></a>MSME_SetTlbMsgAckStatus(MSME_MSG_ACK_STATUS_E)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, msme.o(i._Z23MSME_SetTlbMsgAckStatus21MSME_MSG_ACK_STATUS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSME_SetTlbMsgAckStatus(MSME_MSG_ACK_STATUS_E) &rArr; RF_INPUT_get_status(unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
</UL>

<P><STRONG><a name="[780]"></a>MemMapEntityWrite2EPROM(unsigned char*, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fl_entry.o(i._Z23MemMapEntityWrite2EPROMPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = MemMapEntityWrite2EPROM(unsigned char*, unsigned short) &rArr; MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
</UL>

<P><STRONG><a name="[50f]"></a>NextCprocLocationInPool()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, c_proc_q.o(i._Z23NextCprocLocationInPoolv))
<BR><BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7a5]"></a>NextGprocLocationInPool()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gsmq.o(i._Z23NextGprocLocationInPoolv))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetGsmEventToQ(unsigned char*)
</UL>

<P><STRONG><a name="[417]"></a>OSAL_CyclicBufferCreate(unsigned char, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osal_cyclic_buff.o(i._Z23OSAL_CyclicBufferCreateht))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSAL_CyclicBufferCreate(unsigned char, unsigned short) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngSwitchTransparenceMode(unsigned char, unsigned)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[41b]"></a>OSAL_CyclicBufferDelete(OSAL_CyclicBuffer*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal_cyclic_buff.o(i._Z23OSAL_CyclicBufferDeleteP17OSAL_CyclicBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSAL_CyclicBufferDelete(OSAL_CyclicBuffer*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngSwitchTransparenceMode(unsigned char, unsigned)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[975]"></a>OSAL_CyclicBufferInsert(OSAL_CyclicBuffer*, unsigned char*, unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, osal_cyclic_buff.o(i._Z23OSAL_CyclicBufferInsertP17OSAL_CyclicBufferPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSAL_CyclicBufferInsert(OSAL_CyclicBuffer*, unsigned char*, unsigned short) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
</UL>

<P><STRONG><a name="[a73]"></a>OSAL_GetLogRolloverFlag()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal_time_mng.o(i._Z23OSAL_GetLogRolloverFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[b68]"></a>OSAL_InitInterruptTable()</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, osal_interrupt.o(i._Z23OSAL_InitInterruptTablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OSAL_InitInterruptTable() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d2]"></a>OSAL_PortIsMailBoxEmpty(void*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, osal_port.o(i._Z23OSAL_PortIsMailBoxEmptyPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_PortIsMailBoxEmpty(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IsMailBoxEmpty(unsigned char)
</UL>

<P><STRONG><a name="[c5]"></a>OpenDataConnection_exec()</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, sms_message.o(i._Z23OpenDataConnection_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = OpenDataConnection_exec() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Num2MinimalDecStr(unsigned, unsigned char*, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_get_state()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQEmptyOrDeleted()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sms_message.o(i._Z23OpenDataConnection_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[b69]"></a>PIN_CODE_compare_duress(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ram_pin_code.o(i._Z23PIN_CODE_compare_duressPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIN_CODE_compare_duress(unsigned char*) &rArr; FL_PINCODE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PINCODE_read(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[997]"></a>PSTN_API_GetModemParams()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstn_stub.o(i._Z23PSTN_API_GetModemParamsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PSTN_API_GetModemParams() &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
</UL>

<P><STRONG><a name="[b6a]"></a>PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, prealarm_handler.o(i._Z23PreAlarmHandleDetectionh21RF_DETECTOR_SIGNALS_E17SECURITY_STATES_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_alarm_notification()
</UL>
<BR>[Called By]<UL><LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[8e5]"></a>RFApiVSEG_GetDeviceData(unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rfapivseg.o(i._Z23RFApiVSEG_GetDeviceDataPhP22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RFApiVSEG_GetDeviceData(unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_GetDeviceDBEntry(unsigned char*, const S_RFApiVSEG_DeviceTypeInfo*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDBEntry(unsigned char*, const S_RFApiVSEG_DeviceTypeInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeRx(unsigned char*)
</UL>

<P><STRONG><a name="[8c9]"></a>RF_Input_RSU_processing(unsigned char*)</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, incomingbufferparser.o(i._Z23RF_Input_RSU_processingPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RF_Input_RSU_processing(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBootReqApprove(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomeNewProtocol(unsigned char*)
</UL>

<P><STRONG><a name="[53]"></a>RF_REFRESH_MACHINE_exec()</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, rfrefreshmachine.o(i._Z23RF_REFRESH_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1524 + Unknown Stack Size
<LI>Call Chain = RF_REFRESH_MACHINE_exec() &rArr; IncomingBufferParser() &rArr; SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID) &rArr; IPD_Or_PIR_ConfigCheck(unsigned char*) &rArr; RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferClear(OSAL_CyclicBuffer*)
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGetDataSize(OSAL_CyclicBuffer*)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGet(OSAL_CyclicBuffer*, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingCheck()
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingRxBufferCksmCheck()
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLastTransmissionFromQueue(unsigned char)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPacketToLogger(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[644]"></a>RSU_GetDevTypeFirstChar(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rsu_task.o(i._Z23RSU_GetDevTypeFirstCharh))
<BR><BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[7f8]"></a>RSU_Task_API_FTPGetFile(char*, char*, char*, char*, char*, void*, unsigned char, unsigned char, unsigned short*)</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, rsu_api.o(i._Z23RSU_Task_API_FTPGetFilePcS_S_S_S_PvhhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RSU_Task_API_FTPGetFile(char*, char*, char*, char*, char*, void*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b74]"></a>Radio_RestoreEcopRf1Cfg()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z23Radio_RestoreEcopRf1Cfgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Radio_RestoreEcopRf1Cfg() &rArr; Radio_LoadBpskCfg(bool, unsigned char) &rArr; Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
</UL>

<P><STRONG><a name="[9df]"></a>Radio_TxFifoSendHandler()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z23Radio_TxFifoSendHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Radio_TxFifoSendHandler() &rArr; Radio_IsRxTxOverflow(unsigned char, unsigned char) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsRxTxOverflow(unsigned char, unsigned char)
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetRxTxBytes(unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleTraffic()
</UL>

<P><STRONG><a name="[b75]"></a>ReadSimNumberFromEEProm()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, message.o(i._Z23ReadSimNumberFromEEPromv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ReadSimNumberFromEEProm() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[b3c]"></a>ReadVirtualSnObj_Config(TReadVirtualSnObj*, TWriteVirtualSnObj*, PanelId_t, PanelId_t*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, virtualsnobj.o(i._Z23ReadVirtualSnObj_ConfigP17TReadVirtualSnObjP18TWriteVirtualSnObj9PanelId_tPS3_))
<BR><BR>[Called By]<UL><LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVirtualSnRequest()
</UL>

<P><STRONG><a name="[a2c]"></a>Reset_comm_fault_timers()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsm_comm.o(i._Z23Reset_comm_fault_timersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reset_comm_fault_timers()
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_supervision_test()
</UL>

<P><STRONG><a name="[9a]"></a>Rf_Jamming_handler_exec()</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, c_proc.o(i._Z23Rf_Jamming_handler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Rf_Jamming_handler_exec() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z23Rf_Jamming_handler_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[17c]"></a>RxFailureCounterAdapter(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rxfailuredetector.o(i._Z23RxFailureCounterAdapterPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RxFailureCounterAdapter(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; RxFailureCounter(unsigned char, eRX_Failure_Cmd) &rArr; SendRxPeripheralFail(unsigned char, eDetection_source) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFailureCounter(unsigned char, eRX_Failure_Cmd)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[69c]"></a>RxMngIsFoundUnsolicited(char*, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, comm_stm_rx_manager.o(i._Z23RxMngIsFoundUnsolicitedPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RxMngIsFoundUnsolicited(char*, unsigned short) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleTableRow(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[b31]"></a>SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)</STRONG> (Thumb, 830 bytes, Stack size 64 bytes, security.o(i._Z23SECURITY_disarm_actions17SECURITY_STATES_EP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUShbbP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_clear_t_bypass(unsigned char)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pre_alarm_video()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoFaultCode(VIDEO_FAULT_CODE_E)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexWasAlarm()
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexAlarm()
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInactivityMachine()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustomerCode()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterWasAlarm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPreAlarmEntry()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecAlarmPending(bool)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNineDigitPhoneNumber()
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_clear_count()
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEEramMem(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[b76]"></a>SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)</STRONG> (Thumb, 328 bytes, Stack size 72 bytes, security.o(i._Z23SECURITY_send_error_msg7ERROR_E10U_DEV_TYPE25SECURITY_PARTITION_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_was_alarm()
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIsRkpInstall()
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[3e2]"></a>SECURITY_set_bat_status(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, security.o(i._Z23SECURITY_set_bat_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SECURITY_set_bat_status(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[9e3]"></a>SECURITY_zone_partition(SECURITY_PARTITION_TYPE_E, unsigned char, E_DETECTOR_SCAN_MODE, unsigned char*, unsigned char*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, security.o(i._Z23SECURITY_zone_partition25SECURITY_PARTITION_TYPE_Eh20E_DETECTOR_SCAN_MODEPhS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SECURITY_zone_partition(SECURITY_PARTITION_TYPE_E, unsigned char, E_DETECTOR_SCAN_MODE, unsigned char*, unsigned char*) &rArr; RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
</UL>

<P><STRONG><a name="[7b]"></a>SERIAL_PDA_handler_exec()</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, el_v2_driver.o(i._Z23SERIAL_PDA_handler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SERIAL_PDA_handler_exec() &rArr; Scheduler_PlugoutActions() &rArr; MAINTENANCE_MACHINE_off(unsigned char) &rArr; DATALINK_close_session() &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationActivate()
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_rec_packet(unsigned char*, unsigned char, E_TRANSPORTS)
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[3dc]"></a>SIREN_supervisory_fault()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_siren.o(i._Z23SIREN_supervisory_faultv))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[9c7]"></a>SMS_MESSAGE_SetSTUN_ACK()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sms_message.o(i._Z23SMS_MESSAGE_SetSTUN_ACKv))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[4ca]"></a>SMT_set_DailyMsgCounter(unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, smt_api.o(i._Z23SMT_set_DailyMsgCounterhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[4ce]"></a>SSP_WaitTxFIFOIsNotFull(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssp_spi_func.o(i._Z23SSP_WaitTxFIFOIsNotFullh))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[b77]"></a>SendGetBatteryInfoRfMsg()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, devicebatterystate.o(i._Z23SendGetBatteryInfoRfMsgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = SendGetBatteryInfoRfMsg() &rArr; QueueHandler2(unsigned char, unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler2(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
</UL>

<P><STRONG><a name="[b78]"></a>SetForceArmWindowAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z23SetForceArmWindowActionP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SetForceArmWindowAction(S_CPUI_ButtonInfo*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[3b8]"></a>Set_Counter_Sensitivity(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hardware_vf.o(i._Z23Set_Counter_Sensitivityh))
<BR><BR>[Calls]<UL><LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_counter_min_windows(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[952]"></a>Set_MM_update_table_num()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, init.o(i._Z23Set_MM_update_table_numv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Set_MM_update_table_num() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[b79]"></a>Set_counter_min_windows(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._Z23Set_counter_min_windowsh))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Counter_Sensitivity(unsigned char)
</UL>

<P><STRONG><a name="[6db]"></a>StartProtectedFullCycle(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gsm_stm_message.o(i._Z23StartProtectedFullCyclej))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = StartProtectedFullCycle(unsigned) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStmMessageErrorHandler(unsigned)
</UL>

<P><STRONG><a name="[a1c]"></a>Stop_Poseso_LISTEN_exec()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, poseso_listen.o(i._Z23Stop_Poseso_LISTEN_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Stop_Poseso_LISTEN_exec() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
</UL>

<P><STRONG><a name="[b7a]"></a>TEST_FUNC_FLASH_READ_ID(char*, unsigned short)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, internalflash_test.o(i._Z23TEST_FUNC_FLASH_READ_IDPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TEST_FUNC_FLASH_READ_ID(char*, unsigned short) &rArr; Print2Uart(unsigned char*, unsigned short) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print2Uart(unsigned char*, unsigned short)
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_GetInternalIdLength(unsigned short)
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_ReadId(unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_INTERNAL_FLASH_READ_ID(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[b35]"></a>TIMER_GetRFresetCounter()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._Z23TIMER_GetRFresetCounterv))
<BR><BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageBeforeReset(unsigned char)
</UL>

<P><STRONG><a name="[132]"></a>TestManagerErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_task.o(i._Z23TestManagerErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[2e5]"></a>Timer_GetRssiIndBmValue(int, int)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, timer.o(i._Z23Timer_GetRssiIndBmValueii))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer_GetRssiIndBmValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RSSITodBm(signed char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUT_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_siren_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
</UL>

<P><STRONG><a name="[573]"></a>UART_GetCharByInterrupt(int, char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_legacy.o(i._Z23UART_GetCharByInterruptiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_GetCharByInterrupt(int, char*) &rArr; OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_GetBuffer()
</UL>

<P><STRONG><a name="[41c]"></a>UART_ResetRxFifoBuffers(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart_func.o(i._Z23UART_ResetRxFifoBuffersh))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
</UL>

<P><STRONG><a name="[302]"></a>USER_get_security_level(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ram_user.o(i._Z23USER_get_security_levelh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USER_get_security_level(unsigned char) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_IsUserArmPermittedByButton(unsigned, unsigned, unsigned char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[757]"></a>VAT_SendAckUpdateStatus(S_VAT_Info*, unsigned short, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vat_func.o(i._Z23VAT_SendAckUpdateStatusP10S_VAT_Infoth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = VAT_SendAckUpdateStatus(S_VAT_Info*, unsigned short, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
</UL>

<P><STRONG><a name="[3b9]"></a>VOICE_clear_indications(bool)</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, voice_manager.o(i._Z23VOICE_clear_indicationsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = VOICE_clear_indications(bool) &rArr; VOICE_mute_mic(unsigned char) &rArr; SysSound::setMicVol(int) &rArr; CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_fast_dial()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_voice(bool)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRingTone(bool)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRkp()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[983]"></a>VOICE_compare_dtmf_code()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, voice_manager.o(i._Z23VOICE_compare_dtmf_codev))
<BR><BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
</UL>

<P><STRONG><a name="[b3e]"></a>WriteVirtualSnObj_Close(TWriteVirtualSnObj*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, virtualsnobj.o(i._Z23WriteVirtualSnObj_CloseP18TWriteVirtualSnObj))
<BR><BR>[Called By]<UL><LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_Exec(TWriteVirtualSnObj*)
</UL>

<P><STRONG><a name="[739]"></a>msme_q_getSigFoxCounter()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msme_q.o(i._Z23msme_q_getSigFoxCounterv))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[f3]"></a>progTag8ByteUpdateReset(int, int, int*, void*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, kpdprogs.o(i._Z23progTag8ByteUpdateResetiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = progTag8ByteUpdateReset(int, int, int*, void*) &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[7b6]"></a>release_MSME_PROC_EVENT(S_MSME_MSG_EVENT*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, msme_q.o(i._Z23release_MSME_PROC_EVENTP16S_MSME_MSG_EVENT))
<BR><BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[7da]"></a>rf_sec_set_or_clr_chime(unsigned char, bool)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ram_rf_sec_zone.o(i._Z23rf_sec_set_or_clr_chimehb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = rf_sec_set_or_clr_chime(unsigned char, bool) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b7d]"></a>setDigitButtonsDisabled(bool)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kpdoutstub.o(i._Z23setDigitButtonsDisabledb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = setDigitButtonsDisabled(bool) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[403]"></a>tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tag_reader.o(i._Z23tag_reader_event_to_logh22TAG_READER_LOG_DEBUG_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndAckCheck(DEVICE_TYPE, RX_COMMAND, PRIVATE_ID)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_tag_present_timeout_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_tag_present_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_denied_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_misc_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[b7e]"></a>AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, security.o(i._Z24AddPerimeterArmDisarmMsgP15CODE_ARGUMENT_Uh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char) &rArr; IsAutoPerimeterArmEnabled() &rArr; CONTROL_PANEL_get_sysflag_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoPerimeterArmEnabled()
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[33a]"></a>AnnexDeleteEntryMessages()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, annex.o(i._Z24AnnexDeleteEntryMessagesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AnnexDeleteEntryMessages() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexSendEntryMessages()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
</UL>

<P><STRONG><a name="[33b]"></a>BUTTONS_GetButtonsStatus()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buttons_api.o(i._Z24BUTTONS_GetButtonsStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_ISR()
</UL>

<P><STRONG><a name="[a74]"></a>CLOCK_get_full_time_date(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, clock.o(i._Z24CLOCK_get_full_time_datePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_get_full_time_date(unsigned char*) &rArr; RTC_GetTimeAndDate(RTC_Time_t*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[b80]"></a>CODEC_AutoMicrophoneGain(unsigned char, unsigned char, unsigned*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, codec_api.o(i._Z24CODEC_AutoMicrophoneGainhhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CODEC_AutoMicrophoneGain(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int, unsigned*)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::setMicVol(int)
</UL>

<P><STRONG><a name="[b81]"></a>CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, cpui_buttons_func.o(i._Z24CPUI_Button_ProgsOrResetP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_KeyErrorFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateResetMachine(unsigned char)
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFuncPtr(const unsigned char*)
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_KeyErrorFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_RunProgFunc(S_CPUI_ButtonInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[1c4]"></a>CPUI_Buttons_Action_Func(unsigned char, S_CPUI_ButtonInfo*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cpui_buttons_func.o(i._Z24CPUI_Buttons_Action_FunchP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_Action_Func(unsigned char, S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Address Reference Count : 13]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[914]"></a>CPUI_Buttons_RunProgFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z24CPUI_Buttons_RunProgFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_RunProgFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeGoodBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
</UL>

<P><STRONG><a name="[1c1]"></a>CPUI_CheckFullDuplexCall(unsigned*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpui_func.o(i._Z24CPUI_CheckFullDuplexCallPj))
<BR>[Address Reference Count : 4]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[33d]"></a>CPUI_NotifyButtonPressed()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, buttons_api.o(i._Z24CPUI_NotifyButtonPressedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CPUI_NotifyButtonPressed() &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsgFromInt()
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_ISR()
</UL>

<P><STRONG><a name="[343]"></a>CPUI_ResetCallBackParams(void**, unsigned*, unsigned char*, unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cpui_func.o(i._Z24CPUI_ResetCallBackParamsPPvPjPhS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CPUI_ResetCallBackParams(void**, unsigned*, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[824]"></a>C_PROC_DEV_TYPE_send_msg(unsigned char*, unsigned char, U_DEV_TYPE)</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, c_proc.o(i._Z24C_PROC_DEV_TYPE_send_msgPhh10U_DEV_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = C_PROC_DEV_TYPE_send_msg(unsigned char*, unsigned char, U_DEV_TYPE) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_message()
</UL>

<P><STRONG><a name="[477]"></a>C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, c_proc.o(i._Z24C_PROC_INSTALL_send_msg118A2C_PROC_MESSAGE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[aa5]"></a>C_PROC_process_SIREN_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, process_c_proc_messages.o(i._Z24C_PROC_process_SIREN_msgh10U_DEV_TYPEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_SIREN_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E) &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[81c]"></a>C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, process_c_proc_messages.o(i._Z24C_proc_process_Annex_armP16U_KEY_FOB_STATUSP16U_KEY_FOB_PARAMSbi))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartExit(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[d1]"></a>CallBackFuncGsmRxManager(OSAL_CyclicBuffer*, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, comm_stm_rx_manager.o(i._Z24CallBackFuncGsmRxManagerP17OSAL_CyclicBuffert))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CallBackFuncGsmRxManager(OSAL_CyclicBuffer*, unsigned short) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsgFromInt()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gsm_module_funcs_he910.o(i._Z19HE910_AnswerHandlerhP23S_GSM_FUNC_TABLE_HANDLEPct)
<LI> gsm_stm_control.o(i._Z15Gsm_STM_ControlPv)
<LI> uart_legacy.o(i._Z15System_UartInitv)
</UL>
<P><STRONG><a name="[b5]"></a>CheckTemporaryBypass_exe()</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, process_income_message.o(i._Z24CheckTemporaryBypass_exev))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = CheckTemporaryBypass_exe() &rArr; ram_rf_sec_zone_init(unsigned char, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperMask(int, int)
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_bypass(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> process_income_message.o(i._Z24CheckTemporaryBypass_exev)
</UL>
<P><STRONG><a name="[b93]"></a>Clear_GSM_SIMcenter_Flag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_comm.o(i._Z24Clear_GSM_SIMcenter_Flagv))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[80c]"></a>ClrVideoBypassIndication()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, videohandler.o(i._Z24ClrVideoBypassIndicationv))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[663]"></a>CmsSendTtrOpenBackTamper()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ram_db.o(i._Z24CmsSendTtrOpenBackTamperv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CmsSendTtrOpenBackTamper() &rArr; GetPlasticVersion() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTENDED_CP_PARAMS_READ()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[943]"></a>ConvertGeneralDeviceType(C_DEV_TYPE_E)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cybermachine.o(i._Z24ConvertGeneralDeviceType12C_DEV_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAttackDbUpdate(C_PROC_2_A_MESSAGE_E, C_DEV_TYPE_E, unsigned char)
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAttackStateBlock(C_DEV_TYPE_E, unsigned char)
</UL>

<P><STRONG><a name="[ac]"></a>Device_Remote_Param_Exec()</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, deviceupdatemachine.o(i._Z24Device_Remote_Param_Execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Device_Remote_Param_Exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetDeviceTableOffset(unsigned char, unsigned)
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecDeviceTypeInterpreter(RF_SEC_ZONE_TYPE_E)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRamRemoteParamStatTbl(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateOffset(unsigned char)
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDeviceTypeInterpreter(RF_OUTPUT_DEV_TYPE_E)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTargetType(unsigned char, unsigned char)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> deviceupdatemachine.o(i._Z24Device_Remote_Param_Execv)
</UL>
<P><STRONG><a name="[804]"></a>DevicesConfigurationInit()</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, deviceconfigmachine.o(i._Z24DevicesConfigurationInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DevicesConfigurationInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccountNumber(unsigned char*)
</UL>

<P><STRONG><a name="[318]"></a>FL_DOMAIN_EXTANSION_read(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fl_types.o(i._Z24FL_DOMAIN_EXTANSION_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_DOMAIN_EXTANSION_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_comm_dest_JD_config(unsigned char*, void*)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[5a8]"></a>FL_Types_CheckDeviceType(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fl_types.o(i._Z24FL_Types_CheckDeviceTypehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_Types_CheckDeviceType(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompensateForNoVidReady(VIDEO_RF_TRANSFER_S*)
</UL>

<P><STRONG><a name="[bee]"></a>FileHandlerCurrentCamera()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, filehandler.o(i._Z24FileHandlerCurrentCamerav))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
</UL>

<P><STRONG><a name="[59e]"></a>FileHandler_FileComplete(unsigned char*, unsigned)</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, filehandler.o(i._Z24FileHandler_FileCompletePhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FileHandler_FileComplete(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[595]"></a>FileHandler_InitAutoSend(VIDEO_RF_TRANSFER_S*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, filehandler.o(i._Z24FileHandler_InitAutoSendP19VIDEO_RF_TRANSFER_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FileHandler_InitAutoSend(VIDEO_RF_TRANSFER_S*) &rArr; InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhotoPriority(SEQUENCER_LABEL_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[b86]"></a>Flash_ReadStatusRegister(unsigned char, unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, flash_func.o(i._Z24Flash_ReadStatusRegisterhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTaskBusyPollAfterCapture(unsigned, unsigned, unsigned char)
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4f9]"></a>GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gsm_api.o(i._Z24GSM_Control_API_CloseCSDhtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[6e0]"></a>GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, gsm_api.o(i._Z24GSM_Message_API_OpenGPRShPcttS_tS_hS_tjtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[6da]"></a>GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, gsm_api.o(i._Z24GSM_Message_API_SendGPRShPcttjtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_String2Ascii(char*, char*, unsigned short)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[918]"></a>GetCurrentFileScenarioID()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filesystemmanagment.o(i._Z24GetCurrentFileScenarioIDv))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
</UL>

<P><STRONG><a name="[b20]"></a>GetNextPriorityEventToDo(sPriorityQ*, unsigned char*, bool*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, priorityq.o(i._Z24GetNextPriorityEventToDoP10sPriorityQPhPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetNextPriorityEventToDo(sPriorityQ*, unsigned char*, bool*)
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPriorityQEmpty(sPriorityQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateTimeBasedEvants(tFUNCTIONS_ID)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateScheduler_exec()
</UL>

<P><STRONG><a name="[12a]"></a>GsmRxManagerErrorHandler(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comm_stm_rx_manager.o(i._Z24GsmRxManagerErrorHandlerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GsmRxManagerErrorHandler(unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>GsmStmListenErrorHandler(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gsm_stm_listen.o(i._Z24GsmStmListenErrorHandlerj))
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[4f2]"></a>Gsm_Control_Write_Status(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gsm_stm_control.o(i._Z24Gsm_Control_Write_Statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Gsm_Control_Write_Status(unsigned char) &rArr; GSM_Control_API_GetGsmStatus(S_GSM_STATUS*) &rArr; GSM_Control_StartStopRegDebounceTimer(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[44]"></a>Gsm_HE910_Module_PowerUp(unsigned)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, gsm_module_funcs_he910.o(i._Z24Gsm_HE910_Module_PowerUpj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Gsm_HE910_Module_PowerUp(unsigned) &rArr; GSM_HE910_Power_Enable(bool) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt(unsigned char)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableUart1Tx()
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableUart1Tx()
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetONOFFsignalHE910(int)
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetIGNsignalHE910(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>HE910_HwPowerSaveControl(unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gsm_module_funcs_he910.o(i._Z24HE910_HwPowerSaveControlh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HE910_HwPowerSaveControl(unsigned char) &rArr; HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgToGPIO(unsigned char, unsigned char, unsigned char)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTR_OnOff(int)
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910SetRTSLine(unsigned char)
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsMuxOn()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[496]"></a>I2C_IsAllPendingReqEmpty()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_func.o(i._Z24I2C_IsAllPendingReqEmptyv))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMap_HardReset_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[b88]"></a>INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, process_income_message.o(i._Z24INCOME_MESSAGE_build_smsPhhhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*) &rArr; num2decstr2(unsigned long, unsigned char*) &rArr; num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_partition_to_num(SECURITY_PARTITION_TYPE_E)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr2(unsigned long, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_ack(unsigned char*)
</UL>

<P><STRONG><a name="[b89]"></a>INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char)</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, process_income_message.o(i._Z24INCOME_MESSAGE_parse_UISPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char) &rArr; get_USER_ptr(unsigned char) &rArr; FL_USER_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit(unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2int(unsigned char, unsigned char)
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_compare_password(unsigned char*, S_USER*)
<LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_error(unsigned char)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ligal_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[853]"></a>INIT_set_target_is_image(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, init.o(i._Z24INIT_set_target_is_imageh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = INIT_set_target_is_image(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBootHandler(bool)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[9c9]"></a>IP_COMMAND_state_receive()</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ip_app.o(i._Z24IP_COMMAND_state_receivev))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = IP_COMMAND_state_receive() &rArr; IP_APP_decode_command(unsigned char*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_clear_packet_pending()
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_packet_pending()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_decode_command(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[69b]"></a>IncreaseNumOfIndications(char*, char*, unsigned, unsigned char, unsigned char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, comm_stm_rx_manager.o(i._Z24IncreaseNumOfIndicationsPcS_jhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IncreaseNumOfIndications(char*, char*, unsigned, unsigned char, unsigned char*) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[93d]"></a>InitIcoSignalMSGProgress()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(i._Z24InitIcoSignalMSGProgressv))
<BR><BR>[Called By]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPanelCommState(PANEL_COMM_STATE_E)
</UL>

<P><STRONG><a name="[94d]"></a>Init_IsMemMapBackupValid()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(i._Z24Init_IsMemMapBackupValidv))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[a3f]"></a>InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, smartscheduler.o(i._Z24InsertScheduler_EventToQPFvvEh7tQ_TYPEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char)
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextReadyLocationInSchedPool(SchedulerItem*, tQ_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHighPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLowPrioTasksScenario(tSCENARIO_ID)
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadTimeBaseScenario(tSCENARIO_ID)
</UL>

<P><STRONG><a name="[8f9]"></a>IsDelayedPerimeterTamper()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z24IsDelayedPerimeterTamperv))
<BR><BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
</UL>

<P><STRONG><a name="[bc4]"></a>IsGsmListenBusyWithTable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm_stm_listen.o(i._Z24IsGsmListenBusyWithTablev))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmListenReadyForCommand()
</UL>

<P><STRONG><a name="[9cf]"></a>IsPanelSerialNumberValid(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cybermachine.o(i._Z24IsPanelSerialNumberValidPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsPanelSerialNumberValid(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVirusMsgThisPanel(unsigned char*)
</UL>

<P><STRONG><a name="[35b]"></a>LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, led_api.o(i._Z24LED_UpdateLedStatusArrayPhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CheckDisableEnableLed(unsigned char)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateInArrayTurnOnLed(unsigned char, unsigned char)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisableEnableLed(unsigned char, unsigned char)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TurnOnLed(unsigned char, unsigned char)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_TurnOnLed(unsigned char, unsigned char)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateInArrayTurnOnLed(unsigned char, unsigned char)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_InitialBlinkLedAction(unsigned*, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBlinkAction(unsigned, unsigned char*, unsigned char)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformLoopAction(unsigned*, unsigned char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[89]"></a>LISTEN_precondition_exec()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, poseso_listen.o(i._Z24LISTEN_precondition_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = LISTEN_precondition_exec() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoCommMachineIdle()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msme_q()
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_get_busy()
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LISTEN_exec()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> poseso_listen.o(i._Z24LISTEN_precondition_execv)
</UL>
<P><STRONG><a name="[7b1]"></a>LoadLowPrioTasksScenario(tSCENARIO_ID)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, smartscheduler.o(i._Z24LoadLowPrioTasksScenario12tSCENARIO_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LoadLowPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointerToFunction(tFUNCTIONS_ID)
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long)
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFromScheduler(void(*)(), tQ_TYPE)
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskPriority(sSmartSchedulerQ*, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewScenarios(tQ_TYPE)
</UL>

<P><STRONG><a name="[8f4]"></a>LookForTheOldstFile_exec()</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, filesystemmanagment.o(i._Z24LookForTheOldstFile_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = LookForTheOldstFile_exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeftDateSmaller(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerIndexNotAlreadyInList(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeveFileName_exec()
</UL>

<P><STRONG><a name="[b8e]"></a>MAINTENANCE_MACHINE_exec()</STRONG> (Thumb, 1712 bytes, Stack size 72 bytes, maintenance.o(i._Z24MAINTENANCE_MACHINE_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MAINTENANCE_MACHINE_exec() &rArr; is_gsm_data_call_on() &rArr; Refresh_GSM_Stat() &rArr; GSM_decode_status(S_GSM_STATUS*) &rArr; GSM_JammingRestoreActions() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAllPendingReqEmpty()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmConfig(char*, unsigned char, char*, unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelRevNum()
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketTimeout(TimerStruct_S*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRemoteConnection()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_GSM_SIMcenter_Flag()
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_SIM_CENTER_code()
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_gsm_init_state_idle()
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_gsm_data_call_on()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_init_params()
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_RingType()
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_PIN_code()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rkp_init(unsigned char, unsigned char)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_send_ITR_IVT(unsigned char)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommStateIdle()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_C_PROC_Q_empty()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendCommunicationProtocolInf_ICI()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_get_received_ldevices_ack()
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_get_tx_driver()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Wait_for_boot_condition_Ready()
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_close_connection()
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetCSDExpirationTimer(int)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_init(unsigned char, unsigned char)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_siren_init(unsigned char, unsigned char)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerMaintCounters()
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_APP_start(unsigned char*, unsigned char*, TimerStruct_S)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_start(unsigned char*, unsigned char*, TimerStruct_S, U_MAINTENANCE_FLAGS*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfControlFromPanelEntry(unsigned char*)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Counter_Sensitivity(unsigned char)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAlwaysAttachMode()
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJammSensitivity()
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJammDetectDur()
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSyncClockGSM()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_rf_subsystem_updated(unsigned char)
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVirtualSnRequest()
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_memory_map_ok()
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_send_ITR_IVT()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>

<P><STRONG><a name="[afa]"></a>MAINTENANCE_MACHINE_init()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, maintenance.o(i._Z24MAINTENANCE_MACHINE_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a40]"></a>MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)</STRONG> (Thumb, 722 bytes, Stack size 56 bytes, maintenance.o(i._Z24MAINTENANCE_update_entryh10U_DEV_TYPEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceTypeIndex(C_DEV_TYPE_E)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOldMGLS(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOldRfInputMGLS(RF_INPUT_ENTRY_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
</UL>

<P><STRONG><a name="[987]"></a>MSME_Create_POSESO_Reply(unsigned char*, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, msme.o(i._Z24MSME_Create_POSESO_ReplyPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSME_Create_POSESO_Reply(unsigned char*, unsigned short) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[b96]"></a>MSME_SetRkpTlbMsgWaitAck(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msme.o(i._Z24MSME_SetRkpTlbMsgWaitAckh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSME_SetRkpTlbMsgWaitAck(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
</UL>

<P><STRONG><a name="[6f2]"></a>NextRfprocLocationInPool()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfq.o(i._Z24NextRfprocLocationInPoolv))
<BR><BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetRfEventToQ(unsigned char*, bool)
</UL>

<P><STRONG><a name="[40d]"></a>OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, osal_cyclic_buff.o(i._Z24OSAL_CyclicBufferExtractP17OSAL_CyclicBufferPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetCharByInterrupt(int, char*)
</UL>

<P><STRONG><a name="[688]"></a>OSAL_GetTaskIsActiveFlag(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osal_msg.o(i._Z24OSAL_GetTaskIsActiveFlagh))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUpdates()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[a26]"></a>OSAL_HeapAllocMsgFromInt()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, osal_heap.o(i._Z24OSAL_HeapAllocMsgFromIntv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSAL_HeapAllocMsgFromInt() &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMASendMessageToTask(unsigned char, unsigned short, unsigned char)
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageToI2CTask(unsigned short, unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyButtonPressed()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallBackFuncGsmRxManager(OSAL_CyclicBuffer*, unsigned short)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBackTestApplication(OSAL_CyclicBuffer*, unsigned short)
</UL>

<P><STRONG><a name="[40a]"></a>OSAL_PortClearInterrupts(unsigned, unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osal_port.o(i._Z24OSAL_PortClearInterruptsjj))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_2_ISR()
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_1_ISR()
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_0_ISR()
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartClearInt(unsigned char)
</UL>

<P><STRONG><a name="[278]"></a>OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, osal_priority_queue.o(i._Z24OSAL_PriorityQueueCreatehthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[43f]"></a>OSAL_PriorityQueueDelete(OSAL_PriorityQueue*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal_priority_queue.o(i._Z24OSAL_PriorityQueueDeleteP18OSAL_PriorityQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSAL_PriorityQueueDelete(OSAL_PriorityQueue*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[27d]"></a>OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, osal_priority_queue.o(i._Z24OSAL_PriorityQueueInsertP18OSAL_PriorityQueuejPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreasePriority(unsigned short, unsigned short, unsigned, OSAL_PriorityQueueElement*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[45e]"></a>OutDeviceTypeInterpreter(RF_OUTPUT_DEV_TYPE_E)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z24OutDeviceTypeInterpreter20RF_OUTPUT_DEV_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDataBase()
</UL>

<P><STRONG><a name="[88]"></a>POSESO_LISTEN_TIMER_exec()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, poseso_listen.o(i._Z24POSESO_LISTEN_TIMER_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = POSESO_LISTEN_TIMER_exec() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Address Reference Count : 4]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> poseso_listen.o(i._Z18POSESO_LISTEN_execv)
<LI> poseso_listen.o(i._Z24POSESO_LISTEN_TIMER_execv)
</UL>
<P><STRONG><a name="[a5]"></a>PosesoRfPoseseChain_exec()</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, process_income_message.o(i._Z24PosesoRfPoseseChain_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PosesoRfPoseseChain_exec() &rArr; c_proc_process_SKC_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOpenRxCmd(unsigned char, unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_SKC_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sec_device_valid(unsigned char)
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSendEnableModeIfBackToCCSFromDisableMode(s_PosesoPoseseMachineStr*, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> process_income_message.o(i._Z24PosesoRfPoseseChain_execv)
</UL>
<P><STRONG><a name="[9d9]"></a>RB_COMMAND_wait_for_comm(unsigned char*)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rb_app.o(i._Z24RB_COMMAND_wait_for_commPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RB_COMMAND_wait_for_comm(unsigned char*) &rArr; RB_program_done(unsigned char*) &rArr; C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_target(U_UINT32*, unsigned char, unsigned char)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_done(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[b19]"></a>RFApiVSEG_GetGenTypeInfo(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfapivseg.o(i._Z24RFApiVSEG_GetGenTypeInfoh))
<BR><BR>[Called By]<UL><LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Info_InPanel(unsigned char, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteGroupTypeDevices(unsigned char)
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[c31]"></a>RF_INPUT_DEV_clear_count(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ram_rf_input_dev.o(i._Z24RF_INPUT_DEV_clear_counth))
<BR><BR>[Called By]<UL><LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
</UL>

<P><STRONG><a name="[645]"></a>RSU_GetDevTypeSecondChar(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rsu_task.o(i._Z24RSU_GetDevTypeSecondCharh))
<BR><BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_SendPosese(unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[721]"></a>RSU_GetDeviceTableOffset(unsigned char, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rsu_task.o(i._Z24RSU_GetDeviceTableOffsethj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RSU_GetDeviceTableOffset(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_GetTargetCpuEsi(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[d5]"></a>Radio_LoadNextBpskSymbol()</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z24Radio_LoadNextBpskSymbolv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Radio_LoadNextBpskSymbol() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Start(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc11xxdrv.o(i._Z16Radio_EnableBpskh)
</UL>
<P><STRONG><a name="[b9a]"></a>Radio_NewProtocolCalcCrc(unsigned char*, bool, bool, bool)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z24Radio_NewProtocolCalcCrcPhbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Radio_NewProtocolCalcCrc(unsigned char*, bool, bool, bool) &rArr; RFApiVSEGCheckCRC(unsigned char*) &rArr; RfApi_CRC16(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEGCheckCRC(unsigned char*)
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Old_RfApi_CRC16(void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EarlyPacketFiltering(unsigned char*)
</UL>

<P><STRONG><a name="[8de]"></a>Radio_SetPacketLengthCfg(unsigned char, E_CC11XX_Packet_Length_Cfg)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z24Radio_SetPacketLengthCfgh26E_CC11XX_Packet_Length_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_SetPacketLengthCfg(unsigned char, E_CC11XX_Packet_Length_Cfg) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetLengthFilter(unsigned)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
</UL>

<P><STRONG><a name="[2e9]"></a>RamRfSec_GetFogWiredMode(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ram_rf_sec_zone.o(i._Z24RamRfSec_GetFogWiredModeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RamRfSec_GetFogWiredMode(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_WiredModelConfig(unsigned char*, void*)
</UL>

<P><STRONG><a name="[80e]"></a>RamRfSec_SetFogWiredMode(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ram_rf_sec_zone.o(i._Z24RamRfSec_SetFogWiredModehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = RamRfSec_SetFogWiredMode(unsigned char, unsigned char, unsigned char) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[618]"></a>RemoveIpUnnecessaryZeros(unsigned char, unsigned char**, unsigned char*, unsigned short*)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, comm_common_funcs.o(i._Z24RemoveIpUnnecessaryZeroshPPhS_Pt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RemoveIpUnnecessaryZeros(unsigned char, unsigned char**, unsigned char*, unsigned short*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[970]"></a>RfApiVSEGDecodeSecEngMsg(unsigned char*, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rfapivseg.o(i._Z24RfApiVSEGDecodeSecEngMsgPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = RfApiVSEGDecodeSecEngMsg(unsigned char*, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_RfApiVSEG_FindCommandInRfTable(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[977]"></a>RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char)</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, comm_stm_rx_manager.o(i._Z24RxMngReduceLeadingZeroeshPPhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGetbufferLen(unsigned char*, unsigned char)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngHexSearch(unsigned char*, unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
</UL>

<P><STRONG><a name="[b3a]"></a>RxPacketProcessingStates(unsigned char*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, apipckprocessing.o(i._Z24RxPacketProcessingStatesPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RxPacketProcessingStates(unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsItLastPacket(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_API_processing(unsigned char*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[7cb]"></a>SECURITY_get_PANIC_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security.o(i._Z24SECURITY_get_PANIC_statev))
<BR><BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[adb]"></a>SECURITY_send_status_msg()</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, security.o(i._Z24SECURITY_send_status_msgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SECURITY_send_status_msg() &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumOpdds()
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_duration()
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIsRkpInstall()
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PollIPDEWindowStates(unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidSirenEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
</UL>

<P><STRONG><a name="[679]"></a>SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, security.o(i._Z24SECURITY_set_PANIC_event10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInitDone()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_close_session(RPC_RESULT_E)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_to_close_session()
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[9c6]"></a>SMS_MESSAGE_SetSTUN_NACK()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sms_message.o(i._Z24SMS_MESSAGE_SetSTUN_NACKv))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[741]"></a>SSP_WaitRxFIFOIsNotEmpty(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssp_spi_func.o(i._Z24SSP_WaitRxFIFOIsNotEmptyh))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData(unsigned char, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[8ea]"></a>SUPERVISORY_check_sirens()</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, supervisory.o(i._Z24SUPERVISORY_check_sirensv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_check_sirens() &rArr; SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SIREN_DEV_ers(unsigned char)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRstAfterNumOfSVLost(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
</UL>

<P><STRONG><a name="[b22]"></a>SaveFrequencyOffsetArray()</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, checkdevicetype.o(i._Z24SaveFrequencyOffsetArrayv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = SaveFrequencyOffsetArray() &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[ac9]"></a>Scheduler_PlugoutActions()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, scheduler.o(i._Z24Scheduler_PlugoutActionsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Scheduler_PlugoutActions() &rArr; MAINTENANCE_MACHINE_off(unsigned char) &rArr; DATALINK_close_session() &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_get_state()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_memory_map_ok()
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemovePdaRxBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_handler_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[45d]"></a>SecDeviceTypeInterpreter(RF_SEC_ZONE_TYPE_E)</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z24SecDeviceTypeInterpreter18RF_SEC_ZONE_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBateryInfDevType(unsigned char, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDataBase()
</UL>

<P><STRONG><a name="[95d]"></a>SetCheckPosesoOnLineFlag(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._Z24SetCheckPosesoOnLineFlagb))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
</UL>

<P><STRONG><a name="[3ca]"></a>SetCheckServerOnLineFlag(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._Z24SetCheckServerOnLineFlagb))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_LISTEN_mode()
</UL>

<P><STRONG><a name="[911]"></a>SetDialSequenceOfCommMsg(S_MSME_MSG_EVENT*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, msme.o(i._Z24SetDialSequenceOfCommMsgP16S_MSME_MSG_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetDialSequenceOfCommMsg(S_MSME_MSG_EVENT*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dial_sequence(S_MSME_MSG_EVENT*)
</UL>

<P><STRONG><a name="[771]"></a>StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, prealarm_handler.o(i._Z24StartDelayedVideoHandler23DELAYED_DEVICE_OPTION_Eh20E_DELAYED_VIDEO_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexEntry()
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_video_sequences_timeout()
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAllVideosReady(bool)
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_already_in_q(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE)
</UL>

<P><STRONG><a name="[80d]"></a>StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, process_income_message.o(i._Z24StartPosesoRfPoseseChainPhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_Fog_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecisionAboutPosesoPoseseFogChain(COMM_STATUS_INPANEL_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b9c]"></a>TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, internalflash_test.o(i._Z24TEST_FUNC_FLASH_WRITE_IDPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short) &rArr; InternalFlash_WriteId(unsigned short, unsigned char*) &rArr; InternalFlash_Write(unsigned short, unsigned char*, unsigned short) &rArr; WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_WriteId(unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_INTERNAL_FLASH_WRITE_ID(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[1b1]"></a>TEST_INTERNAL_FLASH_INIT(char*, unsigned short, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test_func.o(i._Z24TEST_INTERNAL_FLASH_INITPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TEST_INTERNAL_FLASH_INIT(char*, unsigned short, unsigned char) &rArr; TEST_FUNC_FLASH_INIT() &rArr; InternalFlash_Init() &rArr; SearchActiveSectorAndPage(Sector_Page_s*) &rArr; blank_check_sectors(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_INIT()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>Test_SaveFactorySettings(char*, unsigned short, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_func.o(i._Z24Test_SaveFactorySettingsPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Test_SaveFactorySettings(char*, unsigned short, unsigned char) &rArr; INIT_set_is_backup_valid_bit(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_is_backup_valid_bit(unsigned char)
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupRamMemMap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[bf7]"></a>VAT_ExtractNextVoiceFile(S_VAT_Info*, S_VatTaskGlobalData*, unsigned*, unsigned*)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, vat_func.o(i._Z24VAT_ExtractNextVoiceFileP10S_VAT_InfoP19S_VatTaskGlobalDataPjS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VAT_ExtractNextVoiceFile(S_VAT_Info*, S_VatTaskGlobalData*, unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[89c]"></a>c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, c_proc.o(i._Z24c_proc_process_JD_Statush12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJDNag(unsigned)
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RefreshJDSupervision()
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingBypassToChannel(int)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartJammingHandler(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[951]"></a>getApiCopyAllCUI2UIState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apipckprocessing.o(i._Z24getApiCopyAllCUI2UIStatev))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[923]"></a>get_auto_learn_learn_bit()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, do_it_yourself.o(i._Z24get_auto_learn_learn_bitv))
<BR><BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
</UL>

<P><STRONG><a name="[7c9]"></a>msme_q_SetSigFoxIDEAlarm(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msme_q.o(i._Z24msme_q_SetSigFoxIDEAlarmh))
<BR><BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a5b]"></a>msme_q_set_SigFoxCounter(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msme_q.o(i._Z24msme_q_set_SigFoxCounterh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[801]"></a>msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msme_q.o(i._Z24msmg_q_SendSigFoxMessagePhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_q_BuildandSendSigFoxMsg(S_MSME_MSG_EVENT*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[7d5]"></a>rf_sec_set_or_clr_bypass(unsigned char, bool)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ram_rf_sec_zone.o(i._Z24rf_sec_set_or_clr_bypasshb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = rf_sec_set_or_clr_bypass(unsigned char, bool) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[669]"></a>save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 618 bytes, Stack size 72 bytes, do_it_yourself.o(i._Z24save_security_entry_dataP18RF_SEC_ZONE_TYPE_EPhS1_S1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*) &rArr; CreateRFOutputEntry(int, unsigned char*, unsigned char, bool) &rArr; init_ram_db(unsigned char, unsigned char) &rArr; FL_RKP_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ers(unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRFOutputEntry(int, unsigned char*, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
</UL>

<P><STRONG><a name="[8ef]"></a>Add_last_entry_open_alarm(unsigned char, int)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, security.o(i._Z25Add_last_entry_open_alarmhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Add_last_entry_open_alarm(unsigned char, int) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForEmptyCellInMem()
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAlreadyInMem(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
</UL>

<P><STRONG><a name="[a75]"></a>AttackDbPeriodicalCheckGo(bool)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cyberattackstates.o(i._Z25AttackDbPeriodicalCheckGob))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AttackDbPeriodicalCheckGo(bool) &rArr; TryDeleteAttackDb() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementPeriodicalCheck(bool)
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryDeleteAttackDb()
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[37b]"></a>BUTTONS_EnableButtonPress()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, buttons_api.o(i._Z25BUTTONS_EnableButtonPressv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BUTTONS_EnableButtonPress() &rArr; BUTTONS_UpdateButtonInterrupt(unsigned char) &rArr; HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_UpdateButtonInterrupt(unsigned char)
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_UpdateButtonEntries(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[4dc]"></a>CODEC_DisconnectPCMOutput(int, unsigned char, unsigned*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, codec_api.o(i._Z25CODEC_DisconnectPCMOutputihPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CODEC_DisconnectPCMOutput(int, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRingTone()
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRingTone(bool)
</UL>

<P><STRONG><a name="[b9f]"></a>CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, codec_api.o(i._Z25CODEC_FixedMicrophoneGainhhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int, unsigned*)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::setMicVol(int)
</UL>

<P><STRONG><a name="[7dd]"></a>CONTROL_PANEL_save_params()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ram_control_panel.o(i._Z25CONTROL_PANEL_save_paramsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CONTROL_PANEL_save_params() &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_data_size(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_chime_inactivity_cnt(bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[36b]"></a>CPUI_ButtonsNightModeFunc()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z25CPUI_ButtonsNightModeFuncv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_ButtonsNightModeFunc() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[2da]"></a>CPUI_Buttons_GoodBeepFunc()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z25CPUI_Buttons_GoodBeepFuncv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_GoodBeepFunc() &rArr; CPUI_NotifyStateChangeGoodBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnNPT(int, int, int*, void*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelAllPerif(int, int, int*, void*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTamperMask(int, int, int*, void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progSwitchMode(int, int, int*, void*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progHardReset(int, int, int*, void*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progLearnTag(int, int, int*, void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGsmLed(int, int, int*, void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnPerif(int, int, int*, void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnInput(int, int, int*, void*)
</UL>

<P><STRONG><a name="[b83]"></a>CPUI_Buttons_KeyErrorFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z25CPUI_Buttons_KeyErrorFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_KeyErrorFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[36f]"></a>CPUI_Buttons_SetResetProg(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cpui_buttons_func.o(i._Z25CPUI_Buttons_SetResetProgP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_SetResetProg(S_CPUI_ButtonInfo*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[1c3]"></a>CPUI_CheckEchoNumberState(unsigned*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpui_func.o(i._Z25CPUI_CheckEchoNumberStatePj))
<BR>[Address Reference Count : 4]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>CPUI_GetFullDuplexCallLed(unsigned*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cpui_func.o(i._Z25CPUI_GetFullDuplexCallLedPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CPUI_GetFullDuplexCallLed(unsigned*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[357]"></a>CPUI_GetLedColorFromTable(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpui_func.o(i._Z25CPUI_GetLedColorFromTableh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[350]"></a>CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, cpui_func.o(i._Z25CPUI_PerformTimeOutActionPhPjjS0_S_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char) &rArr; CPUI_TurnOnLed(unsigned char, unsigned char) &rArr; LED_TurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GetLedState(unsigned char*, unsigned char)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_TurnOnLed(unsigned char, unsigned char)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_IsLedSetForAllBlinkTypes(unsigned char*, unsigned*, unsigned char)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateInArrayTurnOnLed(unsigned char, unsigned char)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UnsetLedBlink(unsigned char, unsigned*, unsigned char)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLedTracker(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[44d]"></a>C_PROC_SendDeviceVersions(unsigned short, unsigned short, S_POSESO_Reply*)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, c_proc.o(i._Z25C_PROC_SendDeviceVersionsttP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = C_PROC_SendDeviceVersions(unsigned short, unsigned short, S_POSESO_Reply*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[470]"></a>C_PROC_process_RKP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, c_proc.o(i._Z25C_PROC_process_RKP_statusP25Inf4SendTechinfInfoTask_tP11ItrStatus_tPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_PROC_process_RKP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool) &rArr; Timer_GetRssiIndBmValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[a1]"></a>Calc_FlashFile_CRC32_exec()</STRONG> (Thumb, 894 bytes, Stack size 56 bytes, processflash.o(i._Z25Calc_FlashFile_CRC32_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Calc_FlashFile_CRC32_exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Reset()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFD_ResetCRCCalculator()
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFD_GetCRCCalcResult()
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFD_SendCRCData(unsigned char*, unsigned long, unsigned char)
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_ProcessFlash_c_78c4b159___Z28OSAL_PortDisableCpuInterruptv
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_ProcessFlash_c_78c4b159___Z27OSAL_PortEnableCpuInterruptv
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> processflash.o(i._Z25Calc_FlashFile_CRC32_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[933]"></a>DIAL_PHONE_NUM_exec_start(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dial_phone_num.o(i._Z25DIAL_PHONE_NUM_exec_startP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DIAL_PHONE_NUM_exec_start(S_MESSAGE_COMM_INFO*) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
</UL>

<P><STRONG><a name="[727]"></a>FLASH_MultipleSectorErase(unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned*, unsigned short*)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, flash_api.o(i._Z25FLASH_MultipleSectorErasehhtjjhPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FLASH_MultipleSectorErase(unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[b0b]"></a>FL_RF_SEC_ZONE_read_label(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fl_types.o(i._Z25FL_RF_SEC_ZONE_read_labelh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_RF_SEC_ZONE_read_label(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
</UL>

<P><STRONG><a name="[5d7]"></a>FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ram_db.o(i._Z25FOR_ALL_DEVS_set_t_bypasshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char) &rArr; FOR_ALL_RF_SEC_ZONES_set_t_bypass2(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_RF_SEC_ZONES_set_t_bypass2(unsigned char, unsigned char)
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_RF_SEC_ZONES_set_t_bypass(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartExit(bool)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[8a8]"></a>Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flash_func.o(i._Z25Flash_CheckStatusRegisterhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Flash_CheckStatusRegister(unsigned char, unsigned char, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadStatusRegister(unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteDisable(unsigned char)
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable(unsigned char)
</UL>

<P><STRONG><a name="[4f8]"></a>GSM_Control_API_AnswerCSD(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gsm_api.o(i._Z25GSM_Control_API_AnswerCSDhtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_AnswerCSD(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[8af]"></a>GSM_Control_API_IsFailure()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_api.o(i._Z25GSM_Control_API_IsFailurev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Control_API_IsFailure()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
</UL>

<P><STRONG><a name="[8b1]"></a>GSM_JammingRestoreActions()</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, gsm_comm.o(i._Z25GSM_JammingRestoreActionsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = GSM_JammingRestoreActions() &rArr; msme_q_SendCommFault(unsigned char, unsigned char, unsigned char) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingBypassToChannel(int)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_q_SendCommFault(unsigned char, unsigned char, unsigned char)
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_IsPanelRFJammed()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
</UL>

<P><STRONG><a name="[6dd]"></a>GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gsm_api.o(i._Z25GSM_Message_API_CloseGPRShtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[725]"></a>GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, gsm_api.o(i._Z25GSM_Streaming_API_OpenFTPhPctS_hS_tS_ttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[723]"></a>GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gsm_api.o(i._Z25GSM_Streaming_API_ReadFTPhPcttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[3cb]"></a>GetCurrSmsMessageCommInfo()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sms_message.o(i._Z25GetCurrSmsMessageCommInfov))
<BR><BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
</UL>

<P><STRONG><a name="[6eb]"></a>GetInactivityButtonStatus()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, inactivity.o(i._Z25GetInactivityButtonStatusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetInactivityButtonStatus() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChimeMasked()
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChimeOrInactivityCntBit()
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKPDInactivityStatus(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInactivityMachine()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[4c9]"></a>GetMaxDailySigFoxMessages()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z25GetMaxDailySigFoxMessagesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetMaxDailySigFoxMessages() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[128]"></a>GsmStmMessageErrorHandler(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gsm_stm_message.o(i._Z25GsmStmMessageErrorHandlerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GsmStmMessageErrorHandler(unsigned) &rArr; GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; GSM_StrmResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortForceMutexRelease(unsigned*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartProtectedFullCycle(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[53f]"></a>HAL_EnablePeripheralPower(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_api.o(i._Z25HAL_EnablePeripheralPowerh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EnablePeripheralPower(unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init()
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Device_Init()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init(unsigned char)
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_COUNTER_Init(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init(unsigned char)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Init(unsigned char, unsigned short, void(*)())
</UL>

<P><STRONG><a name="[902]"></a>I2C_GetNumOfDevicePending(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_func.o(i._Z25I2C_GetNumOfDevicePendingh))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
</UL>

<P><STRONG><a name="[ba6]"></a>IPDE_new_start_cover_test()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, videoengine.o(i._Z25IPDE_new_start_cover_testv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IPDE_new_start_cover_test() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseSliderPollTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PollIPDEWindowStates(unsigned char)
</UL>

<P><STRONG><a name="[b73]"></a>IncomingRxBufferCksmCheck()</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, incomingrxbuffercksmcheck.o(i._Z25IncomingRxBufferCksmCheckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IncomingRxBufferCksmCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
</UL>

<P><STRONG><a name="[b62]"></a>InitOnlineModeDialerParam(SMS_OR_GPRS_DATA_U*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, link.o(i._Z25InitOnlineModeDialerParamP18SMS_OR_GPRS_DATA_U))
<BR><BR>[Called By]<UL><LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
</UL>

<P><STRONG><a name="[7ce]"></a>InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, videoq.o(i._Z25InsertVideoCommRequestToQP19VIDEO_RF_TRANSFER_SPhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextVidCommLocationInPool()
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseVideoCommEvent(VIDEO_COMM_SESSION_S*)
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVideoCommMachine()
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_InitAutoSend(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b7f]"></a>IsAutoPerimeterArmEnabled()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, prealarm_handler.o(i._Z25IsAutoPerimeterArmEnabledv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsAutoPerimeterArmEnabled() &rArr; CONTROL_PANEL_get_sysflag_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_ovds()
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[be9]"></a>IsGsmControlBusyWithTable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z25IsGsmControlBusyWithTablev))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmControlReadyForCommand()
</UL>

<P><STRONG><a name="[bea]"></a>IsGsmMessageBusyWithTable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm_stm_message.o(i._Z25IsGsmMessageBusyWithTablev))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageReadyForCommand()
</UL>

<P><STRONG><a name="[812]"></a>IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cybermachine.o(i._Z25IsSpecificCyberModeEnable19E_CYBER_ENABLE_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAttackDbUpdate(C_PROC_2_A_MESSAGE_E, C_DEV_TYPE_E, unsigned char)
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAttackStateBlock(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedCyberProcess(unsigned char*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[3c6]"></a>Is_GSM_Ring_on_Background()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_a2g.o(i._Z25Is_GSM_Ring_on_Backgroundv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Is_GSM_Ring_on_Background()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceIDLE()
</UL>

<P><STRONG><a name="[b8c]"></a>LED_CheckDisableEnableLed(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led_api.o(i._Z25LED_CheckDisableEnableLedh))
<BR><BR>[Called By]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateBlinkLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9f1]"></a>ListenModeBypassToChannel(int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gsm_comm.o(i._Z25ListenModeBypassToChanneli))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ListenModeBypassToChannel(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
</UL>

<P><STRONG><a name="[7b0]"></a>LoadHighPrioTasksScenario(tSCENARIO_ID)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, smartscheduler.o(i._Z25LoadHighPrioTasksScenario12tSCENARIO_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LoadHighPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointerToFunction(tFUNCTIONS_ID)
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long)
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFromScheduler(void(*)(), tQ_TYPE)
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskPriority(sSmartSchedulerQ*, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateScheduler_exec()
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNewScenarios(tQ_TYPE)
</UL>

<P><STRONG><a name="[a24]"></a>MAINTENANCE_MACHINE_start()</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, maintenance.o(i._Z25MAINTENANCE_MACHINE_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = MAINTENANCE_MACHINE_start() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSwBootSrc(unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_open_protocol_F()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommStatusInMemMap()
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetApi()
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_maitenance_mode_on(unsigned char)
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTEMANCE_get_RF_OPERATIONAL()
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTEMANCE_get_RF_UPDATED()
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTEMANCE_get_IC()
</UL>
<BR>[Called By]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[b17]"></a>MAINTENANCE_RECEIVE_frame(unsigned char*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, maintenance.o(i._Z25MAINTENANCE_RECEIVE_framePhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MAINTENANCE_RECEIVE_frame(unsigned char*, unsigned char) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_copybuf()
</UL>

<P><STRONG><a name="[bab]"></a>MSME_IsPrevRkpTlbMsgAcked(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, msme.o(i._Z25MSME_IsPrevRkpTlbMsgAckedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSME_IsPrevRkpTlbMsgAcked(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
</UL>

<P><STRONG><a name="[b67]"></a>MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fl_entry.o(i._Z25MemMapEntity2EEprom_writejPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemMapEntityWrite2EPROM(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[8d3]"></a>Message_BuildSimNumberHex(unsigned char*, unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, message.o(i._Z25Message_BuildSimNumberHexPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Message_BuildSimNumberHex(unsigned char*, unsigned char*) &rArr; decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_sim_number_JD_config(unsigned char*, void*)
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESSAGE_build_msg(unsigned char*, S_MESSAGE_COMM_INFO*, bool)
</UL>

<P><STRONG><a name="[ba8]"></a>NextVidCommLocationInPool()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, videoq.o(i._Z25NextVidCommLocationInPoolv))
<BR><BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[956]"></a>OSAL_GetTaskMailBoxHandle(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osal_msg.o(i._Z25OSAL_GetTaskMailBoxHandleh))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IsMailBoxEmpty(unsigned char)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IsMailBoxFull(unsigned char)
</UL>

<P><STRONG><a name="[29d]"></a>OSAL_PortEnableInterrupts(unsigned, unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osal_port.o(i._Z25OSAL_PortEnableInterruptsjj))
<BR><BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Device_Init()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init(unsigned char)
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableSecondsInterrupts()
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt(unsigned char)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Start(unsigned char, unsigned, unsigned char)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[665]"></a>OSAL_SkipCommaAndWhiteSps(char*, char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, osal_services.o(i._Z25OSAL_SkipCommaAndWhiteSpsPcS_))
<BR><BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSendCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ISN(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[984]"></a>Perform_DTMF_Code_Actions()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, voice_manager.o(i._Z25Perform_DTMF_Code_Actionsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Perform_DTMF_Code_Actions() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSosStatus(int)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSosPending(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[9d]"></a>Pre_alarm_indication_exec()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, prealarm_handler.o(i._Z25Pre_alarm_indication_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Pre_alarm_indication_exec() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> prealarm_handler.o(i._Z25Pre_alarm_indication_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[7a3]"></a>PreparateOldIpLearnTagMsg(unsigned char*, unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ip_app.o(i._Z25PreparateOldIpLearnTagMsgPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PreparateOldIpLearnTagMsg(unsigned char*, unsigned char*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_tag(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[8d9]"></a>PrivateLockoutParamsReset(TAttackDataBase*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cyberattackstates.o(i._Z25PrivateLockoutParamsResetP15TAttackDataBase))
<BR><BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementClose(TAttackDataBase*)
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementExec(TAttackDataBase*, bool)
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateParamsInit(TAttackDataBase*)
</UL>

<P><STRONG><a name="[513]"></a>ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, apipckprocessing.o(i._Z25ProcessDeleteGetModifyCmdhPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ProcessDeleteGetModifyCmd(unsigned char, unsigned char*, unsigned char*) &rArr; FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*) &rArr; AddEntities2List(rules_arg_t*, FitEntitiesList_t*, unsigned short*) &rArr; CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*) &rArr; CheckRule4Values(unsigned short, unsigned char, rules_arg_t*, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArgByte(unsigned char*)
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFit2RulesSearch(unsigned short*)
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessModifyEntityCmd(unsigned short, unsigned short*, unsigned char*, unsigned char*)
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeleteEntityCmd(unsigned short, unsigned char*)
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGetEntityCmd(unsigned char*)
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCmdProcess(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[4b8]"></a>QueueHandlerFinishSending(unsigned char, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, queuehandler.o(i._Z25QueueHandlerFinishSendinghh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxPacket(unsigned char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[bae]"></a>RF_SEC_ZONE_Find_Bypasses()</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ram_rf_sec_zone.o(i._Z25RF_SEC_ZONE_Find_Bypassesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RF_SEC_ZONE_Find_Bypasses() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
</UL>

<P><STRONG><a name="[205]"></a>RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, ram_rf_sec_zone.o(i._Z25RF_SEC_ZONE_open_alarm_2Mh20E_DETECTOR_SCAN_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[7f2]"></a>RSU_Task_IsReadyToGetFile()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rsu_api.o(i._Z25RSU_Task_IsReadyToGetFilev))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a65]"></a>Radio_QuitFreqOffCalcMode()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z25Radio_QuitFreqOffCalcModev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Radio_QuitFreqOffCalcMode() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[585]"></a>Radio_SetCallBackFunction(void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*))</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z25Radio_SetCallBackFunctionPFvP17OSAL_CyclicBuffertEPFvS0_E))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
</UL>

<P><STRONG><a name="[baf]"></a>ResetCopyAllCUI2UIHandler()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, apipckprocessing.o(i._Z25ResetCopyAllCUI2UIHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ResetCopyAllCUI2UIHandler() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetApi()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiCopyAllCUI2UIHandler_exec()
</UL>

<P><STRONG><a name="[790]"></a>SCHEDULER_enable_gsm_comm()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scheduler.o(i._Z25SCHEDULER_enable_gsm_commv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCHEDULER_enable_gsm_comm() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_data_call_on()
</UL>

<P><STRONG><a name="[b45]"></a>SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, security.o(i._Z25SECURITY_arm_transactionsP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS16SECURITY_EVENT_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_is_new_rf_api()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Entry_Exit_Beeps(unsigned char)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_set_arming_prevention_type(unsigned char)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[324]"></a>SECURITY_get_SAFETY_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security.o(i._Z25SECURITY_get_SAFETY_statev))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entry_Exit_Beeps_exec()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
</UL>

<P><STRONG><a name="[bdd]"></a>SECURITY_get_TAMPER_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security.o(i._Z25SECURITY_get_TAMPER_statev))
<BR><BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
</UL>

<P><STRONG><a name="[700]"></a>SECURITY_partition_to_num(SECURITY_PARTITION_TYPE_E)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, security.o(i._Z25SECURITY_partition_to_num25SECURITY_PARTITION_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[bb1]"></a>SECURITY_set_SAFETY_event(U_DEV_TYPE, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, security.o(i._Z25SECURITY_set_SAFETY_event10U_DEV_TYPEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SECURITY_set_SAFETY_event(U_DEV_TYPE, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
</UL>

<P><STRONG><a name="[9db]"></a>SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, security.o(i._Z25SECURITY_set_TAMPER_event10U_DEV_TYPEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
</UL>

<P><STRONG><a name="[8fe]"></a>SECURITY_set_power_status(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z25SECURITY_set_power_statush))
<BR><BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMainPowerMSGProcess(bool, bool, bool)
</UL>

<P><STRONG><a name="[940]"></a>SearchActiveSectorAndPage(Sector_Page_s*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, internalflash_util.o(i._Z25SearchActiveSectorAndPageP13Sector_Page_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SearchActiveSectorAndPage(Sector_Page_s*) &rArr; blank_check_sectors(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check_sectors(unsigned, unsigned)
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchActivePage(Sector_Page_s*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Init()
</UL>

<P><STRONG><a name="[9fd]"></a>SecurityDelayedSliderTest()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z25SecurityDelayedSliderTestv))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[909]"></a>SecurityMarkCloseScenario(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, security.o(i._Z25SecurityMarkCloseScenarioh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SecurityMarkCloseScenario(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[441]"></a>SetSirenOnWitoutInitCodec()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, control_panel.o(i._Z25SetSirenOnWitoutInitCodecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetSirenOnWitoutInitCodec() &rArr; CODEC_SetMux(unsigned char) &rArr; HAL_SetGPOPin(unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_TestOn(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a7a]"></a>StartCheckTemporaryBypass()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, process_income_message.o(i._Z25StartCheckTemporaryBypassv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StartCheckTemporaryBypass() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[40e]"></a>TEST_DecodeIncomingMsgCmd(char*, unsigned short, unsigned short*, char**)</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, test_func.o(i._Z25TEST_DecodeIncomingMsgCmdPctPtPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TEST_DecodeIncomingMsgCmd(char*, unsigned short, unsigned short*, char**) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
</UL>

<P><STRONG><a name="[198]"></a>TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, test_func.o(i._Z25TEST_ExecuteAlarmActivatePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char) &rArr; ALARM_off() &rArr; SetSirenOff() &rArr; CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStop(unsigned char, unsigned char, unsigned*)
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_Disable()
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_Enable()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetIsVATDisabled()
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_TestOn(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>TEST_ExecuteHelpOperation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, test_func.o(i._Z25TEST_ExecuteHelpOperationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteHelpOperation(char*, unsigned short, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetNumOfRequestsAvailable(unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>TEST_INTERNAL_FLASH_CLEAR(char*, unsigned short, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test_func.o(i._Z25TEST_INTERNAL_FLASH_CLEARPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TEST_INTERNAL_FLASH_CLEAR(char*, unsigned short, unsigned char) &rArr; TEST_FUNC_FLASH_CLEAR() &rArr; preparate_sectors_for_write(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_CLEAR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>TEST_INTERNAL_FLASH_ERASE(char*, unsigned short, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test_func.o(i._Z25TEST_INTERNAL_FLASH_ERASEPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TEST_INTERNAL_FLASH_ERASE(char*, unsigned short, unsigned char) &rArr; TEST_FUNC_FLASH_ERASE() &rArr; InternalFlash_Erase() &rArr; WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_ERASE()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[82f]"></a>TIMER_ResetRFresetCounter()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(i._Z25TIMER_ResetRFresetCounterv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TIMER_ResetRFresetCounter() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshRxTimeout()
</UL>

<P><STRONG><a name="[98c]"></a>TimerSavePeriodicCounters()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timer.o(i._Z25TimerSavePeriodicCountersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = TimerSavePeriodicCounters() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[8a]"></a>TurnOffPirIndication_exec()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ram_db.o(i._Z25TurnOffPirIndication_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TurnOffPirIndication_exec() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ram_db.o(i._Z25TurnOffPirIndication_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[733]"></a>UART_PutBufferByInterrupt(int, char*, int)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uart_legacy.o(i._Z25UART_PutBufferByInterruptiPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UART_PutBufferByInterrupt(int, char*, int) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_send(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[363]"></a>UpdateTimeOutEventInQueue(unsigned char, OSAL_PriorityQueue*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cpui_func.o(i._Z25UpdateTimeOutEventInQueuehP18OSAL_PriorityQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UpdateTimeOutEventInQueue(unsigned char, OSAL_PriorityQueue*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetElement(OSAL_PriorityQueue*, unsigned short)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetNumOfElements(OSAL_PriorityQueue*)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueGetMaxFunc(OSAL_PriorityQueue*, unsigned*, void**)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLedTracker(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[80a]"></a>c_proc_SendRFDebugMessage()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, c_proc.o(i._Z25c_proc_SendRFDebugMessagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_proc_SendRFDebugMessage() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[a97]"></a>device_installed_in_panel(unsigned char*)</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, do_it_yourself.o(i._Z25device_installed_in_panelPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = device_installed_in_panel(unsigned char*) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_DEV_read(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sec_device_valid(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_APP_learn_device(C_DEV_TYPE_E, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[2fb]"></a>get_RF_SEC_ZONE_ENTRY_ptr(int)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ram_rf_sec_zone.o(i._Z25get_RF_SEC_ZONE_ENTRY_ptri))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_CheckIfDeviceValid(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*)
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_id_calculation(unsigned char)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_arm_zone_LEDs(unsigned char)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDeleteEntryMessages()
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexSendEntryMessages()
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexInstantAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStoredAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVS_loss_and_inactivity_check()
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_InActivity_Counters()
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOpenRxCmd(unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_GET_BIT_RESULT_exec()
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Types_CheckDeviceType(unsigned char, unsigned char)
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDeviceBatteryLevelTable(Inf4SendTechinfInfoTask_t*)
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpddAckReceived(unsigned char, unsigned char, bool)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_BIT_Result_state(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FG_GET_DEPLOYMENT_KEY(unsigned char, unsigned char)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateStampStr(unsigned char*, unsigned char*, ServiceDataRegister_S*, VideoCommonRegister_S*, int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_installed_in_panel(unsigned char*)
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_number_of_devices(RF_SEC_ZONE_TYPE_E)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_update_Timestamp_on_arm_detection(unsigned char*, S_MSME_MSG_EVENT*, bool)
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ConfigIPDESensitivity(unsigned char)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_DEVICE_operation(unsigned char, unsigned char)
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArmedVidDeviceList()
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngineSendConfig(int, int)
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOpddConfig(int)
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_GetFogWiredContactType(unsigned char)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_GetFogWiredMode(unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PollIPDEWindowStates(unsigned char)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDAcks_exec()
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNewRepeaterVersion(unsigned char)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNoHSCamera(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GenSensitivityConfig(unsigned char*, void*)
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_RF_SEC_ZONES_clear_t_bypass2(unsigned char)
<LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_RF_SEC_ZONES_clear_t_bypass(unsigned char)
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_RF_SEC_ZONES_set_t_bypass2(unsigned char, unsigned char)
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_RF_SEC_ZONES_set_t_bypass(unsigned char, unsigned char)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_inactivity(unsigned char, bool)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_bypass(unsigned char, bool)
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetFogWiredMode(unsigned char, unsigned char, unsigned char)
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_chime(unsigned char, bool)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstSecurityTamper()
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetPhotoDelay(unsigned char*)
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstTRTamper()
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNonChimeZone(unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemporaryBypass_exe()
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustOPDDSensitivity(int, int)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityMarkCloseScenario(unsigned char)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEEramMem(bool)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command_exec()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRstAfterNumOfSVLost(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_restore_msg(unsigned char)
<LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_active_msg(unsigned char)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_send_open_rx(unsigned char*, unsigned char*)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraTypeForLog(unsigned char)
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoRequest(unsigned char)
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*)
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SendOpenRx()
</UL>

<P><STRONG><a name="[9aa]"></a>ram_dial_sequence_GET_ptr(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ram_dial_seq.o(i._Z25ram_dial_sequence_GET_ptri))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ram_dial_sequence_GET_ptr(int) &rArr; FL_DIAL_SEQUENCE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DIAL_SEQUENCE_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_voice_call(S_MESSAGE_COMM_INFO*)
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_video_call(S_MESSAGE_COMM_INFO*, VIDEO_SCENARIO_TYPE_E)
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
</UL>

<P><STRONG><a name="[664]"></a>send_gsm_coverage_message(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gsm_comm.o(i._Z25send_gsm_coverage_messageh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = send_gsm_coverage_message(unsigned char) &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[4ee]"></a>tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, tag_reader.o(i._Z25tag_reader_decode_messagehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getRequestHandler(unsigned char)
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerformRequest(const S_TagReaderRequestHandler*, unsigned char*, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_decode_command(unsigned char*)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_COMMAND_exec()
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progLearnTag(int, int, int*, void*)
</UL>

<P><STRONG><a name="[b09]"></a>AFP_APP_read_panel_version()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, afp_app.o(i._Z26AFP_APP_read_panel_versionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AFP_APP_read_panel_version()
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_software_version()
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_decode_command(unsigned char*)
</UL>

<P><STRONG><a name="[995]"></a>AnnexDeviceEntryFindInList(int, RF_DETECTOR_SIGNALS_E)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, annex.o(i._Z26AnnexDeviceEntryFindInListi21RF_DETECTOR_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AnnexDeviceEntryFindInList(int, RF_DETECTOR_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexRemoveDeviceFromQueue(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E)
</UL>

<P><STRONG><a name="[bb7]"></a>AnnexRemoveDeviceFromQueue(int, RF_DETECTOR_SIGNALS_E)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, annex.o(i._Z26AnnexRemoveDeviceFromQueuei21RF_DETECTOR_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AnnexRemoveDeviceFromQueue(int, RF_DETECTOR_SIGNALS_E) &rArr; AnnexDeviceEntryFindInList(int, RF_DETECTOR_SIGNALS_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDeviceEntryFindInList(int, RF_DETECTOR_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[304]"></a>CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z26CONTROL_PANEL_get_systimer15E_SYSTEM_TIMERS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_init_params()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_entry_start()
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getRelevantDelay(unsigned, unsigned)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetServerTimer()
</UL>

<P><STRONG><a name="[bb8]"></a>CPUI_Button_TypePinForProg(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z26CPUI_Button_TypePinForProgP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_Button_TypePinForProg(S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckSlaveCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[362]"></a>CPUI_InitialBlinkLedAction(unsigned*, unsigned char*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cpui_func.o(i._Z26CPUI_InitialBlinkLedActionPjPhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CPUI_InitialBlinkLedAction(unsigned*, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; CPUI_UpdateInArrayTurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateInArrayTurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateBlinkLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateInArrayTurnOnPartLed(unsigned char, unsigned char)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateInArrayTurnOnLed(unsigned char, unsigned char)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLedTracker(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[bbb]"></a>C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, process_c_proc_messages.o(i._Z26C_PROC_USER_access_requestP14U_ACCESS_FLAGShh10U_DEV_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_PANIC_state()
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_USER_access(S_USER*, unsigned char)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_USER_access(S_USER*)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[9a0]"></a>C_PROC_get_release_version()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, c_proc.o(i._Z26C_PROC_get_release_versionv))
<BR><BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIridiumVersion(unsigned char*)
</UL>

<P><STRONG><a name="[6b6]"></a>C_PROC_get_sofware_version()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, c_proc.o(i._Z26C_PROC_get_sofware_versionv))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[aa4]"></a>C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, process_c_proc_messages.o(i._Z26C_PROC_process_KEY_FOB_msgh10U_DEV_TYPEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E) &rArr; PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_KEY_FOB_ptr(unsigned char)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_signals(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[b14]"></a>C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, process_c_proc_messages.o(i._Z26C_PROC_process_RKP_signalsP5S_RKP10U_DEV_TYPEh13RKP_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E) &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_IsPrevRkpTlbMsgAcked(unsigned char)
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetRkpTlbMsgWaitAck(unsigned char)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_monitor()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[47f]"></a>C_PROC_set_jamming_machine(bool)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, c_proc.o(i._Z26C_PROC_set_jamming_machineb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = C_PROC_set_jamming_machine(bool) &rArr; C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_send_packet_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[c59]"></a>CheckCorrectCpSerialFromRf(unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z26CheckCorrectCpSerialFromRfPh))
<BR><BR>[Called By]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionalCheckIfDeviceBelongsToSystem(unsigned char*, bool, bool)
</UL>

<P><STRONG><a name="[9a7]"></a>ClearRamRemoteParamStatTbl()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rpc.o(i._Z26ClearRamRemoteParamStatTblv))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdatesMachine()
</UL>

<P><STRONG><a name="[b0d]"></a>CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, videoengine.o(i._Z26CreateAndAddRFRequestEntryPh17SEQUENCER_LABEL_Ehh13U_VIDEO_FLAGSbP21U_FAILED_VIDEO_RECORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*) &rArr; InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char) &rArr; StartVideoRFMahcine() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhotoPriority(SEQUENCER_LABEL_E)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoRFRequestToQ(VideoCommonRegister_S*, ServiceDataRegister_S*, bool, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIVDentryId(SEQUENCER_LABEL_E)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoFailRetrieve_Exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
</UL>

<P><STRONG><a name="[aee]"></a>DIAL_RETRY_open_video_call(S_MESSAGE_COMM_INFO*, VIDEO_SCENARIO_TYPE_E)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dial_retry.o(i._Z26DIAL_RETRY_open_video_callP19S_MESSAGE_COMM_INFO21VIDEO_SCENARIO_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DIAL_RETRY_open_video_call(S_MESSAGE_COMM_INFO*, VIDEO_SCENARIO_TYPE_E) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_dial_video_sequence_GET_ptr(int)
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_dial_sequence_GET_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
</UL>

<P><STRONG><a name="[9fb]"></a>DIAL_RETRY_open_voice_call(S_MESSAGE_COMM_INFO*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dial_retry.o(i._Z26DIAL_RETRY_open_voice_callP19S_MESSAGE_COMM_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DIAL_RETRY_open_voice_call(S_MESSAGE_COMM_INFO*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_dial_sequence_GET_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[756]"></a>DMA_ChannelUpdateAttribute(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma_api.o(i._Z26DMA_ChannelUpdateAttributehh))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[b4]"></a>DeviceLockUnlockCheck_exec()</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, deviceconfigmachine.o(i._Z26DeviceLockUnlockCheck_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DeviceLockUnlockCheck_exec() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button2Command(unsigned char)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> deviceconfigmachine.o(i._Z26DeviceLockUnlockCheck_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> deviceconfigmachine.o(i._Z14DeviceUnlockedhhh)
</UL>
<P><STRONG><a name="[6a2]"></a>ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, comm_stm_rx_manager.o(i._Z26ExecuteRegisteredCallBackshPPhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ParseSmsMsg(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned char, MODEM*)
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks1(unsigned char)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Control_Write_Status(unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[3d9]"></a>FL_EXTENDED_CP_PARAMS_READ()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fl_types.o(i._Z26FL_EXTENDED_CP_PARAMS_READv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_EXTENDED_CP_PARAMS_READ() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmsSendTtrOpenBackTamper()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngine_BuildVidParamsBuffer(unsigned char*, unsigned char, RF_SEC_ZONE_TYPE_E)
</UL>

<P><STRONG><a name="[7f0]"></a>FL_EXTENDED_PHONE_NUM_read(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fl_types.o(i._Z26FL_EXTENDED_PHONE_NUM_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_EXTENDED_PHONE_NUM_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[62c]"></a>FL_RKP_read_device_version(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fl_types.o(i._Z26FL_RKP_read_device_versionhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_RKP_read_device_version(unsigned char, unsigned char) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
</UL>

<P><STRONG><a name="[a36]"></a>FL_VerifyCorrectISNVersion(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fl_types.o(i._Z26FL_VerifyCorrectISNVersionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = FL_VerifyCorrectISNVersion(unsigned char) &rArr; FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[874]"></a>FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, filehandler.o(i._Z26FileHandlerVerifyVideoFilehPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool) &rArr; SendIPDEClosedCoverFailure(unsigned char, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScenarioType(SEQUENCER_LABEL_E)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionFailed()
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFailRecord()
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandler_OldSpecialVideoReady(unsigned char)
</UL>

<P><STRONG><a name="[99b]"></a>GSM_Control_API_DetachGprs(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gsm_api.o(i._Z26GSM_Control_API_DetachGprshtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_DetachGprs(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
</UL>

<P><STRONG><a name="[4ff]"></a>GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, gsm_api.o(i._Z26GSM_Listen_API_OpenOdmGPRShPcttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[4fd]"></a>GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gsm_api.o(i._Z26GSM_Listen_API_SendOdmGPRShPcttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[61c]"></a>GSM_PrepareAtCommandBuffer(unsigned char, unsigned short*, S_GSM_FUNC_TABLE_HANDLE*, unsigned char, MODEM_COMMAND_E*, unsigned char, unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, comm_common_funcs.o(i._Z26GSM_PrepareAtCommandBufferhPtP23S_GSM_FUNC_TABLE_HANDLEhP15MODEM_COMMAND_Ehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GSM_PrepareAtCommandBuffer(unsigned char, unsigned short*, S_GSM_FUNC_TABLE_HANDLE*, unsigned char, MODEM_COMMAND_E*, unsigned char, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[4be]"></a>GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gsm_api.o(i._Z26GSM_Streaming_API_CloseFTPhtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_CloseFTP()
</UL>

<P><STRONG><a name="[4fb]"></a>GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, gsm_api.o(i._Z26GSM_Streaming_API_OpenGPRShPctS_hS_ttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
</UL>

<P><STRONG><a name="[722]"></a>GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gsm_api.o(i._Z26GSM_Streaming_API_ReadFOTAhPcttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[4fc]"></a>GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, gsm_api.o(i._Z26GSM_Streaming_API_SendGPRShPcttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_SendPacketOverConnection(unsigned char*, unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
</UL>

<P><STRONG><a name="[6ea]"></a>GetChimeOrInactivityCntBit()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, inactivity.o(i._Z26GetChimeOrInactivityCntBitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetChimeOrInactivityCntBit() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInactivityButtonStatus()
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInactivityMachine()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[481]"></a>GetKfControlFromPanelEntry(unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, key_fob.o(i._Z26GetKfControlFromPanelEntryPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetKfControlFromPanelEntry(unsigned char*) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
</UL>

<P><STRONG><a name="[3f9]"></a>GetPowerSaveWithACTestFlag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z26GetPowerSaveWithACTestFlagv))
<BR><BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcMsgToBeSent()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[bc1]"></a>INCOME_MESSAGE_UIS_handler()</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, process_income_message.o(i._Z26INCOME_MESSAGE_UIS_handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = INCOME_MESSAGE_UIS_handler() &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num_GET_ptr(unsigned char)
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_compare_password(unsigned char*, S_USER*)
<LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_error(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[bc2]"></a>INCOME_MESSAGE_process_ack(unsigned char*)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, process_income_message.o(i._Z26INCOME_MESSAGE_process_ackPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = INCOME_MESSAGE_process_ack(unsigned char*) &rArr; INCOME_MESSAGE_sms_send() &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_sms_send()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[9c8]"></a>INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, process_income_message.o(i._Z26INCOME_MESSAGE_process_smsPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = INCOME_MESSAGE_process_sms(unsigned char*, unsigned char) &rArr; INCOME_MESSAGE_UIS_handler() &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_error(unsigned char)
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_handle_errors()
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_ack(unsigned char*)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearArgsStruct()
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
</UL>

<P><STRONG><a name="[435]"></a>INIT_RF_subsystem_upon_req()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, init.o(i._Z26INIT_RF_subsystem_upon_reqv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = INIT_RF_subsystem_upon_req() &rArr; INIT_set_rf_subsystem_updated(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_rf_subsystem_updated(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_input_data(RF_INPUT_DEV_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rkp_data(unsigned char*, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERS_all_devices_exec()
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRFOutputEntry(int, unsigned char*, unsigned char, bool)
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiModifyHandler_exec()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelEntHandler_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_sirens()
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_kpd()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
</UL>

<P><STRONG><a name="[852]"></a>INIT_set_boot_request_main(unsigned char, bool)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, init.o(i._Z26INIT_set_boot_request_mainhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = INIT_set_boot_request_main(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBootHandler(bool)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[a54]"></a>INIT_set_boot_verbose_mode(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, init.o(i._Z26INIT_set_boot_verbose_modeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = INIT_set_boot_verbose_mode(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[4fe]"></a>IsGsmListenReadyForCommand()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_api.o(i._Z26IsGsmListenReadyForCommandv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsGsmListenReadyForCommand()
</UL>
<BR>[Calls]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmListenBusyWithTable()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[5f9]"></a>IsGsmModuleInPowerSaveMode()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z26IsGsmModuleInPowerSaveModev))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
</UL>

<P><STRONG><a name="[6fd]"></a>LED_AcquireRlease_SSPMutex(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_func.o(i._Z26LED_AcquireRlease_SSPMutexhh))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_MutexRelease(unsigned*)
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_MutexAcquire(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
</UL>

<P><STRONG><a name="[bc5]"></a>LED_UpdateInArrayTurnOnLed(unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led_api.o(i._Z26LED_UpdateInArrayTurnOnLedhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LED_UpdateInArrayTurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateInArrayTurnOnPartLed(unsigned char, unsigned char)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_UpdateInArrayTurnOnLed(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[baa]"></a>MAINTEMANCE_get_RF_UPDATED()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, maintenance.o(i._Z26MAINTEMANCE_get_RF_UPDATEDv))
<BR><BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
</UL>

<P><STRONG><a name="[ac8]"></a>MAINTENANCE_ABORT_time_out()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintenance.o(i._Z26MAINTENANCE_ABORT_time_outv))
<BR><BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ABORT_time_out()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[bc6]"></a>MSME_SetInputTlbMsgWaitAck(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, msme.o(i._Z26MSME_SetInputTlbMsgWaitAckh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSME_SetInputTlbMsgWaitAck(unsigned char) &rArr; RF_INPUT_get_status(unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
</UL>

<P><STRONG><a name="[bc7]"></a>MSME_SetSirenTlbMsgWaitAck(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msme.o(i._Z26MSME_SetSirenTlbMsgWaitAckh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSME_SetSirenTlbMsgWaitAck(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
</UL>

<P><STRONG><a name="[8ce]"></a>NextMsmeprocLocationInPool()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, msme_q.o(i._Z26NextMsmeprocLocationInPoolv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NextMsmeprocLocationInPool()
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char)
</UL>

<P><STRONG><a name="[540]"></a>OSAL_PortDisableInterrupts(unsigned, unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osal_port.o(i._Z26OSAL_PortDisableInterruptsjj))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER_Stop(unsigned char)
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableInterrupts()
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDisableInt(unsigned char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58b]"></a>OSAL_PortForceMutexRelease(unsigned*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, osal_port.o(i._Z26OSAL_PortForceMutexReleasePj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_PortForceMutexRelease(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngPauseGSM(unsigned char, unsigned)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStmMessageErrorHandler(unsigned)
</UL>

<P><STRONG><a name="[bc8]"></a>OSAL_PortSendMessageToTask(void*, void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osal_port.o(i._Z26OSAL_PortSendMessageToTaskPvS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSAL_PortSendMessageToTask(void*, void*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
</UL>

<P><STRONG><a name="[4b7]"></a>PrepareDataForTransmission(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 2998 bytes, Stack size 72 bytes, preparedatafortransmission.o(i._Z26PrepareDataForTransmissionhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CalibrStrPtr()
<LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRsuDevice(unsigned char, unsigned char)
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSendNewRfHandshake(unsigned char, RX_COMMAND*)
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndBatteryInformation(unsigned char)
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateConfigKF3Msg(unsigned char)
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Condensed_RTC(unsigned char*)
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateKF3Data(unsigned char)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndCopyFromStrg(unsigned char)
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRsuInitData(unsigned char)
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndCalibration(DEVICE_TYPE)
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndBootRequest(unsigned char)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndUpdateFile(unsigned char)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndKillUpdate(unsigned char)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndHandShake(unsigned char)
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSK2TestEnabled()
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIdBuffer(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9f]"></a>Program_Flash_Subpage_exec()</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, processflash.o(i._Z26Program_Flash_Subpage_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Program_Flash_Subpage_exec() &rArr; FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBootWriteInProgres()
<LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVectorPtr()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> processflash.o(i._Z26Program_Flash_Subpage_execv)
</UL>
<P><STRONG><a name="[425]"></a>RFApiVSEG_GetSNMemoryEntry(unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, rfapivseg.o(i._Z26RFApiVSEG_GetSNMemoryEntryhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RFApiVSEG_GetSNMemoryEntry(unsigned char, unsigned char) &rArr; RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetRSSI(char*, unsigned short, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLQIValue(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ab]"></a>RF_SEC_ZONE_num_open_alarm()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z26RF_SEC_ZONE_num_open_alarmv))
<BR><BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>

<P><STRONG><a name="[49d]"></a>RadioAPI_GetLastSecMsgRSSI()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfdrv_api.o(i._Z26RadioAPI_GetLastSecMsgRSSIv))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingCheck()
</UL>

<P><STRONG><a name="[bcd]"></a>Radio_EarlyPacketFiltering(unsigned char*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z26Radio_EarlyPacketFilteringPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Radio_EarlyPacketFiltering(unsigned char*) &rArr; Radio_NewProtocolCalcCrc(unsigned char*, bool, bool, bool) &rArr; RFApiVSEGCheckCRC(unsigned char*) &rArr; RfApi_CRC16(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionalCheckIfDeviceBelongsToSystem(unsigned char*, bool, bool)
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValidMsgRcvd4JammingDetection()
<LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_NewProtocolCalcCrc(unsigned char*, bool, bool, bool)
<LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOldOrNewRfProtocol(unsigned char*)
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalcChecksum(unsigned char*)
<LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlaveLearnRfMsg(unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
</UL>

<P><STRONG><a name="[a64]"></a>Radio_EnterFreqOffCalcMode()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z26Radio_EnterFreqOffCalcModev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Radio_EnterFreqOffCalcMode() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
</UL>

<P><STRONG><a name="[828]"></a>Radio_RxFifoReceiveHandler(unsigned char)</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z26Radio_RxFifoReceiveHandlerh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Radio_RxFifoReceiveHandler(unsigned char) &rArr; Radio_IsRxTxOverflow(unsigned char, unsigned char) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsRxTxOverflow(unsigned char, unsigned char)
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetRxTxBytes(unsigned char)
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReturnToWOR()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferInsert(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EarlyPacketFiltering(unsigned char*)
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoDefaultState()
</UL>
<BR>[Called By]<UL><LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleTraffic()
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
</UL>

<P><STRONG><a name="[810]"></a>RamRfSec_SetSKMaskingDelay(unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ram_rf_sec_zone.o(i._Z26RamRfSec_SetSKMaskingDelayh))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = RamRfSec_SetSKMaskingDelay(unsigned char) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[69e]"></a>RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)</STRONG> (Thumb, 1462 bytes, Stack size 72 bytes, comm_stm_rx_manager.o(i._Z26RxMngGsmUnsolicitedHandlerhP31S_COMM_STM_RX_MNG_COMM_TASK_REGPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short) &rArr; GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; GSM_StrmResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxResponse(unsigned char)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2Digit(char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModuleTableRow(unsigned char)
<LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_StartStopJamDetectTimer(unsigned)
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_End_CSD_Full_Msg_Cycle()
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetFwUpInProgress(unsigned)
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetGsmStatus(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDelete(OSAL_PriorityQueue*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageFullCycle()
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngSwitchTransparenceMode(unsigned char, unsigned)
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks1(unsigned char)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngIsFoundUnsolicited(char*, unsigned short)
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegTaskByTaskId(unsigned char)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegStart(unsigned char*, unsigned)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngHexSearch(unsigned char*, unsigned char*, unsigned, unsigned)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMsgFromQ(OSAL_PriorityQueue*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[b42]"></a>SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)</STRONG> (Thumb, 738 bytes, Stack size 56 bytes, security.o(i._Z26SECURITY_exit_transactionsP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS16SECURITY_EVENT_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_last_arm_dev_id()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_is_new_rf_api()
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_alarm_2M(unsigned char, E_DETECTOR_SCAN_MODE)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pre_alarm_video()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAlarmMsgesFromQ()
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_set_arming_prevention_type(unsigned char)
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_clear_count()
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEEramMem(bool)
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_SEC_EVENT(S_SEC_EVENT*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[311]"></a>SECURITY_get_alarm_details(unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z26SECURITY_get_alarm_detailsPh))
<BR><BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[95c]"></a>SECURITY_set_alarm_details(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z26SECURITY_set_alarm_detailshh))
<BR><BR>[Calls]<UL><LI><a href="#[bd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_SetAlarmDetails(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_SAFETY_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[5d2]"></a>SECURITY_set_arm_zone_LEDs(unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, security.o(i._Z26SECURITY_set_arm_zone_LEDsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SECURITY_set_arm_zone_LEDs(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_SetArmedZoneBits(unsigned short)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[3de]"></a>SECURITY_set_tamper_status(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security.o(i._Z26SECURITY_set_tamper_statush))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[a78]"></a>SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, supervisory.o(i._Z26SUPERVISORY_active_message10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_active_msg(U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_sirens()
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_kpd()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[8eb]"></a>SUPERVISORY_check_rf_input(unsigned char)</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, supervisory.o(i._Z26SUPERVISORY_check_rf_inputh))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_check_rf_input(unsigned char) &rArr; SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_ers(unsigned char)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_supervisory_count_buf()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_entry(unsigned char)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nible_by_id(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOldRfInputMGLS(RF_INPUT_ENTRY_S*)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_valid(unsigned char)
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRstAfterNumOfSVLost(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nible_by_id(unsigned char*, unsigned char)
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
</UL>

<P><STRONG><a name="[8e9]"></a>SUPERVISORY_check_rf_zones(unsigned char, unsigned char)</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, supervisory.o(i._Z26SUPERVISORY_check_rf_zoneshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_check_rf_zones(unsigned char, unsigned char) &rArr; SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ers(unsigned char)
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOldMGLS(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRstAfterNumOfSVLost(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
</UL>

<P><STRONG><a name="[a03]"></a>Security_SliderTestPending()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, security.o(i._Z26Security_SliderTestPendingv))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[59d]"></a>SendIPDEClosedCoverFailure(unsigned char, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, videoengine.o(i._Z26SendIPDEClosedCoverFailurehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SendIPDEClosedCoverFailure(unsigned char, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexSendEntryMessages()
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoQ_PurgeClosedWindowFiles()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoRequest(unsigned char)
</UL>

<P><STRONG><a name="[ae1]"></a>Send_FG_GET_DEPLOYMENT_KEY(unsigned char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, c_proc.o(i._Z26Send_FG_GET_DEPLOYMENT_KEYhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Send_FG_GET_DEPLOYMENT_KEY(unsigned char, unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerKeyRequest_exec()
</UL>

<P><STRONG><a name="[97e]"></a>SetPowerSaveWithACTestFlag(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, power_save_mode_vf.o(i._Z26SetPowerSaveWithACTestFlagh))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PowerSaveMode(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[4b1]"></a>Set_Perimeter_window_value()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, prealarm_handler.o(i._Z26Set_Perimeter_window_valuev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_Perimeter_window_value() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
</UL>

<P><STRONG><a name="[197]"></a>TEST_ExecuteResetOperation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_func.o(i._Z26TEST_ExecuteResetOperationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TEST_ExecuteResetOperation(char*, unsigned short, unsigned char) &rArr; OSAL_ErrorExec(unsigned char, unsigned, unsigned char) &rArr; OSAL_MsgFree(OSAL_Msg*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[a46]"></a>Timer_PollIPDEWindowStates(unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timer.o(i._Z26Timer_PollIPDEWindowStatesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Timer_PollIPDEWindowStates(unsigned char) &rArr; Timer_InformDeviceArmStatus(unsigned char) &rArr; Timer_SendOpenRx() &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_InformDeviceArmStatus(unsigned char)
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test()
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[88b]"></a>Timer_RefreshJDSupervision()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i._Z26Timer_RefreshJDSupervisionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_RefreshJDSupervision()
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_Reset_Jamming_Detector()
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96f]"></a>UpdateDeviceRSSIinDataBase(int, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, entercounterstodatabase.o(i._Z26UpdateDeviceRSSIinDataBaseihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateDeviceRSSIinDataBase(int, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCounters_PerformIIRCalc(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[8a5]"></a>c_proc_process_OPDI_status(unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, c_proc.o(i._Z26c_proc_process_OPDI_statusPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = c_proc_process_OPDI_status(unsigned char*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8a1]"></a>c_proc_process_config_resp(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, c_proc.o(i._Z26c_proc_process_config_resph12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = c_proc_process_config_resp(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b26]"></a>msme_q_ClearSigFoxMessages()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, msme_q.o(i._Z26msme_q_ClearSigFoxMessagesv))
<BR><BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
</UL>

<P><STRONG><a name="[895]"></a>process_c_proc_batt_remove(int, C_DEV_TYPE_E)</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, process_c_proc_messages.o(i._Z26process_c_proc_batt_removei12C_DEV_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = process_c_proc_batt_remove(int, C_DEV_TYPE_E) &rArr; RF_SEC_ZONE_monitor() &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[89a]"></a>set_packet_switched_POSESO(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process_income_message.o(i._Z26set_packet_switched_POSESOb))
<BR><BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ac3]"></a>AIT_SetWasBelowMinEventSent(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ait_stub.o(i._Z27AIT_SetWasBelowMinEventSenthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AIT_SetWasBelowMinEventSent(unsigned char, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
</UL>

<P><STRONG><a name="[adc]"></a>Annex_clear_alarm_in_memory()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, annex.o(i._Z27Annex_clear_alarm_in_memoryv))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_clear_annex_alarm_in_memory()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[b9e]"></a>BUTTONS_UpdateButtonEntries(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, buttons_func.o(i._Z27BUTTONS_UpdateButtonEntriesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BUTTONS_UpdateButtonEntries(unsigned char) &rArr; HAL_SetGPOPin(unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetGPOPin(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_InitButtonInterrupts()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EnableButtonPress()
</UL>

<P><STRONG><a name="[2af]"></a>CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z27CONTROL_PANEL_get_sysoption16E_SYSTEM_OPTIONS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOn(unsigned char, bool)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_RingType()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[bdb]"></a>CPUI_Button_ActivateProgram(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cpui_buttons_func.o(i._Z27CPUI_Button_ActivateProgramP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_Button_ActivateProgram(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyPinPressed(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyPinPressed(unsigned short)
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[b12]"></a>CPUI_Button_EnterPinForProg(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z27CPUI_Button_EnterPinForProgP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = CPUI_Button_EnterPinForProg(S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int) &rArr; StartSendCmd(unsigned char*, bool) &rArr; InsetRfEventToQ(unsigned char*, bool) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[4a9]"></a>CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z27CPUI_Buttons_CheckStateFlagP17S_CPUI_ButtonInfoh))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDigitButtonsDisabled()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChimeMasked()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_phone_mute()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTamperMasked()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTestAllLeds(int, int, int*, void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[353]"></a>CPUI_GetTriggerOrLevelState(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cpui_func.o(i._Z27CPUI_GetTriggerOrLevelStatet))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetStateTimeOut(unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>

<P><STRONG><a name="[35c]"></a>CPUI_UpdateInArrayTurnOnLed(unsigned char, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cpui_func.o(i._Z27CPUI_UpdateInArrayTurnOnLedhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CPUI_UpdateInArrayTurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateInArrayTurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateInArrayTurnOnLed(unsigned char, unsigned char)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_InitialBlinkLedAction(unsigned*, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[52c]"></a>C_PROC_GetDeviceVersionCode(unsigned char*, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, c_proc.o(i._Z27C_PROC_GetDeviceVersionCodePhh))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMajorAndMinorVersions(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8a3]"></a>C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, c_proc.o(i._Z27C_PROC_ProcessReceivedCyberPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char) &rArr; VOICE_verification_window_on(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_in_mem(E_SEC_ALARM_IN_MEM_EVENT)
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertGeneralDeviceType(C_DEV_TYPE_E)
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendRaaMessageEnable(C_DEV_TYPE_E, unsigned char)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_GetCyberFlags()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b15]"></a>C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)</STRONG> (Thumb, 1822 bytes, Stack size 96 bytes, process_c_proc_messages.o(i._Z27C_PROC_process_RKP_requestsh10U_DEV_TYPE14RKP_REQUESTS_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateResetMachine(unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartExit(bool)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_get_status()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bypass_message(S_SEC_ZONE_ENTRY_DATA*, bool, bool)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_data_size(unsigned char)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStateChangeMsg()
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTamperState()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pre_arm_exit(PRE_ARM_EXIT_SCENARIO_E)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[bdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_TAMPER_state()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_duration()
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_supervision_test()
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare(unsigned char*)
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTAGSysIndFault()
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_timer(unsigned char, unsigned char)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_ovds()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[46d]"></a>C_PROC_process_STATUS_panel(ItrStatus_t*)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, c_proc.o(i._Z27C_PROC_process_STATUS_panelP11ItrStatus_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C_PROC_process_STATUS_panel(ItrStatus_t*) &rArr; get_CONTROL_PANEL_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[46f]"></a>C_PROC_process_siren_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, c_proc.o(i._Z27C_PROC_process_siren_statusP25Inf4SendTechinfInfoTask_tP11ItrStatus_tPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_PROC_process_siren_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool) &rArr; Timer_GetRssiIndBmValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceTemperatureReading(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[aad]"></a>DATALINK_state_wait4pending()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, data_link_manager.o(i._Z27DATALINK_state_wait4pendingv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DATALINK_state_wait4pending() &rArr; TimerTimeoutExpired1(SYS_TASK*) &rArr; TimerTimeoutExpired(SYS_TASK*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_manager_exec()
</UL>

<P><STRONG><a name="[aa0]"></a>DiagTest_CheckIfDeviceValid(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, test_diag.o(i._Z27DiagTest_CheckIfDeviceValidhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DiagTest_CheckIfDeviceValid(unsigned char, unsigned char, unsigned char*) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_BuildInfoBufferToSend(unsigned char*, unsigned short, unsigned char*, unsigned char, unsigned short*)
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[ac2]"></a>DiagTest_ClearAllDeviceInfo()</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, test_diag.o(i._Z27DiagTest_ClearAllDeviceInfov))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DiagTest_ClearAllDeviceInfo() &rArr; DiagTest_ClearAllDeviceBatteryLevel() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRSSIValue(int, int, unsigned char)
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_ClearAllDeviceBatteryLevel()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
</UL>

<P><STRONG><a name="[6d1]"></a>ExecuteRegisteredCallBacks1(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm_stm_rx_manager.o(i._Z27ExecuteRegisteredCallBacks1h))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ExecuteRegisteredCallBacks1(unsigned char) &rArr; ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[a0b]"></a>FL_DATE_STRING_logical_read(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fl_types.o(i._Z27FL_DATE_STRING_logical_readt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_DATE_STRING_logical_read(unsigned short) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DATE_STRING_ptr(unsigned short)
</UL>

<P><STRONG><a name="[7f1]"></a>FL_EXTENDED_PHONE_NUM_write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fl_types.o(i._Z27FL_EXTENDED_PHONE_NUM_writehPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FL_EXTENDED_PHONE_NUM_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[87c]"></a>FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, fl_types.o(i._Z27FL_RKP_write_device_versionhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FL_RKP_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rkp_init(unsigned char, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[be3]"></a>FL_VIDEO_DIAL_SEQUENCE_read(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fl_types.o(i._Z27FL_VIDEO_DIAL_SEQUENCE_readh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_VIDEO_DIAL_SEQUENCE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_dial_video_sequence_GET_ptr(int)
</UL>

<P><STRONG><a name="[32c]"></a>FOR_ALL_DEVS_clear_t_bypass(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ram_db.o(i._Z27FOR_ALL_DEVS_clear_t_bypassh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FOR_ALL_DEVS_clear_t_bypass(unsigned char) &rArr; FOR_ALL_RF_SEC_ZONES_clear_t_bypass2(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_RF_SEC_ZONES_clear_t_bypass2(unsigned char)
<LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_RF_SEC_ZONES_clear_t_bypass(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[be6]"></a>FillDeviceBatteryLevelTable(Inf4SendTechinfInfoTask_t*)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, devicebatterystate.o(i._Z27FillDeviceBatteryLevelTableP25Inf4SendTechinfInfoTask_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FillDeviceBatteryLevelTable(Inf4SendTechinfInfoTask_t*) &rArr; GetBateryInfDevType(unsigned char, unsigned char) &rArr; CheckMajorAndMinorVersions(unsigned char, unsigned char) &rArr; ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBateryInfDevType(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
</UL>

<P><STRONG><a name="[693]"></a>GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gsm_api.o(i._Z27GSM_Control_API_SendInitGsmhhtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; GSM_StrmResetStmFlags() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_StrmResetStmFlags()
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MsgResetStmFlags()
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_LsnResetStmFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtCmd_Table_Handler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStmMessageErrorHandler(unsigned)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_CommControl(char*, unsigned short, unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[6d3]"></a>GSM_Control_GetPowerOffTime(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z27GSM_Control_GetPowerOffTimeh))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[500]"></a>GSM_Listen_API_CloseOdmGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gsm_api.o(i._Z27GSM_Listen_API_CloseOdmGPRShtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Listen_API_CloseOdmGPRS(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[501]"></a>GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gsm_api.o(i._Z27GSM_Streaming_API_CloseGPRShtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
</UL>

<P><STRONG><a name="[be1]"></a>GetDeviceTemperatureReading(unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, c_proc.o(i._Z27GetDeviceTemperatureReadinghh))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_siren_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
</UL>

<P><STRONG><a name="[be7]"></a>GetLowGSMModemRSSIIndecator()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gsm_api.o(i._Z27GetLowGSMModemRSSIIndecatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetLowGSMModemRSSIIndecator()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLastTransmissionFromQueue(unsigned char)
</UL>

<P><STRONG><a name="[38a]"></a>I2C_GetNumOfPendingRequests()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2c_func.o(i._Z27I2C_GetNumOfPendingRequestsv))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[6f8]"></a>INCOME_MESSAGE_ack_received()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process_income_message.o(i._Z27INCOME_MESSAGE_ack_receivedv))
<BR><BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[26c]"></a>IfKf3NeedBatteryInformation()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deviceupdatemachine.o(i._Z27IfKf3NeedBatteryInformationv))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[a4f]"></a>InitPeriodicRetryParameters(unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(i._Z27InitPeriodicRetryParametersPh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[aab]"></a>IsCommandTamperStateChanged(unsigned char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cybermachine.o(i._Z27IsCommandTamperStateChangedPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IsCommandTamperStateChanged(unsigned char*) &rArr; GetPreviosTamperState(C_DEV_TYPE_E, unsigned char) &rArr; get_RF_OUTPUT_DEV_ptr(int) &rArr; FL_RF_OUTPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceivedTamperState(unsigned char*)
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreviosTamperState(C_DEV_TYPE_E, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCyberDetectedCmd(unsigned char*)
</UL>

<P><STRONG><a name="[4f3]"></a>IsGsmControlReadyForCommand()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gsm_api.o(i._Z27IsGsmControlReadyForCommandv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsGsmControlReadyForCommand()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmControlBusyWithTable()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[502]"></a>IsGsmMessageReadyForCommand()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gsm_api.o(i._Z27IsGsmMessageReadyForCommandv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsGsmMessageReadyForCommand()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageBusyWithTable()
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[c0a]"></a>IsGsmStreamingBusyWithTable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gsm_stm_streaming.o(i._Z27IsGsmStreamingBusyWithTablev))
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
</UL>

<P><STRONG><a name="[2c8]"></a>IsLastChannelInDialSequence(COMMUNICATION_CHANNEL_E, unsigned char, unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ram_dial_seq.o(i._Z27IsLastChannelInDialSequence23COMMUNICATION_CHANNEL_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IsLastChannelInDialSequence(COMMUNICATION_CHANNEL_E, unsigned char, unsigned char*) &rArr; Get_phone_comm_type(unsigned char) &rArr; FL_PHONE_NUM_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_phone_comm_type(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[beb]"></a>MSME_IsPrevInputTlbMsgAcked(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, msme.o(i._Z27MSME_IsPrevInputTlbMsgAckedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSME_IsPrevInputTlbMsgAcked(unsigned char) &rArr; RF_INPUT_get_status(unsigned char) &rArr; FL_RF_INPUT_DEV_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
</UL>

<P><STRONG><a name="[bec]"></a>MSME_IsPrevSirenTlbMsgAcked(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, msme.o(i._Z27MSME_IsPrevSirenTlbMsgAckedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSME_IsPrevSirenTlbMsgAcked(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
</UL>

<P><STRONG><a name="[5fb]"></a>MessageDuringVoiceAvailable()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gsm_comm.o(i._Z27MessageDuringVoiceAvailablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MessageDuringVoiceAvailable() &rArr; GSM_Control_API_IsMuxOn()
</UL>
<BR>[Calls]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsMuxOn()
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_To_Voice_Mode()
</UL>

<P><STRONG><a name="[569]"></a>OSAL_DebugCheckHeapOverflow()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, osal_heap.o(i._Z27OSAL_DebugCheckHeapOverflowv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OSAL_DebugCheckHeapOverflow() &rArr; OSAL_HeapCheckUsage(unsigned, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapCheckUsage(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IdleTask()
</UL>

<P><STRONG><a name="[8ca]"></a>RF_Input_general_processing(unsigned char*)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, incomingbufferparser.o(i._Z27RF_Input_general_processingPh))
<BR><BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomeNewProtocol(unsigned char*)
</UL>

<P><STRONG><a name="[b2a]"></a>RF_SEC_ZONE_num_open_tamper()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z27RF_SEC_ZONE_num_open_tamperv))
<BR><BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_tamper()
</UL>

<P><STRONG><a name="[75d]"></a>RTC_EnableSecondsInterrupts()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc_api.o(i._Z27RTC_EnableSecondsInterruptsv))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortEnableInterrupts(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
</UL>

<P><STRONG><a name="[203]"></a>Radio_ConvertFreqToRegister(void*, void*, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z27Radio_ConvertFreqToRegisterPvS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Radio_ConvertFreqToRegister(void*, void*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioAPI_FreqToRegister(void*, void*, unsigned)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
</UL>

<P><STRONG><a name="[82c]"></a>Radio_HandleUnKnownGDOEvent()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z27Radio_HandleUnKnownGDOEventv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Radio_HandleUnKnownGDOEvent() &rArr; Radio_LoadBpskCfg(bool, unsigned char) &rArr; Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsRxTxOverflow(unsigned char, unsigned char)
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttributeReleaseTxBuffers(S_Radio_ComFifo*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
</UL>

<P><STRONG><a name="[ba]"></a>RamMemoryMap_HardReset_exec()</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, rammemorymap.o(i._Z27RamMemoryMap_HardReset_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = RamMemoryMap_HardReset_exec() &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAllPendingReqEmpty()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[5cd]"></a>RamMemoryMap_StartHardReset()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rammemorymap.o(i._Z27RamMemoryMap_StartHardResetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RamMemoryMap_StartHardReset() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progHardReset(int, int, int*, void*)
</UL>

<P><STRONG><a name="[6bc]"></a>RawData_IsTimeOutFromEEPROM()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rawdata_api_stub.o(i._Z27RawData_IsTimeOutFromEEPROMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RawData_IsTimeOutFromEEPROM() &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[a3]"></a>Request_video_all_pirs_exec()</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, videoengine.o(i._Z27Request_video_all_pirs_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Request_video_all_pirs_exec() &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScenarioType(SEQUENCER_LABEL_E)
<LI><a href="#[bee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerCurrentCamera()
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_already_in_q(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> videoengine.o(i._Z27Request_video_all_pirs_execv)
</UL>
<P><STRONG><a name="[b2e]"></a>RfAttributeReleaseTxBuffers(S_Radio_ComFifo*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rfdrv_func.o(i._Z27RfAttributeReleaseTxBuffersP15S_Radio_ComFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RfAttributeReleaseTxBuffers(S_Radio_ComFifo*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribProcessingSend(S_Radio_ComFifo*)
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleUnKnownGDOEvent()
</UL>

<P><STRONG><a name="[7ae]"></a>RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, kpdoutstub.o(i._Z27RunConfigurableButtonActioniP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RunConfigurableButtonAction(int, S_CPUI_ButtonInfo*) &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MidRightButtonAction(S_CPUI_ButtonInfo*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MidLeftButtonAction(S_CPUI_ButtonInfo*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightButtonAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftButtonAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[69d]"></a>RxMngIsFoundUnsolicitedPstn(char*, unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstn_stub.o(i._Z27RxMngIsFoundUnsolicitedPstnPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RxMngIsFoundUnsolicitedPstn(char*, unsigned short) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[6a4]"></a>RxMngSwitchTransparenceMode(unsigned char, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, comm_stm_rx_manager.o(i._Z27RxMngSwitchTransparenceModehj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RxMngSwitchTransparenceMode(unsigned char, unsigned) &rArr; OSAL_CyclicBufferCreate(unsigned char, unsigned short) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferDelete(OSAL_CyclicBuffer*)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferCreate(unsigned char, unsigned short)
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFoundRegTaskByTaskId(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[b44]"></a>SECURITY_alarm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, security.o(i._Z27SECURITY_alarm_transactionsP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS16SECURITY_EVENT_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = SECURITY_alarm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_off()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[b43]"></a>SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, security.o(i._Z27SECURITY_entry_transactionsP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS16SECURITY_EVENT_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = SECURITY_entry_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEntryMessages(unsigned char, bool)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_SEC_EVENT(S_SEC_EVENT*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[333]"></a>SECURITY_force_panic_disarm()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, security.o(i._Z27SECURITY_force_panic_disarmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SECURITY_force_panic_disarm() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
</UL>

<P><STRONG><a name="[453]"></a>SECURITY_get_partition_type()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, security.o(i._Z27SECURITY_get_partition_typev))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedAlarm()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_gen_status(unsigned char*)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKf3Status(S_KEY_FOB_ENTRY*, U_KEY_FOB_PARAMS*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_build_sms(unsigned char*, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_partition_indication(unsigned)
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_state_LEDS_byte(unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[b3f]"></a>SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, security.o(i._Z27SECURITY_reset_transactionsP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS16SECURITY_EVENT_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_memory_map_ok()
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_SetSliderWindowTest()
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[b41]"></a>SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)</STRONG> (Thumb, 1534 bytes, Stack size 96 bytes, security.o(i._Z27SECURITY_unset_transactionsP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS16SECURITY_EVENT_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_last_arm_dev_id()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_is_new_rf_api()
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annex_clear_alarm_in_memory()
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annex_alarm_in_memory()
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexWasAlarm()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[bf2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PINCODE_ID2logical(unsigned char)
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_ID2logical(unsigned char)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pre_arm_exit(PRE_ARM_EXIT_SCENARIO_E)
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSosStatus()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecAlarmPending(bool)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_duration()
<LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_delay_full_or_part_force_arm_4_open_zone_proc(unsigned char, ERROR_E*)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoPerimeterArmEnabled()
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_tamper()
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_set_arming_prevention_type(unsigned char)
<LI><a href="#[bf1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_is_fast_force_arm(unsigned char)
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForceArmWindowAction(S_CPUI_ButtonInfo*)
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_SetSliderWindowTest()
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_key_fob_send_msg(S_SEC_EVENT*, SECURITY_STATES_E)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[7fd]"></a>SMS_MESSAGE_ForceSTUNDetach()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sms_message.o(i._Z27SMS_MESSAGE_ForceSTUNDetachv))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[8ec]"></a>SUPERVISORY_check_rf_output(unsigned char)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, supervisory.o(i._Z27SUPERVISORY_check_rf_outputh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_check_rf_output(unsigned char) &rArr; SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nible_by_id(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_get_supervisory_count_buf()
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_valid(unsigned char)
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndRstAfterNumOfSVLost(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nible_by_id(unsigned char*, unsigned char)
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
</UL>

<P><STRONG><a name="[bd7]"></a>SUPERVISORY_msme_active_msg(U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, supervisory.o(i._Z27SUPERVISORY_msme_active_msg10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SUPERVISORY_msme_active_msg(U_DEV_TYPE, unsigned char, unsigned char) &rArr; SUPERVISORY_msme_rf_sec_in_active_msg(unsigned char) &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_active_msg(unsigned char)
<LI><a href="#[bf5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_in_active_msg(RF_INPUT_DEV_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b13]"></a>SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, supervisory.o(i._Z27SUPERVISORY_restore_message10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_restore_msg(U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gas_meter_counter(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUTPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[67f]"></a>SecurityISNSirenAfterSafety(unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, security.o(i._Z27SecurityISNSirenAfterSafetyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SecurityISNSirenAfterSafety(unsigned char) &rArr; SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool) &rArr; tag_reader_IsEfmTr5WithEntryBeeps() &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[596]"></a>SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*)</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, filehandler.o(i._Z27SendVideoProcessDoneMessageP19VIDEO_RF_TRANSFER_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCameraDeviceMessage(unsigned char, CAMERA_MESSAGE_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[ae]"></a>SetDeviceBatteryInfReq_exec()</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, devicebatterystate.o(i._Z27SetDeviceBatteryInfReq_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SetDeviceBatteryInfReq_exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Address Reference Count : 3]<UL><LI> devicebatterystate.o(i._Z27SetDeviceBatteryInfReq_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[1b4]"></a>TEST_INTERNAL_FLASH_READ_ID(char*, unsigned short, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test_func.o(i._Z27TEST_INTERNAL_FLASH_READ_IDPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TEST_INTERNAL_FLASH_READ_ID(char*, unsigned short, unsigned char) &rArr; TEST_FUNC_FLASH_READ_ID(char*, unsigned short) &rArr; Print2Uart(unsigned char*, unsigned short) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[a87]"></a>TIMER_TriggerRFresetCounter()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i._Z27TIMER_TriggerRFresetCounterv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TIMER_TriggerRFresetCounter() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[869]"></a>Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)</STRONG> (Thumb, 502 bytes, Stack size 72 bytes, videoengine.o(i._Z27Take_Device_Detection_Video18RF_SEC_ZONE_TYPE_Eh17SEQUENCER_LABEL_EbP13U_VIDEO_FLAGSh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicNum()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request(SEQUENCER_LABEL_E, unsigned char, U_VIDEO_FLAGS, unsigned char)
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_video_sequences_timeout()
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAllVideosReady(bool)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityMarkCloseScenario(unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIVDentryId(SEQUENCER_LABEL_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexInstantAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_perform_duress_actions(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[a44]"></a>Timer_ConfigIPDESensitivity(unsigned char)</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, timer.o(i._Z27Timer_ConfigIPDESensitivityh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Timer_ConfigIPDESensitivity(unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[20a]"></a>Timer_InformDeviceArmStatus(unsigned char)</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, timer.o(i._Z27Timer_InformDeviceArmStatush))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Timer_InformDeviceArmStatus(unsigned char) &rArr; Timer_SendOpenRx() &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSaveFileIdle()
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_BuildArmAwarnMsg(S_SEC_ZONE_ENTRY_DATA*, S_RF_SEC_ZONE*)
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SendOpenRx()
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendConfigDev(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_SetArmAwarnessUpdate()
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PollIPDEWindowStates(unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_status_msg()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[7f9]"></a>Timer_SetCSDExpirationTimer(int)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timer.o(i._Z27Timer_SetCSDExpirationTimeri))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[592]"></a>Trigger_Erase_Flash_Sectors(unsigned char, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, processflash.o(i._Z27Trigger_Erase_Flash_Sectorshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Trigger_Erase_Flash_Sectors(unsigned char, unsigned char) &rArr; ActivateFlashEraser() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateFlashEraser()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[101]"></a>UartCallBackTestApplication(OSAL_CyclicBuffer*, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, test_api.o(i._Z27UartCallBackTestApplicationP17OSAL_CyclicBuffert))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UartCallBackTestApplication(OSAL_CyclicBuffer*, unsigned short) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsgFromInt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_api.o(i._Z28TEST_TestApplicationActivatev)
</UL>
<P><STRONG><a name="[b85]"></a>UpdateRamRemoteParamStatTbl(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rpc.o(i._Z27UpdateRamRemoteParamStatTblPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateRamRemoteParamStatTbl(unsigned char*, unsigned char, unsigned char) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Specific_Device_Machine_Exec()
</UL>

<P><STRONG><a name="[753]"></a>VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, vat_func.o(i._Z27VAT_FileTransmissionHandlerP10S_VAT_InfoP19S_VatTaskGlobalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*) &rArr; FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnG729ADecRun
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListInsertToHead(unsigned char, OSAL_List*, void*)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[bf7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ExtractNextVoiceFile(S_VAT_Info*, S_VatTaskGlobalData*, unsigned*, unsigned*)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitDecoder(S_VatTaskGlobalData*)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[bac]"></a>WriteVirtualSnObj_GetActive(TWriteVirtualSnObj*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, virtualsnobj.o(i._Z27WriteVirtualSnObj_GetActiveP18TWriteVirtualSnObj))
<BR><BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSetVirtualSnPoseso(unsigned char*, MSME_MSG_E*, unsigned char*)
</UL>

<P><STRONG><a name="[921]"></a>c_proc_SendJDConfigMessages(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, c_proc.o(i._Z27c_proc_SendJDConfigMessagesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_proc_SendJDConfigMessages(unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
</UL>

<P><STRONG><a name="[a15]"></a>c_proc_alloc_interim_buffer(unsigned char**, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, c_proc.o(i._Z27c_proc_alloc_interim_bufferPPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_proc_alloc_interim_buffer(unsigned char**, unsigned) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[793]"></a>c_proc_msg_over_JD_possible()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, c_proc.o(i._Z27c_proc_msg_over_JD_possiblev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_proc_msg_over_JD_possible() &rArr; GetJDZoneEntry() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialSequencePhoneId(unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_start()
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_build_msg(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[978]"></a>get_next_free_SEC_EVENT_ptr()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sec_event_q.o(i._Z27get_next_free_SEC_EVENT_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_next_free_SEC_EVENT_ptr()
</UL>
<BR>[Calls]<UL><LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_event_q_inc_index(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[73a]"></a>msme_q_AdvanceSigFoxCounter()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, msme_q.o(i._Z27msme_q_AdvanceSigFoxCounterv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = msme_q_AdvanceSigFoxCounter() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[3a1]"></a>preparate_sectors_for_write(unsigned, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flash_iap_api.o(i._Z27preparate_sectors_for_writejj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = preparate_sectors_for_write(unsigned, unsigned) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_flash_iap_api_c_iap_func___Z28OSAL_PortDisableCpuInterruptv
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_flash_iap_api_c_iap_func___Z27OSAL_PortEnableCpuInterruptv
</UL>
<BR>[Called By]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_CLEAR()
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector(unsigned char, unsigned char)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[f5]"></a>progActivateTestApplication(int, int, int*, void*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, kpdprogs.o(i._Z27progActivateTestApplicationiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = progActivateTestApplication(int, int, int*, void*) &rArr; INIT_set_TestApplicationOnOff(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_TestApplicationOnOff(unsigned char, bool)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[b0c]"></a>set_video_sequences_timeout()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, videoengine.o(i._Z27set_video_sequences_timeoutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_video_sequences_timeout()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileSizeInSectors()
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
</UL>

<P><STRONG><a name="[96]"></a>ApiCopyAllCUI2UIHandler_exec()</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, apistatemachines.o(i._Z28ApiCopyAllCUI2UIHandler_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ApiCopyAllCUI2UIHandler_exec() &rArr; CopyUserFromCUI2UI(unsigned char) &rArr; CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E) &rArr; MemMapEntityWrite2EPROM(unsigned char*, unsigned short) &rArr; MemMapEntity2EEprom_write(unsigned, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBaseUserCUI2UI(unsigned short)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyEntity2EPROM(unsigned short, unsigned short, API_EPROM_COPY_OPERATION_E)
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCopyAllCUI2UIHandler()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> apipckprocessing.o(i._Z25ResetCopyAllCUI2UIHandlerv)
</UL>
<P><STRONG><a name="[bf9]"></a>BUTTONS_ClearButtonInterrupt()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, buttons_func.o(i._Z28BUTTONS_ClearButtonInterruptv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BUTTONS_ClearButtonInterrupt() &rArr; HAL_ClrGPIInt(unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ClrGPIInt(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EndButtonPressProcess(unsigned*, unsigned*, unsigned char*)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_InitButtonInterrupts()
</UL>

<P><STRONG><a name="[c25]"></a>BUTTONS_GetThePressedButtons(unsigned, unsigned char*, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, buttons_api.o(i._Z28BUTTONS_GetThePressedButtonsjPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUTTONS_GetThePressedButtons(unsigned, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[3bd]"></a>BUTTONS_InitButtonInterrupts()</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, buttons_api.o(i._Z28BUTTONS_InitButtonInterruptsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BUTTONS_InitButtonInterrupts() &rArr; BUTTONS_UpdateButtonInterrupt(unsigned char) &rArr; HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgToGPIO(unsigned char, unsigned char, unsigned char)
<LI><a href="#[bfa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDTMF()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_UpdateButtonInterrupt(unsigned char)
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_ClearButtonInterrupt()
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_UpdateButtonEntries(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExtInt3()
</UL>

<P><STRONG><a name="[371]"></a>CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z28CPUI_Button_EnterProgramFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_KeyErrorFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ActivateProgram(S_CPUI_ButtonInfo*)
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_TypePinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_Status_Action_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[2dc]"></a>CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z28CPUI_Buttons_UpdateStateFlagP17S_CPUI_ButtonInfohh))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StartOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StartGoodPinCodeFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_RunProgFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StopOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StopForceArmWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StopGoodPinCodeFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPINBeforeArm(int, int)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTamperMask(int, int)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMutePhone(int, int)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChimeMask(int, int)
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDigitButtonsDisabled(bool)
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForceArmWindowAction(S_CPUI_ButtonInfo*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTestAllLeds(int, int, int*, void*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelAllPerif(int, int, int*, void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progSwitchMode(int, int, int*, void*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progHardReset(int, int, int*, void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnPerif(int, int, int*, void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnInput(int, int, int*, void*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessByConfigAction(S_CPUI_ButtonInfo*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessOffAction(S_CPUI_ButtonInfo*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessOnAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[1be]"></a>CPUI_GetLowBatteryIndication(unsigned*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cpui_func.o(i._Z28CPUI_GetLowBatteryIndicationPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CPUI_GetLowBatteryIndication(unsigned*) &rArr; getLowBattIndication() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLowBattIndication()
</UL>
<BR>[Address Reference Count : 6]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[922]"></a>C_PROC_adjust_device_version(CONST_DATA_TBL_S*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, c_proc.o(i._Z28C_PROC_adjust_device_versionP16CONST_DATA_TBL_Shhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = C_PROC_adjust_device_version(CONST_DATA_TBL_S*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
</UL>

<P><STRONG><a name="[472]"></a>C_PROC_process_RF_INP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, c_proc.o(i._Z28C_PROC_process_RF_INP_statusP25Inf4SendTechinfInfoTask_tP11ItrStatus_tPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_PROC_process_RF_INP_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool) &rArr; Timer_GetRssiIndBmValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceTemperatureReading(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[473]"></a>C_PROC_process_RF_OUT_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, c_proc.o(i._Z28C_PROC_process_RF_OUT_statusP25Inf4SendTechinfInfoTask_tP11ItrStatus_tPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_PROC_process_RF_OUT_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool) &rArr; Timer_GetRssiIndBmValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[b84]"></a>C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, process_c_proc_messages.o(i._Z28C_PROC_process_SIREN_signalsP7S_SIREN10U_DEV_TYPEh15SIREN_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E) &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_IsPrevSirenTlbMsgAcked(unsigned char)
<LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetSirenTlbMsgWaitAck(unsigned char)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[4b6]"></a>CheckIfCanPushMessageToQueue(unsigned char)</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, queuehandler.o(i._Z28CheckIfCanPushMessageToQueueh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckIfCanPushMessageToQueue(unsigned char) &rArr; CheckSendNewRfHandshake(unsigned char, RX_COMMAND*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRsuDevice(unsigned char, unsigned char)
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSendNewRfHandshake(unsigned char, RX_COMMAND*)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
</UL>

<P><STRONG><a name="[a33]"></a>CheckIfDeviceBelongsToSystem()</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, incomingbufferparser.o(i._Z28CheckIfDeviceBelongsToSystemv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CheckIfDeviceBelongsToSystem() &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialNumberCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[210]"></a>CopyParamTableFromEpromToRam()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rpc.o(i._Z28CopyParamTableFromEpromToRamv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CopyParamTableFromEpromToRam() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_init()
</UL>

<P><STRONG><a name="[870]"></a>CreateCyberPanelSerialNumber(unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cybermachine.o(i._Z28CreateCyberPanelSerialNumberPh))
<BR><BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildVirusPayload(unsigned char*)
</UL>

<P><STRONG><a name="[bda]"></a>EnterCounters_PerformIIRCalc(unsigned char, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, entercounterstodatabase.o(i._Z28EnterCounters_PerformIIRCalchh))
<BR><BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCounters_CalculateMissedMessages(int, int)
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceRSSIinDataBase(int, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[630]"></a>FL_INPUT_read_device_version(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fl_types.o(i._Z28FL_INPUT_read_device_versionhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_INPUT_read_device_version(unsigned char, unsigned char) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
</UL>

<P><STRONG><a name="[62f]"></a>FL_SIREN_read_device_version(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fl_types.o(i._Z28FL_SIREN_read_device_versionhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_SIREN_read_device_version(unsigned char, unsigned char) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_siren_data(SIREN_TYPE_E*, unsigned char*, unsigned char*)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
</UL>

<P><STRONG><a name="[611]"></a>GSM_ControlClearResetCounter()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z28GSM_ControlClearResetCounterv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
</UL>

<P><STRONG><a name="[30e]"></a>GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gsm_api.o(i._Z28GSM_Control_API_GetGsmStatusP12S_GSM_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_GetGsmStatus(S_GSM_STATUS*) &rArr; GSM_Control_StartStopRegDebounceTimer(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetSelfTaskId()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[bfb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_StartStopRegDebounceTimer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Control_Write_Status(unsigned char)
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_STATUS_exec()
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_GSM_Stat()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDateListenStatusBit()
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LINK_exec(E_TRANSPORTS, bool)
</UL>

<P><STRONG><a name="[bfc]"></a>GSM_Control_API_IsHwInitDone()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_api.o(i._Z28GSM_Control_API_IsHwInitDonev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Control_API_IsHwInitDone()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[8a9]"></a>GSM_Control_API_IsRegFailure()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_api.o(i._Z28GSM_Control_API_IsRegFailurev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Control_API_IsRegFailure()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
</UL>

<P><STRONG><a name="[bd3]"></a>GSM_Control_API_SetGsmStatus(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gsm_api.o(i._Z28GSM_Control_API_SetGsmStatushtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_SetGsmStatus(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
</UL>

<P><STRONG><a name="[c5b]"></a>GetReceivedTrBackTamperState(unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z28GetReceivedTrBackTamperStatePh))
<BR><BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[bfd]"></a>GetSendPacketPreambleCounter()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rfutilfunc.o(i._Z28GetSendPacketPreambleCounterv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSendPacketPreambleCounter()
</UL>
<BR>[Calls]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfRetryOrBroadcast()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfMsg()
</UL>

<P><STRONG><a name="[bc3]"></a>INCOME_MESSAGE_handle_errors()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, process_income_message.o(i._Z28INCOME_MESSAGE_handle_errorsv))
<BR><BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[6fa]"></a>INCOME_MESSAGE_nack_received()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process_income_message.o(i._Z28INCOME_MESSAGE_nack_receivedv))
<BR><BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[b8a]"></a>INCOME_MESSAGE_process_error(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, process_income_message.o(i._Z28INCOME_MESSAGE_process_errorh))
<BR><BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_sms(unsigned char*, unsigned char)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[94f]"></a>INIT_set_is_backup_valid_bit(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, init.o(i._Z28INIT_set_is_backup_valid_bith))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = INIT_set_is_backup_valid_bit(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SaveFactorySettings(char*, unsigned short, unsigned char)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[55e]"></a>IsThereFogSetBitPanelInFault()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, c_proc.o(i._Z28IsThereFogSetBitPanelInFaultv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsThereFogSetBitPanelInFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[9f2]"></a>ListenModeBypassVideoChannel(int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, videohandler.o(i._Z28ListenModeBypassVideoChanneli))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ListenModeBypassVideoChannel(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
</UL>

<P><STRONG><a name="[789]"></a>MSME_q_BuildandSendSigFoxMsg(S_MSME_MSG_EVENT*)</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, msme_q.o(i._Z28MSME_q_BuildandSendSigFoxMsgP16S_MSME_MSG_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = MSME_q_BuildandSendSigFoxMsg(S_MSME_MSG_EVENT*) &rArr; msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char) &rArr; SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*) &rArr; SMT_set_DailyMsgCounter(unsigned char, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msmg_q_SendSigFoxMessage(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_MSME_MESSAGES_Ptr()
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MSME_MsgParams()
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteMsgesFromQ(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[b8b]"></a>NextReadyLocationInSchedPool(SchedulerItem*, tQ_TYPE)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, smartscheduler.o(i._Z28NextReadyLocationInSchedPoolP13SchedulerItem7tQ_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NextReadyLocationInSchedPool(SchedulerItem*, tQ_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long)
</UL>

<P><STRONG><a name="[976]"></a>OSAL_CyclicBufferGetDataSize(OSAL_CyclicBuffer*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, osal_cyclic_buff.o(i._Z28OSAL_CyclicBufferGetDataSizeP17OSAL_CyclicBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSAL_CyclicBufferGetDataSize(OSAL_CyclicBuffer*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
</UL>

<P><STRONG><a name="[567]"></a>OSAL_DebugCheckStackOverflow()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, osal_debug_services.o(i._Z28OSAL_DebugCheckStackOverflowv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSAL_DebugCheckStackOverflow()
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IdleTask()
</UL>

<P><STRONG><a name="[7fa]"></a>OSAL_GetRightPaddedStringLen(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, osal_services.o(i._Z28OSAL_GetRightPaddedStringLenPhhh))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[70b]"></a>OSAL_GetTaskActiveOnInitFlag(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osal_task_util.o(i._Z28OSAL_GetTaskActiveOnInitFlagh))
<BR><BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
</UL>

<P><STRONG><a name="[248]"></a>OSAL_HeapAllocBufferInternal(unsigned short, unsigned)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, osal_heap.o(i._Z28OSAL_HeapAllocBufferInternaltj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_Init(unsigned char)
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_DetachGprs(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_PrepareAtCommandBuffer(unsigned char, unsigned short*, S_GSM_FUNC_TABLE_HANDLE*, unsigned char, MODEM_COMMAND_E*, unsigned char, unsigned char)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveIpUnnecessaryZeros(unsigned char, unsigned char**, unsigned char*, unsigned short*)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ParseSmsMsg(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned char, MODEM*)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintSplitNum(unsigned char, unsigned short*, unsigned short, unsigned short)
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCreate(unsigned**)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFManager(void*)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferCreate(unsigned char, unsigned short)
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadStatistics(S_RF_ReqInfo*)
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnableBpsk(unsigned char)
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetAudioConfiguration(unsigned char, unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallClose(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallDial(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_CloseOdmGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_AnswerCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendSMS(unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetGsmStatus(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmMuxAllocateBuffer(unsigned char, unsigned short)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngReduceLeadingZeroes(unsigned char, unsigned char**, unsigned, unsigned char)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngParsRegBuffer(unsigned char**, unsigned short*, unsigned char*, S_COMM_STM_RX_MNG_COMM_TASK_REG*)
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDataRegConfig(S_COMM_STM_RX_MNG_DATA_REG_CONFIG_INFO***)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseToSTM(S_COMM_STM_RX_MNG_RX_BUFFER**, unsigned short, unsigned char)
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCommTaskReg(S_COMM_STM_RX_MNG_COMM_TASK_REG***)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDataReg(S_COMM_STM_RX_MNG_DATA_REG_INFO***)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructRingNum(unsigned char, char*, char**, unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_ExtructData(unsigned char, char*, char**, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListInsertToHead(unsigned char, OSAL_List*, void*)
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListCreate(unsigned char)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitDecoder(S_VatTaskGlobalData*)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short)
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print2Uart(unsigned char*, unsigned short)
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*)
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Write(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Erase()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReadBatCharger(char*, unsigned short, unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RfSendCarrier(char*, unsigned short, unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicesSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GetRSSI(char*, unsigned short, unsigned char)
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitStart(unsigned char)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_Task_API_FTPGetFile(char*, char*, char*, char*, char*, void*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CreateTempTaskWithPendingMessage()
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMailBoxCreate(unsigned short, void**)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortStart()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrCreateEntry(unsigned short, unsigned char, unsigned*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_PrintMessage(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyLoopIterationState(unsigned char, unsigned short)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init_Variables()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_HandleReceivedCodecSample()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_MACHINE_exec()
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceBatteryInfReq_exec()
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_frame()
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_nack()
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_rec_packet(unsigned char*, unsigned char, E_TRANSPORTS)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetGsmEventToQ(unsigned char*)
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGSMAudioConfig(unsigned char, unsigned char)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceVerificationOption(unsigned char)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpyModeOption(unsigned char)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RejectOption(unsigned char)
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRequestServerKeyFog(unsigned char, eRequestServerKeyFogType)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookForTheOldstFile_exec()
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_handler(unsigned char*, unsigned char)
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbUpdateGo(C_DEV_TYPE_E, unsigned char, EAttackType, bool)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages_exec()
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendRFDebugMessage_exec()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions_exec()
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_alloc_interim_buffer(unsigned char**, unsigned)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_DEV_TYPE_send_msg(unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_send(S_MESSAGE_COMM_INFO*)
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLookingForFile(VIDEO_COMM_SESSION_S*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeveFileName_exec()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPicture_exec()
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertVideoCommRequestToQ(VIDEO_RF_TRANSFER_S*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVideoFailRecord(U_FAILED_VIDEO_RECORD*)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoProcessDoneMessage(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_PROTOCL_MACHINE_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init_exec()
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_decode_command(unsigned char*)
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_FLASH_update(U_DEV_TYPE, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_Create_POSESO_Reply(unsigned char*, unsigned short)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoFailRetrieve_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_MACHINE_exec()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdatesMachine()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSecurity_exec()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_ReadMsg()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_send_packet_exec()
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triggger_Program_Flash_Subpage(unsigned long, unsigned char*, int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_MACHINE_exec()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMap_HardReset_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyGuardPinCode()
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFgPhotoTable(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSafetySnooze(unsigned char, unsigned char)
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAndAddRFRequestEntry(unsigned char*, SEQUENCER_LABEL_E, unsigned char, unsigned char, U_VIDEO_FLAGS, bool, U_FAILED_VIDEO_RECORD*)
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_Open_data_connection(unsigned char*)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_save_params()
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_process_ack(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertSecStateToQ()
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pda_alloc_RX_buff()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Specific_Device_Machine_Exec()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveI2CBuffCopy(S_CyberInfo*, unsigned char*)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Config(TVirusCryptObj*, unsigned)
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirusCryptObj_Exe(TVirusCryptObj*, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacketProcessingStates(unsigned char*)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxPacket(unsigned char**)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutBufferByInterrupt(int, char*, int)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsetRfEventToQ(unsigned char*, bool)
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessModifyEntityCmd(unsigned short, unsigned short*, unsigned char*, unsigned char*)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[34b]"></a>OSAL_PriorityQueueGetElement(OSAL_PriorityQueue*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, osal_priority_queue.o(i._Z28OSAL_PriorityQueueGetElementP18OSAL_PriorityQueuet))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferInQ(OSAL_PriorityQueue*, unsigned char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeOutEventInQueue(unsigned char, OSAL_PriorityQueue*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventInQueue(unsigned short, OSAL_PriorityQueue*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[374]"></a>OSAL_PriorityQueueGetMaxFunc(OSAL_PriorityQueue*, unsigned*, void**)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, osal_priority_queue.o(i._Z28OSAL_PriorityQueueGetMaxFuncP18OSAL_PriorityQueuePjPPv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeOutEventInQueue(unsigned char, OSAL_PriorityQueue*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventInQueue(unsigned short, OSAL_PriorityQueue*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[666]"></a>RFApiVSEG_GetDeviceGroupType(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rfapivseg.o(i._Z28RFApiVSEG_GetDeviceGroupTypeh))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteDevice(char*, unsigned short, unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_AddDevice(char*, unsigned short, unsigned char)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
</UL>

<P><STRONG><a name="[7f7]"></a>RFApiVSEG_GetDeviceTypeEntry(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rfapivseg.o(i._Z28RFApiVSEG_GetDeviceTypeEntryh))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[3df]"></a>RF_SEC_ZONE_num_open_low_bat()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z28RF_SEC_ZONE_num_open_low_batv))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[72b]"></a>RSU_GetRemoteBootFlashAdrres(unsigned char, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rsu_task.o(i._Z28RSU_GetRemoteBootFlashAdrreshh))
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSUTaskBufferHandler(OSAL_CyclicBuffer*, unsigned char*, unsigned short, S_RSU_MANAGER_INFO*, S_RSU_ESI_FILE_INFO*, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_ManagerTask(void*)
</UL>

<P><STRONG><a name="[71b]"></a>RadioAPI_GetLastPacketMsgLQI()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfdrv_api.o(i._Z28RadioAPI_GetLastPacketMsgLQIv))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparateFooter(S_RfApi_Footer*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[8bd]"></a>ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, devicebatterystate.o(i._Z28ReadDeviceBatteryInformationhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; CheckForSupervisory(unsigned char) &rArr; HandleNewMessage() &rArr; RefreshRxTimeout() &rArr; TIMER_ResetRFresetCounter() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetGeneralTypeOffset(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceData(unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSupervisory(unsigned char)
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDevSupportBatteryInf(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessI2cProtocol(unsigned char*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHandshakeDecision(RX_COMMAND, PRIVATE_ID)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceInfoResp(unsigned char*)
</UL>

<P><STRONG><a name="[b64]"></a>SCHEDULER_maitenance_mode_on(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(i._Z28SCHEDULER_maitenance_mode_onh))
<BR><BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
</UL>

<P><STRONG><a name="[bff]"></a>SIREN_tr5_entry_beep_builder(unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, siren.o(i._Z28SIREN_tr5_entry_beep_builderPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SIREN_tr5_entry_beep_builder(unsigned char*) &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[8ba]"></a>SMS_Message_LastSTUNWasACKed()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sms_message.o(i._Z28SMS_Message_LastSTUNWasACKedv))
<BR><BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b8f]"></a>SMS_message_close_connection()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sms_message.o(i._Z28SMS_message_close_connectionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMS_message_close_connection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[bf6]"></a>SUPERVISORY_msme_restore_msg(U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, supervisory.o(i._Z28SUPERVISORY_msme_restore_msg10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SUPERVISORY_msme_restore_msg(U_DEV_TYPE, unsigned char, unsigned char) &rArr; SUPERVISORY_msme_rf_sec_in_restore_msg(unsigned char) &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_sec_in_restore_msg(unsigned char)
<LI><a href="#[c01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_rf_in_restore_msg(RF_INPUT_DEV_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[898]"></a>SaveDeviceTemperatureReading(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, c_proc.o(i._Z28SaveDeviceTemperatureReadinghhh))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9e7]"></a>Security_SetSliderWindowTest()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, security.o(i._Z28Security_SetSliderWindowTestv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Security_SetSliderWindowTest() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_TriggerDelayedSliderTest()
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c4b]"></a>SetKf3NeedBatteryInformation()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deviceupdatemachine.o(i._Z28SetKf3NeedBatteryInformationv))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceBatteryInformation_exe()
</UL>

<P><STRONG><a name="[196]"></a>TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, test_func.o(i._Z28TEST_ExecuteMemReadOperationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteMemReadOperation(char*, unsigned short, unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>TEST_INTERNAL_FLASH_WRITE_ID(char*, unsigned short, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test_func.o(i._Z28TEST_INTERNAL_FLASH_WRITE_IDPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TEST_INTERNAL_FLASH_WRITE_ID(char*, unsigned short, unsigned char) &rArr; TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short) &rArr; InternalFlash_WriteId(unsigned short, unsigned char*) &rArr; InternalFlash_Write(unsigned short, unsigned char*, unsigned short) &rArr; WriteFlashPageLoop(Sector_Page_s*, Sector_Page_s*, unsigned char*) &rArr; SetFirstSectorAndPage(Sector_Page_s*, Sector_Page_s*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_WRITE_ID(char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[640]"></a>TEST_IsTestApplicationActive()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_api.o(i._Z28TEST_IsTestApplicationActivev))
<BR><BR>[Called By]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PrintMode(unsigned char)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLabRFLine(int, bool, int, bool)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_RFApiVSEG_c
</UL>

<P><STRONG><a name="[a59]"></a>TEST_TestApplicationActivate()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, test_api.o(i._Z28TEST_TestApplicationActivatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TEST_TestApplicationActivate() &rArr; UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_EnterRadioTestMode(unsigned char)
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_TestApplicationOnOff(unsigned char, bool)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_handler_exec()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[7fe]"></a>Timer_SetSigfoxKeepAliveFlag(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i._Z28Timer_SetSigfoxKeepAliveFlagh))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[60e]"></a>UART_GetNumOfPendingRequests(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_api.o(i._Z28UART_GetNumOfPendingRequestsh))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
</UL>

<P><STRONG><a name="[32a]"></a>VOICE_verification_window_on(unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, voice_manager.o(i._Z28VOICE_verification_window_onh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = VOICE_verification_window_on(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMPrintDis()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSosStatus(int)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSosPending(bool)
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoiceWindow()
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_c_proc_batt_remove(int, C_DEV_TYPE_E)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_ProcessReceivedCyber(unsigned char*, unsigned char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_voice_window_exec()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrongCodeMessage(unsigned char)
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_UIS_handler()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_perform_duress_actions(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[a0]"></a>Wait_for_boot_condition_exec()</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, rb_app.o(i._Z28Wait_for_boot_condition_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Wait_for_boot_condition_exec() &rArr; INIT_set_boot_request_main(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_msme_q()
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCStatus()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRC32(unsigned long, unsigned long)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Reset()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetJDNag(unsigned)
<LI><a href="#[c02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_status_force_ac_fault()
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendDeviceVersions(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_boot_request_main(unsigned char, bool)
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_target_is_image(unsigned char)
<LI><a href="#[c03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_c_boot_request()
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_a_boot_request()
<LI><a href="#[c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDNag()
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBootCondition()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSystemIdle()
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCState()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rb_app.o(i._Z28Wait_for_boot_condition_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[8a4]"></a>c_proc_process_Ask4TimeStamp(unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, c_proc.o(i._Z28c_proc_process_Ask4TimeStampPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = c_proc_process_Ask4TimeStamp(unsigned char*) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC_Ticker()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ad9]"></a>get_next_ready_SEC_EVENT_ptr()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sec_event_q.o(i._Z28get_next_ready_SEC_EVENT_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_next_ready_SEC_EVENT_ptr()
</UL>
<BR>[Calls]<UL><LI><a href="#[bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_event_q_inc_index(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
</UL>

<P><STRONG><a name="[7db]"></a>rf_sec_set_or_clr_inactivity(unsigned char, bool)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ram_rf_sec_zone.o(i._Z28rf_sec_set_or_clr_inactivityhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = rf_sec_set_or_clr_inactivity(unsigned char, bool) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[335]"></a>tag_reader_get_is_new_rf_api()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tag_reader.o(i._Z28tag_reader_get_is_new_rf_apiv))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[bf1]"></a>tag_reader_is_fast_force_arm(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tag_reader.o(i._Z28tag_reader_is_fast_force_armh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tag_reader_is_fast_force_arm(unsigned char) &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[b0a]"></a>AFP_APP_read_panel_serial_num()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, afp_app.o(i._Z29AFP_APP_read_panel_serial_numv))
<BR><BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_decode_command(unsigned char*)
</UL>

<P><STRONG><a name="[c26]"></a>BUTTONS_CheckValidButtonPress(unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, buttons_api.o(i._Z29BUTTONS_CheckValidButtonPresshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BUTTONS_CheckValidButtonPress(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[36e]"></a>BUTTONS_EndButtonPressProcess(unsigned*, unsigned*, unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buttons_api.o(i._Z29BUTTONS_EndButtonPressProcessPjS_Ph))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BUTTONS_EndButtonPressProcess(unsigned*, unsigned*, unsigned char*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[bf9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_ClearButtonInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[c22]"></a>BUTTONS_NumberOfButtonPressed(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buttons_api.o(i._Z29BUTTONS_NumberOfButtonPressedj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUTTONS_NumberOfButtonPressed(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_MoreThanOneButtonPress(unsigned)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[33c]"></a>BUTTONS_UpdateButtonInterrupt(unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, buttons_func.o(i._Z29BUTTONS_UpdateButtonInterrupth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BUTTONS_UpdateButtonInterrupt(unsigned char) &rArr; HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_ISR()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_InitButtonInterrupts()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EnableButtonPress()
</UL>

<P><STRONG><a name="[307]"></a>CONTROL_PANEL_get_sysflag_ptr()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z29CONTROL_PANEL_get_sysflag_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CONTROL_PANEL_get_sysflag_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPstnModuleEnable()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_init_params()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfiguarbleHandlingOption_SD(unsigned char)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurableHandlingOption(unsigned char)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_init_params()
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSyncClockGSM()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoPerimeterArmEnabled()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[1c6]"></a>CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, cpui_buttons_func.o(i._Z29CPUI_Buttons_EchoNumbers_FunchP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVoiceOn()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_read(unsigned char)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelInAlarmInMem()
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_open_call(unsigned char*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_DIAL_RETRY_Idle()
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerVolumeStep(bool)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fast_dial()
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[c05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ConvertButtonToChr(unsigned char)
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckStateFlag(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMute()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StopOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDigitButtonsDisabled()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Address Reference Count : 10]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[b11]"></a>CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z29CPUI_Buttons_ResetButtonsFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_TypePinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_Action_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_CheckMasterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_SetResetProg(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[359]"></a>CPUI_GetConEventNameFromTable(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpui_func.o(i._Z29CPUI_GetConEventNameFromTableh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[1bc]"></a>CPUI_GetOpenZonesOrTamperLeds(unsigned*)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cpui_func.o(i._Z29CPUI_GetOpenZonesOrTamperLedsPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CPUI_GetOpenZonesOrTamperLeds(unsigned*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 8]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[35e]"></a>CPUI_IsLedSetForAllBlinkTypes(unsigned char*, unsigned*, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cpui_func.o(i._Z29CPUI_IsLedSetForAllBlinkTypesPhPjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPUI_IsLedSetForAllBlinkTypes(unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_IsLedBitSet(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformTimeOutAction(unsigned char*, unsigned*, unsigned, unsigned*, unsigned char*, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[377]"></a>CPUI_NotifyLoopIterationState(unsigned char, unsigned short)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cpui_func.o(i._Z29CPUI_NotifyLoopIterationStateht))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CPUI_NotifyLoopIterationState(unsigned char, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[2db]"></a>CPUI_NotifyStateChangeBadBeep()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpui_api.o(i._Z29CPUI_NotifyStateChangeBadBeepv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisarmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_KeyErrorFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_Prog_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auto_learn_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDtmfTimout_exec()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_handle_call(E_VOICE_DEVICE)
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_open_call(unsigned)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModOutgNumb(int, int, int*, void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progAddModIncNumb(int, int, int*, void*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelOutgNumb(int, int, int*, void*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelAllPerif(int, int, int*, void*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progDelIncNumb(int, int, int*, void*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progHardReset(int, int, int*, void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEditUser(int, int, int*, void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnPerif(int, int, int*, void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnInput(int, int, int*, void*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[857]"></a>CPUI_NotifyVirtualButtonPress()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, buttons_api.o(i._Z29CPUI_NotifyVirtualButtonPressv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = CPUI_NotifyVirtualButtonPress() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PressButton(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[9dd]"></a>CPUI_SetOpenZoneAndTamperBits(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpui_func.o(i._Z29CPUI_SetOpenZoneAndTamperBitsj))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
</UL>

<P><STRONG><a name="[c3]"></a>C_PROC_SendLowBatteryInf_exec()</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, c_proc.o(i._Z29C_PROC_SendLowBatteryInf_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_PROC_SendLowBatteryInf_exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z29C_PROC_SendLowBatteryInf_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[471]"></a>C_PROC_process_KEY_FOB_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, c_proc.o(i._Z29C_PROC_process_KEY_FOB_statusP25Inf4SendTechinfInfoTask_tP11ItrStatus_tPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = C_PROC_process_KEY_FOB_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[6aa]"></a>DATALINK_clear_packet_pending()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_link_manager.o(i._Z29DATALINK_clear_packet_pendingv))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_PROTOCL_MACHINE_exec()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_PROTOCL_MACHINE_exec()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_receive()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
</UL>

<P><STRONG><a name="[6ac]"></a>DATALINK_set_packet_processed()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_link_manager.o(i._Z29DATALINK_set_packet_processedv))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_CP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_AP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_receive()
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_done()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiGetHandler_exec()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndUdpMsg(FLAG_FIELD*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b1e]"></a>FLASH_GetNumOfPendingRequests(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash_api.o(i._Z29FLASH_GetNumOfPendingRequestsh))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
</UL>

<P><STRONG><a name="[631]"></a>FL_OUTPUT_read_device_version(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fl_types.o(i._Z29FL_OUTPUT_read_device_versionhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_OUTPUT_read_device_version(unsigned char, unsigned char) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
</UL>

<P><STRONG><a name="[880]"></a>FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, fl_types.o(i._Z29FL_SIREN_write_device_versionhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FL_SIREN_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VerifyCorrectISNVersion(unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[465]"></a>FlashTaskBusyPollAfterCapture(unsigned, unsigned, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, flash_func.o(i._Z29FlashTaskBusyPollAfterCapturejjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FlashTaskBusyPollAfterCapture(unsigned, unsigned, unsigned char) &rArr; Flash_ReadStatusRegister(unsigned char, unsigned char*) &rArr; Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GeneralAcquireRlease_SSP_Mutex(unsigned char, unsigned char)
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadStatusRegister(unsigned char, unsigned char*)
<LI><a href="#[c07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhileLoopDelay(unsigned short)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
</UL>

<P><STRONG><a name="[5f5]"></a>Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, flash_func.o(i._Z29Flash_InsertExportDataOverSSPhPhjS_jh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_InsertExportDataOverSSP(unsigned char, unsigned char*, unsigned, unsigned char*, unsigned, unsigned char) &rArr; SSP_ReceiveData(unsigned char, unsigned char*, unsigned) &rArr; ClearReceiveSSPFIFO(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_SetCSHigh(unsigned char)
<LI><a href="#[c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_SetCSLow(unsigned char)
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData(unsigned char, unsigned char*, unsigned)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadStatusRegister(unsigned char, unsigned char*)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorEraseFunc(unsigned char, unsigned)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PageWriteFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_BulkEraseFunc(unsigned char)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteDisable(unsigned char)
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable(unsigned char)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
</UL>

<P><STRONG><a name="[505]"></a>GSM_Control_API_VoiceCallDial(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, gsm_api.o(i._Z29GSM_Control_API_VoiceCallDialhPcttPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_VoiceCallDial(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[6a3]"></a>GSM_Control_GetModemGsmStatus()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z29GSM_Control_GetModemGsmStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[91e]"></a>GetPointer2CyberSuspectDevice()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z29GetPointer2CyberSuspectDevicev))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_exec()
</UL>

<P><STRONG><a name="[692]"></a>GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*)</STRONG> (Thumb, 426 bytes, Stack size 72 bytes, comm_common_funcs.o(i._Z29GsmPrintoutsSendMessageToUarthhhhjPhtPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetNumOfPendingRequests(unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_GetModemGsmStatus()
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Ascii2String(char*, char*, unsigned short)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrCopy(char*, const char*, unsigned)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[6b9]"></a>INIT_get_rf_subsystem_updated()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(i._Z29INIT_get_rf_subsystem_updatedv))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[907]"></a>INIT_set_TestApplicationOnOff(unsigned char, bool)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, init.o(i._Z29INIT_set_TestApplicationOnOffhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = INIT_set_TestApplicationOnOff(unsigned char, bool) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationDeactivate()
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationActivate()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExitTestMode(char*, unsigned short, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progActivateTestApplication(int, int, int*, void*)
</UL>

<P><STRONG><a name="[484]"></a>INIT_set_rf_subsystem_updated(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init.o(i._Z29INIT_set_rf_subsystem_updatedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = INIT_set_rf_subsystem_updated(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
</UL>

<P><STRONG><a name="[4fa]"></a>IsGsmStreamingReadyForCommand()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gsm_api.o(i._Z29IsGsmStreamingReadyForCommandv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsGsmStreamingReadyForCommand()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[c0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingBusyWithTable()
</UL>
<BR>[Called By]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[bba]"></a>LED_UpdateBlinkLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, led_api.o(i._Z29LED_UpdateBlinkLedStatusArrayPhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LED_UpdateBlinkLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CheckDisableEnableLed(unsigned char)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLedState(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_InitialBlinkLedAction(unsigned*, unsigned char*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8ac]"></a>MAINTENANCE_MACHINE_get_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maintenance.o(i._Z29MAINTENANCE_MACHINE_get_statev))
<BR><BR>[Called By]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[b23]"></a>MP_BIT_calc_software_checksum(unsigned long, unsigned long, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, maintenance.o(i._Z29MP_BIT_calc_software_checksummmPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MP_BIT_calc_software_checksum(unsigned long, unsigned long, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_BIT_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, unsigned char*)
</UL>

<P><STRONG><a name="[256]"></a>OSAL_SendMessageToTaskFromInt(OSAL_Msg*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, osal_msg.o(i._Z29OSAL_SendMessageToTaskFromIntP8OSAL_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskMailBoxHandle(unsigned char)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskIsActiveFlag(unsigned char)
<LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSendMessageToTaskFromInt(void*, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMASendMessageToTask(unsigned char, unsigned short, unsigned char)
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageToI2CTask(unsigned short, unsigned char)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR(unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyButtonPressed()
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_2_ISR()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallBackFuncGsmRxManager(OSAL_CyclicBuffer*, unsigned short)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBackTestApplication(OSAL_CyclicBuffer*, unsigned short)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TickerHandler()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_SendStopBeepMsg()
</UL>

<P><STRONG><a name="[420]"></a>OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, osal_msg.o(i._Z29OSAL_SendMessageToTaskGeneralP8OSAL_Msgh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskMailBoxHandle(unsigned char)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskIsActiveFlag(unsigned char)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskStackSize(unsigned char)
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSendMessageToTask(void*, void*)
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskCreate(void(*)(void*), const signed char*, unsigned short, void*, unsigned short, unsigned*, unsigned*)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SetTaskHandle
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToFlashManager(unsigned short, S_FLASH_TransferReqInfo*)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFlashAckToTask(unsigned short, unsigned, unsigned short, unsigned char)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendI2CAckToTask(unsigned short, unsigned, unsigned short, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartAckToTask(unsigned short, unsigned, unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnToTaskWithState(unsigned char, unsigned short, E_GSM_REPLY_STATUS_MESSAGE)
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrmSendAckToOrigTask(unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[4b9]"></a>QueueHandlerStarvationActions()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queuehandler.o(i._Z29QueueHandlerStarvationActionsv))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[8db]"></a>RB_PROGARM_TARGET_build_frame(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned long)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rb_app.o(i._Z29RB_PROGARM_TARGET_build_framehPhhS_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RB_PROGARM_TARGET_build_frame(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned long) &rArr; calc_chksum(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_FLASH_read(unsigned char*, unsigned long, unsigned char)
<LI><a href="#[c0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_program_target(U_UINT32*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c3b]"></a>RadioAPI_GetLastPacketMsgRSSI()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfdrv_api.o(i._Z29RadioAPI_GetLastPacketMsgRSSIv))
<BR><BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendStatusOrResponseToJD(bool)
</UL>

<P><STRONG><a name="[ac0]"></a>RawData_ADLReportIntervalFunc(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rawdata_api_stub.o(i._Z29RawData_ADLReportIntervalFunchh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RawData_ADLReportIntervalFunc(unsigned char, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
</UL>

<P><STRONG><a name="[a10]"></a>SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, security.o(i._Z29SECURITY_tr_device_activationh15DEVICE_ACTION_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[c0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_set_lck_or_rfoutput_activated(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[43c]"></a>SMS_message_connection_closed(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sms_message.o(i._Z29SMS_message_connection_closedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMS_message_connection_closed(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_close_session()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[6e7]"></a>SVS_loss_and_inactivity_check()</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, supervisory.o(i._Z29SVS_loss_and_inactivity_checkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SVS_loss_and_inactivity_check() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INACTIVITY_exec()
</UL>

<P><STRONG><a name="[195]"></a>TEST_ExecuteMemWriteOperation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, test_func.o(i._Z29TEST_ExecuteMemWriteOperationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TEST_ExecuteMemWriteOperation(char*, unsigned short, unsigned char) &rArr; OSAL_StrStr(char*, char*, unsigned, unsigned) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[a05]"></a>VideoQ_PurgeClosedWindowFiles()</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, videoq.o(i._Z29VideoQ_PurgeClosedWindowFilesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = VideoQ_PurgeClosedWindowFiles() &rArr; SendIPDEClosedCoverFailure(unsigned char, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDEClosedCoverFailure(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[75f]"></a>c_proc_Reset_Jamming_Detector()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, c_proc.o(i._Z29c_proc_Reset_Jamming_Detectorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = c_proc_Reset_Jamming_Detector() &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RefreshJDSupervision()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
</UL>

<P><STRONG><a name="[683]"></a>get_CONTROL_PANEL_comm_status()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z29get_CONTROL_PANEL_comm_statusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_CONTROL_PANEL_comm_status() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_STATUS_exec()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BypassToChannel(COMMUNICATION_CHANNEL_E)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BypassVideoChannel(COMMUNICATION_CHANNEL_E)
</UL>

<P><STRONG><a name="[a00]"></a>is_pre_alarm_rkp_notification()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, prealarm_handler.o(i._Z29is_pre_alarm_rkp_notificationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_pre_alarm_rkp_notification() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[9c]"></a>power_save_mode_entrance_exec()</STRONG> (Thumb, 1544 bytes, Stack size 40 bytes, power_save_mode_vf.o(i._Z29power_save_mode_entrance_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = power_save_mode_entrance_exec() &rArr; MSME_pause_msg(unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetNumOfPendingRequests()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAllPendingReqEmpty()
<LI><a href="#[c1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_INT_type(unsigned char)
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableSecondsInterrupts()
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableInterrupts()
<LI><a href="#[c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetIntIndCallback(void(*)(), unsigned char)
<LI><a href="#[c15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_DisableButtons()
<LI><a href="#[c1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EnableButtons()
<LI><a href="#[c19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ClearRfInterruptIndication()
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_GetRfInterruptIndication()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageReadyForCommand()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmControlReadyForCommand()
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmListenReadyForCommand()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_IsBusy()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_DIAL_RETRY_Idle()
<LI><a href="#[c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskDisableContextSwitch()
<LI><a href="#[c1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnableContextSwitch()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[c13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_IsTaskActive()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_set_codec_mode(int)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get220Status()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBattHandler()
<LI><a href="#[c11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandlerState()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_SAFETY_state()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_DIAL_PHONE_NUM_Idle()
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataLinkIdle()
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_PANIC_state()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmVoiceHandlerOn()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_G_PROC_Q_empty()
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_VOICE_TRANSMIT_Idle()
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_VOICE_RECEIVE_Idle()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_SMS_MESSAGE_Idle()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_GSM_MESSAGE_Idle()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_G_PROC_TRANSMIT_Idle()
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_gsm_init_state_idle()
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_suspend_status(unsigned char)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMProcFlags()
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterSirenOn()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCommStateIdle()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_C_PROC_Q_empty()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSaveFileIdle()
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfTransmitIdle()
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfReciveIdle()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGetPictureIdle()
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerSaveWithACTestFlag()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerSaveTestFlag()
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainPowerMsgStatus()
<LI><a href="#[c0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrPwrMsgFlag()
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_IP_APP_COMMAND_idle()
<LI><a href="#[c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRFIdle()
<LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPLL()
<LI><a href="#[c1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAbortWindowState()
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemGoPowerDown()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoVideoIdle()
<LI><a href="#[c16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN_DTMF_Reciever(unsigned char)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPreAlarmEntry()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_RAM_DB_Idle()
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSleepStatus()
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp()
<LI><a href="#[c17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsClearToSend()
<LI><a href="#[c1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_EINT_type()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVideoRFMachineIdle()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_msme_q()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQEmptyOrDeleted()
<LI><a href="#[c12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeIdle()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> power_save_mode_vf.o(i._Z29power_save_mode_entrance_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[896]"></a>process_c_proc_deployment_key(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, process_c_proc_messages.o(i._Z29process_c_proc_deployment_keyh12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = process_c_proc_deployment_key(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7d3]"></a>AddRecentVideoDetectionMessage(POSESO_CMD_TYPE_E)</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, process_income_message.o(i._Z30AddRecentVideoDetectionMessage17POSESO_CMD_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = AddRecentVideoDetectionMessage(POSESO_CMD_TYPE_E) &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b9d]"></a>AttackDbElementPeriodicalCheck(bool)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cyberattackstates.o(i._Z30AttackDbElementPeriodicalCheckb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AttackDbElementPeriodicalCheck(bool) &rArr; AttackDbElementExec(TAttackDataBase*, bool) &rArr; AttackDbElementClose(TAttackDataBase*)
</UL>
<BR>[Calls]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbElementExec(TAttackDataBase*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDbPeriodicalCheckGo(bool)
</UL>

<P><STRONG><a name="[c21]"></a>BUTTONS_MoreThanOneButtonPress(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, buttons_api.o(i._Z30BUTTONS_MoreThanOneButtonPressj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUTTONS_MoreThanOneButtonPress(unsigned) &rArr; BUTTONS_NumberOfButtonPressed(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_NumberOfButtonPressed(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[36a]"></a>BUTTONS_RecognizeButtonPressed()</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, buttons_api.o(i._Z30BUTTONS_RecognizeButtonPressedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BUTTONS_RecognizeButtonPressed() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_GetColValue()
<LI><a href="#[c23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_ActivateRow(unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[1c5]"></a>CPUI_Button_Status_Action_Func(unsigned char, S_CPUI_ButtonInfo*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z30CPUI_Button_Status_Action_FunchP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CPUI_Button_Status_Action_Func(unsigned char, S_CPUI_ButtonInfo*) &rArr; CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_KeyErrorFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChangeBadBeep() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterProgramFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[37c]"></a>CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, cpui_buttons_func.o(i._Z30CPUI_ButtonsPressHoldOnExpiredhPhPjS0_P17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = CPUI_ButtonsPressHoldOnExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*) &rArr; BUTTONS_EndButtonPressProcess(unsigned*, unsigned*, unsigned char*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_RecognizeButtonPressed()
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_NumberOfButtonPressed(unsigned)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EndButtonPressProcess(unsigned*, unsigned*, unsigned char*)
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_CheckValidButtonPress(unsigned char, unsigned char)
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_GetThePressedButtons(unsigned, unsigned char*, unsigned char*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[c1]"></a>C_PROC_SendDeviceVersions_exec()</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, c_proc.o(i._Z30C_PROC_SendDeviceVersions_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = C_PROC_SendDeviceVersions_exec() &rArr; MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillIvsBuffer(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z30C_PROC_SendDeviceVersions_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[bbd]"></a>C_PROC_process_KEY_FOB_signals(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_SIGNALS_E)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, process_c_proc_messages.o(i._Z30C_PROC_process_KEY_FOB_signalsP9S_KEY_FOBh10U_DEV_TYPE17KEY_FOB_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C_PROC_process_KEY_FOB_signals(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_SIGNALS_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[bdf]"></a>C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)</STRONG> (Thumb, 660 bytes, Stack size 72 bytes, process_c_proc_messages.o(i._Z30C_PROC_process_PINCODE_requestP13RKP_MSG_VAL_Uh10U_DEV_TYPEPhS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*) &rArr; C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateResetMachine(unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PINCODE_read(unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RKP_ptr(unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDigitButtonsDisabled(bool)
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare_duress(unsigned char*)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_event_action(E_CONTROL_PANEL_EVENT)
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare(unsigned char*)
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_NUMBER_ptr(unsigned short)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrongCodeMessage(unsigned char)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
</UL>

<P><STRONG><a name="[aa2]"></a>C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, process_c_proc_messages.o(i._Z30C_PROC_process_RF_SEC_ZONE_msgh10U_DEV_TYPEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[c27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFogGetBitExec()
<LI><a href="#[c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_build_msg(unsigned char*, unsigned char*, S_SEC_ZONE_ENTRY_DATA*, unsigned char)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[bde]"></a>C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, process_c_proc_messages.o(i._Z30C_PROC_process_RKP_ARM_requesthh10U_DEV_TYPEPhS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*) &rArr; FL_USER_write(unsigned char, unsigned char*, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_USER_access(S_USER*, unsigned char)
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIsRkpInstall()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_KPD_Ack(int)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
</UL>

<P><STRONG><a name="[a3c]"></a>CleanLastTransmissionFromQueue(unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, queuehandler.o(i._Z30CleanLastTransmissionFromQueueh))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = CleanLastTransmissionFromQueue(unsigned char) &rArr; SendSyncTxPacket(unsigned char**, unsigned char*, bool*, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLowGSMModemRSSIIndecator()
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSyncTxPacket(unsigned char**, unsigned char*, bool*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_REFRESH_MACHINE_exec()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[71a]"></a>Clear_Last_perimeter_Detection()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prealarm_handler.o(i._Z30Clear_Last_perimeter_Detectionv))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
</UL>

<P><STRONG><a name="[a21]"></a>DATALINK_drop_packet_processed()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, data_link_manager.o(i._Z30DATALINK_drop_packet_processedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DATALINK_drop_packet_processed() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_frame()
</UL>

<P><STRONG><a name="[6bd]"></a>DiagTest_BuildInfoBufferToSend(unsigned char*, unsigned short, unsigned char*, unsigned char, unsigned short*)</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, test_diag.o(i._Z30DiagTest_BuildInfoBufferToSendPhtS_hPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DiagTest_BuildInfoBufferToSend(unsigned char*, unsigned short, unsigned char*, unsigned char, unsigned short*) &rArr; getRLQValue(int, int) &rArr; C_PROC_RF_RSSI2RLQ(int) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetMaxNumberOfDevices(unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSIValue(int, int)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLQValue(int, int)
<LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_GetDeviceBatteryLevel(unsigned char, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_CheckIfDeviceValid(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[c29]"></a>DiagTest_GetDeviceBatteryLevel(unsigned char, unsigned char, unsigned char*, unsigned char*)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, test_diag.o(i._Z30DiagTest_GetDeviceBatteryLevelhhPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DiagTest_GetDeviceBatteryLevel(unsigned char, unsigned char, unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bfe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetGeneralTypeOffset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_BuildInfoBufferToSend(unsigned char*, unsigned short, unsigned char*, unsigned char, unsigned short*)
</UL>

<P><STRONG><a name="[9e]"></a>Erase_Flash_Sectors_Range_exec()</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, processflash.o(i._Z30Erase_Flash_Sectors_Range_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Erase_Flash_Sectors_Range_exec() &rArr; FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase(unsigned char, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> processflash.o(i._Z30Erase_Flash_Sectors_Range_execv)
</UL>
<P><STRONG><a name="[62e]"></a>FL_KEY_FOB_read_device_version(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fl_types.o(i._Z30FL_KEY_FOB_read_device_versionhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_KEY_FOB_read_device_version(unsigned char, unsigned char) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
</UL>

<P><STRONG><a name="[4f1]"></a>GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, gsm_api.o(i._Z30GSM_Control_API_EnterPowerSavehjtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[506]"></a>GSM_Control_API_VoiceCallClose(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gsm_api.o(i._Z30GSM_Control_API_VoiceCallClosehtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_VoiceCallClose(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[9c2]"></a>GSM_Control_StopModemGsmStatus()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z30GSM_Control_StopModemGsmStatusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GSM_Control_StopModemGsmStatus() &rArr; OSAL_StopTimerExt(unsigned short, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimerExt(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[609]"></a>GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, comm_common_funcs.o(i._Z30GSM_Turn_Off_Socket_Indicationhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char) &rArr; GSM_Message_End_TCP_Full_Msg_Cycle() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_End_TCP_Full_Msg_Cycle()
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteRegisteredCallBacks(unsigned char, unsigned char**, unsigned short, unsigned char)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnTransparency(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Streaming(void*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Listen(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[813]"></a>GetCyberSequenceDeltaThreshold()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cybermachine.o(i._Z30GetCyberSequenceDeltaThresholdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetCyberSequenceDeltaThreshold() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[90b]"></a>Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*)</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, do_it_yourself.o(i._Z30Get_DeviceID_Installed_InPanelhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_DeviceID_Installed_InPanel(unsigned char, unsigned char*) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RKP_read(unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteDevice(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[cb]"></a>IPDE_new_start_cover_test_exec()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, videoengine.o(i._Z30IPDE_new_start_cover_test_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = IPDE_new_start_cover_test_exec() &rArr; IPDE_new_send_open_rx(unsigned char*, unsigned char*) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[c2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_send_start_cover_test_msg(unsigned char)
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_send_open_rx(unsigned char*, unsigned char*)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> videoengine.o(i._Z30IPDE_new_start_cover_test_execv)
</UL>
<P><STRONG><a name="[c36]"></a>IfPosesoRfPoseseChainStateIdle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process_income_message.o(i._Z30IfPosesoRfPoseseChainStateIdlev))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryInformation_exe()
</UL>

<P><STRONG><a name="[ba9]"></a>MAINTEMANCE_get_RF_OPERATIONAL()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, maintenance.o(i._Z30MAINTEMANCE_get_RF_OPERATIONALv))
<BR><BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
</UL>

<P><STRONG><a name="[565]"></a>OSAL_FreeStackFromDeletedTasks()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, osal_db.o(i._Z30OSAL_FreeStackFromDeletedTasksv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSAL_FreeStackFromDeletedTasks() &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IdleTask()
</UL>

<P><STRONG><a name="[bfe]"></a>RFApiVSEG_GetGeneralTypeOffset(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfapivseg.o(i._Z30RFApiVSEG_GetGeneralTypeOffseth))
<BR><BR>[Called By]<UL><LI><a href="#[c29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_GetDeviceBatteryLevel(unsigned char, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7d0]"></a>Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, videoengine.o(i._Z30Request_video_some_or_all_pirshPh17SEQUENCER_LABEL_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Request_video_some_or_all_pirs(unsigned char, unsigned char*, SEQUENCER_LABEL_E) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_ivds()
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecentVideoDetectionMessage(POSESO_CMD_TYPE_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[26d]"></a>ResetKf3NeedBatteryInformation()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deviceupdatemachine.o(i._Z30ResetKf3NeedBatteryInformationv))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[906]"></a>RfDrv_GetRfInterruptIndication()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfdrv_api.o(i._Z30RfDrv_GetRfInterruptIndicationv))
<BR><BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemGoPowerDown()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[948]"></a>SMS_Message_Set_RSSI_Fail_Flag()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sms_message.o(i._Z30SMS_Message_Set_RSSI_Fail_Flagv))
<BR><BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
</UL>

<P><STRONG><a name="[191]"></a>TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, test_func.o(i._Z30TEST_ExecuteReadBlockOperationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteReadBlockOperation(char*, unsigned short, unsigned char) &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[40c]"></a>TEST_HandleReceivedCodecSample()</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, test_func.o(i._Z30TEST_HandleReceivedCodecSamplev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TEST_HandleReceivedCodecSample() &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
</UL>

<P><STRONG><a name="[c09]"></a>TEST_TestApplicationDeactivate()</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, test_api.o(i._Z30TEST_TestApplicationDeactivatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_TestApplicationDeactivate() &rArr; UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_set_TestApplicationOnOff(unsigned char, bool)
</UL>

<P><STRONG><a name="[acc]"></a>Triggger_Program_Flash_Subpage(unsigned long, unsigned char*, int)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, processflash.o(i._Z30Triggger_Program_Flash_SubpagemPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Triggger_Program_Flash_Subpage(unsigned long, unsigned char*, int) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[c2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowIndex()
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateFlashProgrammer()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[bb3]"></a>UART_GetNumOfRequestsAvailable(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_api.o(i._Z30UART_GetNumOfRequestsAvailableh))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteHelpOperation(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[c8]"></a>c_proc_SendRFDebugMessage_exec()</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, c_proc.o(i._Z30c_proc_SendRFDebugMessage_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = c_proc_SendRFDebugMessage_exec() &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z30c_proc_SendRFDebugMessage_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[89e]"></a>c_proc_process_Fog_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, c_proc.o(i._Z30c_proc_process_Fog_Error_stateh12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = c_proc_process_Fog_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[89f]"></a>c_proc_process_SKC_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, c_proc.o(i._Z30c_proc_process_SKC_Error_stateh12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = c_proc_process_SKC_Error_state(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
</UL>

<P><STRONG><a name="[924]"></a>get_ip_app_status_in_learn_bit()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip_app.o(i._Z30get_ip_app_status_in_learn_bitv))
<BR><BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
</UL>

<P><STRONG><a name="[ad2]"></a>rb_app_getDeviceRSUStartSector(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rb_app.o(i._Z30rb_app_getDeviceRSUStartSectorh))
<BR><BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPC_start_send_packet(unsigned char, unsigned char, unsigned char, unsigned short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[876]"></a>set_auto_learn_got_const_table()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, do_it_yourself.o(i._Z30set_auto_learn_got_const_tablev))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[875]"></a>set_ip_app_got_const_table_bit()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ip_app.o(i._Z30set_ip_app_got_const_table_bitv))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[336]"></a>tag_reader_get_last_arm_dev_id()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tag_reader.o(i._Z30tag_reader_get_last_arm_dev_idv))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[3fe]"></a>CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, codec_api.o(i._Z31CODEC_DigitalAudioClockPolarityhhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[c05]"></a>CPUI_Buttons_ConvertButtonToChr(unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z31CPUI_Buttons_ConvertButtonToChrh))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[35d]"></a>CPUI_UpdateInArrayTurnOnPartLed(unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cpui_func.o(i._Z31CPUI_UpdateInArrayTurnOnPartLedhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CPUI_UpdateInArrayTurnOnPartLed(unsigned char, unsigned char) &rArr; LED_UpdateInArrayTurnOnLed(unsigned char, unsigned char) &rArr; LED_UpdateLedStatusArray(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; LED_SetLedState(unsigned char*) &rArr; SSP_SendData(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_UpdateInArrayTurnOnLed(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_InitialBlinkLedAction(unsigned*, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[7ed]"></a>C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, c_proc.o(i._Z31C_PROC_SendTechnicalInformationttP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_signals(S_RKP*, U_DEV_TYPE, unsigned char, RKP_SIGNALS_E)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[bbe]"></a>C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)</STRONG> (Thumb, 2426 bytes, Stack size 136 bytes, process_c_proc_messages.o(i._Z31C_PROC_process_KEY_FOB_requestsP9S_KEY_FOBh10U_DEV_TYPE18KEY_FOB_REQUESTS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E) &rArr; PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE) &rArr; C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[bef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annex_alarm_in_memory()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_read(unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_DEVICE_operation(unsigned char, unsigned char)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_open_alarm()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKf3Status(S_KEY_FOB_ENTRY*, U_KEY_FOB_PARAMS*)
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_Find_Bypasses()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_set_current_user(unsigned char)
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKFLowBattPrevent(bool)
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_was_alarm()
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_ARM_request(S_KEY_FOB*, KEY_FOB_REQUESTS_E, unsigned char, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLabRFLine(int, bool, int, bool)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexKf3Disarm(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoPerimeterArmEnabled()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[aa6]"></a>C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, process_c_proc_messages.o(i._Z31C_PROC_process_RF_INPUT_DEV_msgh10U_DEV_TYPEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E) &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_supervisory_count_buf()
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_entry(unsigned char)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nible_by_id(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c30]"></a>C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)</STRONG> (Thumb, 1510 bytes, Stack size 64 bytes, process_c_proc_messages.o(i._Z31C_PROC_process_RF_INPUT_signalsP16RF_INPUT_ENTRY_S10U_DEV_TYPEh18RF_INPUT_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E) &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_IsPrevInputTlbMsgAcked(unsigned char)
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetInputTlbMsgWaitAck(unsigned char)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_SAFETY_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[c31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_DEV_clear_count(unsigned char)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSafetySnooze(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[be0]"></a>C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*)</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, process_c_proc_messages.o(i._Z31C_PROC_process_USER_ADD_requestPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_USER_ADD_request(unsigned char*, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModifyHandlingNotBusy()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_CODE_compare(unsigned char*)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
</UL>

<P><STRONG><a name="[899]"></a>CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 540 bytes, Stack size 88 bytes, c_proc.o(i._Z31CheckTemperatureForExtremeValueh12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_status(unsigned char)
<LI><a href="#[c33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_extreme_temp_supervisory_count_buf()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_supervisory_count_buf()
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceTypeIndex(C_DEV_TYPE_E)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nible_by_id(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[87d]"></a>FL_KEY_FOB_write_device_version(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, fl_types.o(i._Z31FL_KEY_FOB_write_device_versionhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FL_KEY_FOB_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8bb]"></a>GSM_Control_API_SetFwUpRecovery()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gsm_api.o(i._Z31GSM_Control_API_SetFwUpRecoveryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Control_API_SetFwUpRecovery()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[504]"></a>GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, gsm_api.o(i._Z31GSM_Control_API_VoiceCallAnswerhtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; GSM_Streaming_API_SendEndOfSession(unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[c35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendEndOfSession(unsigned char)
<LI><a href="#[c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendEndOfSession(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[b0]"></a>GetDeviceBatteryInformation_exe()</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, devicebatterystate.o(i._Z31GetDeviceBatteryInformation_exev))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = GetDeviceBatteryInformation_exe() &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_DEV_read(unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[c36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IfPosesoRfPoseseChainStateIdle()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> devicebatterystate.o(i._Z31GetDeviceBatteryInformation_exev)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[bb]"></a>INCOME_MESSAGE_power_cycle_exec()</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, process_income_message.o(i._Z31INCOME_MESSAGE_power_cycle_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = INCOME_MESSAGE_power_cycle_exec() &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Reset()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQempty()
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_get_busy()
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageBeforeReset(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> process_income_message.o(i._Z31INCOME_MESSAGE_power_cycle_execv)
</UL>
<P><STRONG><a name="[31f]"></a>INIT_get_installation_completed()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(i._Z31INIT_get_installation_completedv))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_PlugoutActions()
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTEMANCE_get_IC()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiDelEntHandler_exec()
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_reset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
</UL>

<P><STRONG><a name="[807]"></a>INIT_set_installation_completed(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, init.o(i._Z31INIT_set_installation_completedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = INIT_set_installation_completed(unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCheckActivationCode(unsigned char*)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_decode_command(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[c37]"></a>MSME_SetRfDetectorTlbMsgWaitAck(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, msme.o(i._Z31MSME_SetRfDetectorTlbMsgWaitAckh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSME_SetRfDetectorTlbMsgWaitAck(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
</UL>

<P><STRONG><a name="[a8a]"></a>OSAL_DebugGetHeapOverflowVector()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_heap.o(i._Z31OSAL_DebugGetHeapOverflowVectorv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[34d]"></a>OSAL_PriorityQueueDeleteElement(OSAL_PriorityQueue*, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osal_priority_queue.o(i._Z31OSAL_PriorityQueueDeleteElementP18OSAL_PriorityQueuet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OSAL_PriorityQueueDeleteElement(OSAL_PriorityQueue*, unsigned short) &rArr; OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**) &rArr; MaxHeapify(unsigned short, unsigned short, OSAL_PriorityQueueElement*)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreasePriority(unsigned short, unsigned short, unsigned, OSAL_PriorityQueueElement*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[b18]"></a>RFApiVSEG_GetMaxNumberOfDevices(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfapivseg.o(i._Z31RFApiVSEG_GetMaxNumberOfDevicesh))
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_BuildInfoBufferToSend(unsigned char*, unsigned short, unsigned char*, unsigned char, unsigned short*)
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteGroupTypeDevices(unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DisplayAllDevices(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[8cc]"></a>RF_Input_Maintenance_processing(unsigned char*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, incomingbufferparser.o(i._Z31RF_Input_Maintenance_processingPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = RF_Input_Maintenance_processing(unsigned char*) &rArr; GetDeviceInfoResp(unsigned char*) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFailureCounter(unsigned char, eRX_Failure_Cmd)
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceInfoResp(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomeNewProtocol(unsigned char*)
</UL>

<P><STRONG><a name="[a32]"></a>RF_SerialNumberCheckInMemoryMap(DEVICE_TYPE, unsigned char*)</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rfseialnumbercheckinmemorymap.o(i._Z31RF_SerialNumberCheckInMemoryMap11DEVICE_TYPEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_SerialNumberCheckInMemoryMap(DEVICE_TYPE, unsigned char*) &rArr; get_ENTRY_ID_via_SerialNumber(unsigned char*, unsigned char*(*)(unsigned char), unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ENTRY_ID_via_SerialNumber(unsigned char*, unsigned char*(*)(unsigned char), unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildMasterLearnPayLoad(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[2ea]"></a>RamRfSec_GetFogWiredContactType(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ram_rf_sec_zone.o(i._Z31RamRfSec_GetFogWiredContactTypeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RamRfSec_GetFogWiredContactType(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_WiredModelConfig(unsigned char*, void*)
</UL>

<P><STRONG><a name="[4ad]"></a>SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)</STRONG> (Thumb, 912 bytes, Stack size 88 bytes, security.o(i._Z31SECURITY_handle_controlled_userhh10U_DEV_TYPEhhP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CURRENT_USER_id()
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinCodeEntryTime()
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPerimeterArmDisarmMsg(CODE_ARGUMENT_U*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexKf3Disarm(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[334]"></a>SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, siren.o(i._Z31SIREN_send_new_protocol_commandhthPhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool) &rArr; tag_reader_IsEfmTr5WithEntryBeeps() &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidSirenEntry()
<LI><a href="#[c39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_IsEfmTr5WithEntryBeeps()
<LI><a href="#[bff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_tr5_entry_beep_builder(unsigned char*)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityISNSirenAfterSafety(unsigned char)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff_ForModems()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeter_entry_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest_exec()
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticAlarmDingDong(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRepeatRkpStatus()
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_actions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_PARTITION_TYPE_E, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_star_button(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirensOper(int, int, int*, void*)
</UL>

<P><STRONG><a name="[192]"></a>TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, test_func.o(i._Z31TEST_ExecuteWriteBlockOperationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteWriteBlockOperation(char*, unsigned short, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[411]"></a>TEST_FinishCodecSampleOperation()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, test_func.o(i._Z31TEST_FinishCodecSampleOperationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_FinishCodecSampleOperation() &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestManager(void*)
</UL>

<P><STRONG><a name="[423]"></a>UART_SendTxBufferMsgByInterrupt(unsigned, unsigned char, unsigned char*, unsigned)</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, uart_func.o(i._Z31UART_SendTxBufferMsgByInterruptjhPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_SendTxBufferMsgByInterrupt(unsigned, unsigned char, unsigned char*, unsigned) &rArr; DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*) &rArr; OSAL_GetSelfTaskId()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllocatedChannelId(unsigned char)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
</UL>

<P><STRONG><a name="[4d6]"></a>UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, fl_entry.o(i._Z31UPDATE_FIELD_ENTRY_EEprom_writethPhPjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRSSIValue(int, int, unsigned char)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCyberMode(unsigned char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_timer(unsigned char, unsigned char)
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_USER_access(S_USER*, unsigned char)
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamControlPanelClearLowBattIndication()
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_gen_inactivity(bool)
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_inactivity(unsigned char, bool)
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetSKMaskingDelay(unsigned char)
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_bypass(unsigned char, bool)
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetFogWiredMode(unsigned char, unsigned char, unsigned char)
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_sec_set_or_clr_chime(unsigned char, bool)
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_SetPhotoDelay(unsigned char*)
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustOPDDSensitivity(int, int)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[88c]"></a>c_proc_SendStatusOrResponseToJD(bool)</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, c_proc.o(i._Z31c_proc_SendStatusOrResponseToJDb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = c_proc_SendStatusOrResponseToJD(bool) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioAPI_GetLastPacketMsgRSSI()
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RSSITodBm(signed char)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is220vON_VF()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGSMJamming()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[8a0]"></a>c_proc_process_BIT_Result_state(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, c_proc.o(i._Z31c_proc_process_BIT_Result_stateh12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = c_proc_process_BIT_Result_state(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a17]"></a>get_next_ready_C_PROC_EVENT_ptr()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, c_proc_q.o(i._Z31get_next_ready_C_PROC_EVENT_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_next_ready_C_PROC_EVENT_ptr() &rArr; GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[9b7]"></a>get_next_ready_G_PROC_EVENT_ptr()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsmq.o(i._Z31get_next_ready_G_PROC_EVENT_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_next_ready_G_PROC_EVENT_ptr() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[bbf]"></a>ram_dial_video_sequence_GET_ptr(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ram_dial_seq.o(i._Z31ram_dial_video_sequence_GET_ptri))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ram_dial_video_sequence_GET_ptr(int) &rArr; FL_VIDEO_DIAL_SEQUENCE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VIDEO_DIAL_SEQUENCE_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_RETRY_open_video_call(S_MESSAGE_COMM_INFO*, VIDEO_SCENARIO_TYPE_E)
</UL>

<P><STRONG><a name="[996]"></a>AnnexFindEmptyEntryDetectionSlot()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, annex.o(i._Z32AnnexFindEmptyEntryDetectionSlotv))
<BR><BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAddAlarmToList(int, RF_DETECTOR_SIGNALS_E)
</UL>

<P><STRONG><a name="[c3c]"></a>CMNG_InitTestAndProductionParams(unsigned char)</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, systemparam.o(i._Z32CMNG_InitTestAndProductionParamsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CMNG_InitTestAndProductionParams(unsigned char) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioAPI_FreqToRegister(void*, void*, unsigned)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_Close(TWriteVirtualSnObj*)
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVirtualSnObj_Close(TReadVirtualSnObj*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[7d7]"></a>CONTROL_PANEL_set_gen_inactivity(bool)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ram_control_panel.o(i._Z32CONTROL_PANEL_set_gen_inactivityb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = CONTROL_PANEL_set_gen_inactivity(bool) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysinactivity_ptr()
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[37e]"></a>CPUI_Buttons_StopGoodPinCodeFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z32CPUI_Buttons_StopGoodPinCodeFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[367]"></a>CPUI_GetNextActiveEventToRefresh(unsigned short*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cpui_func.o(i._Z32CPUI_GetNextActiveEventToRefreshPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPUI_GetNextActiveEventToRefresh(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[36d]"></a>CPUI_ResetNumOfTicksBetweenPress()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z32CPUI_ResetNumOfTicksBetweenPressv))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[77a]"></a>C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, c_proc.o(i._Z32C_PROC_SendLowBatteryInformation10MSME_MSG_E10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDevSupportBatteryInf(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_signals(RF_INPUT_ENTRY_S*, U_DEV_TYPE, unsigned char, RF_INPUT_SIGNALS_E)
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_SIREN_signals(S_SIREN*, U_DEV_TYPE, unsigned char, SIREN_SIGNALS_E)
</UL>

<P><STRONG><a name="[3c0]"></a>C_PROC_get_received_ldevices_ack()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, c_proc.o(i._Z32C_PROC_get_received_ldevices_ackv))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfDbMatch()
</UL>

<P><STRONG><a name="[aa8]"></a>C_PROC_process_CONTROL_PANEL_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, process_c_proc_messages.o(i._Z32C_PROC_process_CONTROL_PANEL_msgh10U_DEV_TYPEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_CONTROL_PANEL_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E) &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[aa7]"></a>C_PROC_process_RF_OUTPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, process_c_proc_messages.o(i._Z32C_PROC_process_RF_OUTPUT_DEV_msgh10U_DEV_TYPEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RF_OUTPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*) &rArr; SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_OUTPUT_DEV_ptr(int)
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nible_by_id(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[bf3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_get_supervisory_count_buf()
<LI><a href="#[c3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUTPUT_signals(S_RF_OUTPUT_DEV*, U_DEV_TYPE, unsigned char, RF_OUTPUT_SIGNALS_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c3d]"></a>C_PROC_process_RF_OUTPUT_signals(S_RF_OUTPUT_DEV*, U_DEV_TYPE, unsigned char, RF_OUTPUT_SIGNALS_E)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, process_c_proc_messages.o(i._Z32C_PROC_process_RF_OUTPUT_signalsP15S_RF_OUTPUT_DEV10U_DEV_TYPEh19RF_OUTPUT_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RF_OUTPUT_signals(S_RF_OUTPUT_DEV*, U_DEV_TYPE, unsigned char, RF_OUTPUT_SIGNALS_E) &rArr; LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUTPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c02]"></a>C_PROC_set_status_force_ac_fault()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c_proc.o(i._Z32C_PROC_set_status_force_ac_faultv))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[87e]"></a>FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fl_types.o(i._Z32FL_RF_INPUT_write_device_versionhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8f2]"></a>FileHandlerIndexNotAlreadyInList(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, filehandler.o(i._Z32FileHandlerIndexNotAlreadyInListh))
<BR><BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookForTheOldstFile_exec()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeveFileName_exec()
</UL>

<P><STRONG><a name="[5a9]"></a>FileHandler_OldSpecialVideoReady(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, filehandler.o(i._Z32FileHandler_OldSpecialVideoReadyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = FileHandler_OldSpecialVideoReady(unsigned char) &rArr; FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool) &rArr; SendIPDEClosedCoverFailure(unsigned char, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileHandlerVerifyVideoFile(unsigned char, unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c34]"></a>GSM_Message_API_SendEndOfSession(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gsm_api.o(i._Z32GSM_Message_API_SendEndOfSessionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GSM_Message_API_SendEndOfSession(unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[9be]"></a>GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gsm_api.o(i._Z32GSM_Streaming_API_ReturnToOnlinehtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmStreamingReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[27f]"></a>I2C_UpdatePendingRequestCounters(unsigned char, signed char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_func.o(i._Z32I2C_UpdatePendingRequestCountersha))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
</UL>

<P><STRONG><a name="[79]"></a>Iridium_15_maintenance_scheduler()</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, scheduler.o(i._Z32Iridium_15_maintenance_schedulerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = Iridium_15_maintenance_scheduler() &rArr; MP_PROTOCL_MACHINE_exec() &rArr; EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*) &rArr; MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*) &rArr; SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*) &rArr; SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*) &rArr; tag_reader_decode_message(unsigned char, unsigned char*, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_MACHINE_exec()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFP_APP_COMMAND_exec()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_PROTOCL_MACHINE_exec()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_PROTOCL_MACHINE_exec()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_PROTOCL_MACHINE_exec()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_MACHINE_exec()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_COMMAND_exec()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_MACHINE_exec()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_MACHINE_exec()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scheduler.o(i._Z32Iridium_15_maintenance_schedulerv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[b92]"></a>Is_Wait_for_boot_condition_Ready()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rb_app.o(i._Z32Is_Wait_for_boot_condition_Readyv))
<BR><BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[c3e]"></a>MSME_IsPrevRfDetectorTlbMsgAcked(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, msme.o(i._Z32MSME_IsPrevRfDetectorTlbMsgAckedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSME_IsPrevRfDetectorTlbMsgAcked(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
</UL>

<P><STRONG><a name="[a88]"></a>OSAL_DebugGetStackOverflowVector()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_debug_services.o(i._Z32OSAL_DebugGetStackOverflowVectorv))
<BR><BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[c1d]"></a>OSAL_PortTaskEnableContextSwitch()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, osal_port.o(i._Z32OSAL_PortTaskEnableContextSwitchv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[2a0]"></a>OSAL_PortTaskExitCriticalSection()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, osal_port.o(i._Z32OSAL_PortTaskExitCriticalSectionv))
<BR><BR>[Calls]<UL><LI><a href="#[c3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSectionAsm
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResetWatchdog()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetGPOPin(unsigned char, unsigned char, unsigned char)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ClrGPIInt(unsigned char, unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgToGPIO(unsigned char, unsigned char, unsigned char)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnablePeripheralPower(unsigned char)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeAndDate(RTC_Time_t*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate(unsigned char, unsigned char, unsigned short)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableUart1Tx()
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableUart0Tx()
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableUart1Tx()
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableUart0Tx()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_DetachGprs(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(unsigned char, unsigned char*)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferClear(OSAL_CyclicBuffer*)
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetAudioConfiguration(unsigned char, unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallClose(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallDial(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_CloseOdmGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_AnswerCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendSMS(unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStatusRoutineActive()
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGetDataSize(OSAL_CyclicBuffer*)
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetGsmStatus(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check_sectors(unsigned, unsigned)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_RAM2Flash(unsigned char*, unsigned char*, unsigned, unsigned)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sectors(unsigned, unsigned)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_HwPowerSaveControl(unsigned char)
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetONOFFsignalHE910(int)
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetModemPinsHE910()
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetIGNsignalHE910(int)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListInsertToHead(unsigned char, OSAL_List*, void*)
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDeleteTail(OSAL_List*)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_Task_API_FTPGetFile(char*, char*, char*, char*, char*, void*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapCheckOverrun(unsigned char*)
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapCheckUsage(unsigned, unsigned char)
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGet(OSAL_CyclicBuffer*, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDeleteHead(OSAL_List*)
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_G_PROC_EVENT_ptr()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate(unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedPll()
</UL>

<P><STRONG><a name="[282]"></a>OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**)</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, osal_priority_queue.o(i._Z32OSAL_PriorityQueueExtractMaxFuncP18OSAL_PriorityQueuePPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OSAL_PriorityQueueExtractMaxFunc(OSAL_PriorityQueue*, void**) &rArr; MaxHeapify(unsigned short, unsigned short, OSAL_PriorityQueueElement*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxHeapify(unsigned short, unsigned short, OSAL_PriorityQueueElement*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvExtractFromQ(OSAL_PriorityQueue*)
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQMemCopy(OSAL_PriorityQueue*, unsigned char*, unsigned, S_COMM_STM_RX_MNG_BUFFER_WITH_LEN**)
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMsgFromMuxQ(OSAL_PriorityQueue*)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMsgFromQ(OSAL_PriorityQueue*)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConcMsgFromQ(OSAL_PriorityQueue*, unsigned char*, unsigned, unsigned char)
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManagementTask(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueDeleteElement(OSAL_PriorityQueue*, unsigned short)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_WriteMsg(unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[803]"></a>RFApiVSEG_SetTestModeSupervisory(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfapivseg.o(i._Z32RFApiVSEG_SetTestModeSupervisoryh))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[c19]"></a>RfDrv_ClearRfInterruptIndication()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rfdrv_api.o(i._Z32RfDrv_ClearRfInterruptIndicationv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[8aa]"></a>SMS_MESSAGE_SendSTUNIfConfigured()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sms_message.o(i._Z32SMS_MESSAGE_SendSTUNIfConfiguredv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SMS_MESSAGE_SendSTUNIfConfigured() &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_STUN_read()
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelArmed()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
</UL>

<P><STRONG><a name="[7ef]"></a>SMS_message_Open_data_connection(unsigned char*)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, sms_message.o(i._Z32SMS_message_Open_data_connectionPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SMS_message_Open_data_connection(unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[5ab]"></a>Send_Perimeter_Detection_Message(int)</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, process_c_proc_messages.o(i._Z32Send_Perimeter_Detection_Messagei))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Send_Perimeter_Detection_Message(int) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart2(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart1(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVideoReady(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
</UL>

<P><STRONG><a name="[bcf]"></a>SetValidMsgRcvd4JammingDetection()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z32SetValidMsgRcvd4JammingDetectionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetValidMsgRcvd4JammingDetection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemParamsPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EarlyPacketFiltering(unsigned char*)
</UL>

<P><STRONG><a name="[b0e]"></a>VideoEngine_BuildVidParamsBuffer(unsigned char*, unsigned char, RF_SEC_ZONE_TYPE_E)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, videoengine.o(i._Z32VideoEngine_BuildVidParamsBufferPhh18RF_SEC_ZONE_TYPE_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VideoEngine_BuildVidParamsBuffer(unsigned char*, unsigned char, RF_SEC_ZONE_TYPE_E) &rArr; GetVideoEntry(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoEntry(unsigned char, unsigned char)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTENDED_CP_PARAMS_READ()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_VideoParamsConfig(unsigned char*, void*)
</UL>

<P><STRONG><a name="[c6]"></a>c_proc_SendJDConfigMessages_exec()</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, c_proc.o(i._Z32c_proc_SendJDConfigMessages_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = c_proc_SendJDConfigMessages_exec() &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z32c_proc_SendJDConfigMessages_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[9a3]"></a>get_next_ready_RF_PROC_EVENT_ptr()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rfq.o(i._Z32get_next_ready_RF_PROC_EVENT_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_next_ready_RF_PROC_EVENT_ptr() &rArr; GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[55f]"></a>ram_rf_input_dev_GetRFInputError()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ram_rf_input_dev.o(i._Z32ram_rf_input_dev_GetRFInputErrorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ram_rf_input_dev_GetRFInputError()
</UL>
<BR>[Calls]<UL><LI><a href="#[c42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFInputTamperFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[856]"></a>BUTTONS_SoftwareButtonPressUpdate(unsigned*, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buttons_api.o(i._Z33BUTTONS_SoftwareButtonPressUpdatePjh))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PressButton(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[372]"></a>CPUI_Button_CheckMasterPinForProg(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z33CPUI_Button_CheckMasterPinForProgP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_Button_CheckMasterPinForProg(S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckSlaveCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[b53]"></a>CPUI_Buttons_StartGoodPinCodeFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z33CPUI_Buttons_StartGoodPinCodeFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_StartGoodPinCodeFunc(S_CPUI_ButtonInfo*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeGoodBeep()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[369]"></a>CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, cpui_api.o(i._Z33CPUI_PerformNextRefreshPanelStateht))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetTriggerOrLevelState(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[384]"></a>CPUI_UpdateNumOfTicksBetweenPress()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z33CPUI_UpdateNumOfTicksBetweenPressv))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[46e]"></a>C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, c_proc.o(i._Z33C_PROC_process_rf_sec_zone_statusP25Inf4SendTechinfInfoTask_tP11ItrStatus_tPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = C_PROC_process_rf_sec_zone_status(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, bool) &rArr; Timer_GetRssiIndBmValue(int, int) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceTemperatureReading(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[897]"></a>CleanOneCellFromServerKeyFogTable(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, requestfogserverkey.o(i._Z33CleanOneCellFromServerKeyFogTableh))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7de]"></a>DecisionAboutPosesoPoseseFogChain(COMM_STATUS_INPANEL_E)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, msme.o(i._Z33DecisionAboutPosesoPoseseFogChain21COMM_STATUS_INPANEL_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = DecisionAboutPosesoPoseseFogChain(COMM_STATUS_INPANEL_E) &rArr; StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStateChangeMsg()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[ac1]"></a>DiagTest_SaveAllBatteryLevelToRam(unsigned char*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, test_diag.o(i._Z33DiagTest_SaveAllBatteryLevelToRamPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = DiagTest_SaveAllBatteryLevelToRam(unsigned char*, unsigned char) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
</UL>

<P><STRONG><a name="[3a4]"></a>FLASH_UpdatePendingRequestCounter(unsigned char, signed char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash_func.o(i._Z33FLASH_UpdatePendingRequestCounterha))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[87f]"></a>FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, fl_types.o(i._Z33FL_RF_OUTPUT_write_device_versionhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_INPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ba4]"></a>FOR_ALL_RF_SEC_ZONES_set_t_bypass(unsigned char, unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ram_rf_sec_zone.o(i._Z33FOR_ALL_RF_SEC_ZONES_set_t_bypasshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FOR_ALL_RF_SEC_ZONES_set_t_bypass(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c43]"></a>GSM_Control_API_GetFwUpInProgress()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_api.o(i._Z33GSM_Control_API_GetFwUpInProgressv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Control_API_GetFwUpInProgress()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[8dc]"></a>GSM_Control_API_GetRingIndication()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_api.o(i._Z33GSM_Control_API_GetRingIndicationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Control_API_GetRingIndication()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_process_exec()
</UL>

<P><STRONG><a name="[6d8]"></a>GSM_Control_API_SetFwUpInProgress(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gsm_api.o(i._Z33GSM_Control_API_SetFwUpInProgressj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_SetFwUpInProgress(unsigned) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[9bf]"></a>GSM_Turn_On_ODM_Socket_Indication(unsigned char, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gsm_stm_streaming.o(i._Z33GSM_Turn_On_ODM_Socket_Indicationhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GSM_Turn_On_ODM_Socket_Indication(unsigned char, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[2cd]"></a>INCOME_MESSAGE_VIDEO_ack_received()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process_income_message.o(i._Z33INCOME_MESSAGE_VIDEO_ack_receivedv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[6f9]"></a>INCOME_MESSAGE_clear_ack_received()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process_income_message.o(i._Z33INCOME_MESSAGE_clear_ack_receivedv))
<BR><BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[b7b]"></a>InternalFlash_GetInternalIdLength(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, internalflash_api.o(i._Z33InternalFlash_GetInternalIdLengtht))
<BR><BR>[Called By]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FUNC_FLASH_READ_ID(char*, unsigned short)
</UL>

<P><STRONG><a name="[a89]"></a>MSME_send_Embedded_Diagnostic_msg(unsigned short, unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, msme.o(i._Z33MSME_send_Embedded_Diagnostic_msgth))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MSME_send_Embedded_Diagnostic_msg(unsigned short, unsigned char) &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[c0b]"></a>OSAL_PortSendMessageToTaskFromInt(void*, void*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, osal_port.o(i._Z33OSAL_PortSendMessageToTaskFromIntPvS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
</UL>

<P><STRONG><a name="[c18]"></a>OSAL_PortTaskDisableContextSwitch()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osal_port.o(i._Z33OSAL_PortTaskDisableContextSwitchv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[1f7]"></a>OSAL_PortTaskEnterCriticalSection()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, osal_port.o(i._Z33OSAL_PortTaskEnterCriticalSectionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSectionAsm
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResetWatchdog()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetGPOPin(unsigned char, unsigned char, unsigned char)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ClrGPIInt(unsigned char, unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgToGPIO(unsigned char, unsigned char, unsigned char)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CfgGPIPin(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadFunc(unsigned char, unsigned, unsigned char*, unsigned, unsigned char, unsigned*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnablePeripheralPower(unsigned char)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeAndDate(RTC_Time_t*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeAndDate(RTC_Time_t*)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate(unsigned char, unsigned char, unsigned short)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableUart1Tx()
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableUart0Tx()
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableUart1Tx()
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableUart0Tx()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Acquire(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, void(*)(OSAL_CyclicBuffer*, unsigned short), unsigned char, unsigned short*)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_DetachGprs(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_HE910_Power_Enable(bool)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTableToHandle(S_GSM_FUNC_TABLE_HANDLE*, unsigned char, unsigned char, char*, unsigned short)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_Init(unsigned char, unsigned short, unsigned short, unsigned char, unsigned, void(*)(OSAL_CyclicBuffer*, unsigned short), void(*)(OSAL_CyclicBuffer*), unsigned char, unsigned*, unsigned short*)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(unsigned char, unsigned char*)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferClear(OSAL_CyclicBuffer*)
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetAudioConfiguration(unsigned char, unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReturnToOnline(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallClose(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_EnterPowerSave(unsigned char, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallDial(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_CloseOdmGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFOTA(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenGPRS(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_CloseFTP(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_SendOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Listen_API_OpenOdmGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_ReadFTP(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_OpenFTP(unsigned char, char*, unsigned short, char*, unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_AnswerCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_OpenGPRS(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendSMS(unsigned char, char*, unsigned short, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendCSD(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_OpenCSD(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStatusRoutineActive()
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_GetIp(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnRegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGetDataSize(OSAL_CyclicBuffer*)
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SetGsmStatus(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Message_API_CloseGPRS(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferExtract(OSAL_CyclicBuffer*, unsigned char*, unsigned short)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_CloseCSD(unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparate_sectors_for_write(unsigned, unsigned)
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check_sectors(unsigned, unsigned)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_RAM2Flash(unsigned char*, unsigned char*, unsigned, unsigned)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sectors(unsigned, unsigned)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_HwPowerSaveControl(unsigned char)
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetONOFFsignalHE910(int)
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetModemPinsHE910()
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetIGNsignalHE910(int)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_WriteCmd(unsigned char, S_GSM_FUNC_TABLE_HANDLE*)
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListInsertToHead(unsigned char, OSAL_List*, void*)
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDeleteTail(OSAL_List*)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_PlayStart(unsigned char, unsigned short, unsigned char, unsigned short, unsigned char, unsigned*)
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSU_Task_API_FTPGetFile(char*, char*, char*, char*, char*, void*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapCheckOverrun(unsigned char*)
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapCheckUsage(unsigned, unsigned char)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Reset()
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferGet(OSAL_CyclicBuffer*, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_SendMessage(unsigned char*, unsigned, unsigned char, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_Register(unsigned char*, unsigned short*, unsigned, unsigned char*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformNextRefreshPanelState(unsigned char, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDeleteHead(OSAL_List*)
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_ready_G_PROC_EVENT_ptr()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate(unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FlashFile_CRC32_exec()
<LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedPll()
</UL>

<P><STRONG><a name="[b1a]"></a>RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)</STRONG> (Thumb, 248 bytes, Stack size 168 bytes, rfapivseg.o(i._Z33RFApiVSEG_SendConfigOnOldProtocolhhhhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; QueueHandler1(unsigned char) &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_Or_PIR_ConfigCheck(unsigned char*)
</UL>

<P><STRONG><a name="[8cb]"></a>RF_Input_configuration_processing(unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, incomingbufferparser.o(i._Z33RF_Input_configuration_processingPh))
<BR><BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomeNewProtocol(unsigned char*)
</UL>

<P><STRONG><a name="[3db]"></a>RF_SEC_ZONE_num_supervisory_fault()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ram_rf_sec_zone.o(i._Z33RF_SEC_ZONE_num_supervisory_faultv))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_exec()
</UL>

<P><STRONG><a name="[b40]"></a>SECURITY_maintenance_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, security.o(i._Z33SECURITY_maintenance_transactionsP11S_SEC_EVENTP23U_SECURITY_FAULT_STATUS16SECURITY_EVENT_EhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SECURITY_maintenance_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[4b3]"></a>SECURITY_set_perimeter_arm_status(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, security.o(i._Z33SECURITY_set_perimeter_arm_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SECURITY_set_perimeter_arm_status(unsigned char) &rArr; Stop_Entry_Exit_Beeps() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Entry_Exit_Beeps()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
</UL>

<P><STRONG><a name="[bf5]"></a>SUPERVISORY_msme_rf_in_active_msg(RF_INPUT_DEV_TYPE_E)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, supervisory.o(i._Z33SUPERVISORY_msme_rf_in_active_msg19RF_INPUT_DEV_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_active_msg(U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a02]"></a>Security_TriggerDelayedSliderTest()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, security.o(i._Z33Security_TriggerDelayedSliderTestv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Security_TriggerDelayedSliderTest() &rArr; Security_SetSliderWindowTest() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_SetSliderWindowTest()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
</UL>

<P><STRONG><a name="[89d]"></a>c_proc_process_camera_cover_state(unsigned char, C_DEV_TYPE_E, unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, c_proc.o(i._Z33c_proc_process_camera_cover_stateh12C_DEV_TYPE_EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = c_proc_process_camera_cover_state(unsigned char, C_DEV_TYPE_E, unsigned char*) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[677]"></a>ram_control_panel_GetTagOperation()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z33ram_control_panel_GetTagOperationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ram_control_panel_GetTagOperation() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_star_button(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[c39]"></a>tag_reader_IsEfmTr5WithEntryBeeps()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tag_reader.o(i._Z33tag_reader_IsEfmTr5WithEntryBeepsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tag_reader_IsEfmTr5WithEntryBeeps() &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[370]"></a>CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z34CPUI_Buttons_PerformPinCodeActionsP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_StartGoodPinCodeFunc(S_CPUI_ButtonInfo*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckSlaveCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_StartGoodPinCodeFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_ResetButtonsFunc(S_CPUI_ButtonInfo*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[c2f]"></a>C_PROC_process_KEY_FOB_ARM_request(S_KEY_FOB*, KEY_FOB_REQUESTS_E, unsigned char, unsigned char, unsigned char, U_DEV_TYPE)</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, process_c_proc_messages.o(i._Z34C_PROC_process_KEY_FOB_ARM_requestP9S_KEY_FOB18KEY_FOB_REQUESTS_Ehhh10U_DEV_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = C_PROC_process_KEY_FOB_ARM_request(S_KEY_FOB*, KEY_FOB_REQUESTS_E, unsigned char, unsigned char, unsigned char, U_DEV_TYPE) &rArr; SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char) &rArr; IsAttackStateBlock(C_DEV_TYPE_E, unsigned char) &rArr; IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_force_arm_desicion_4_open_zone_proc(U_KEY_FOB_STATUS*, SECURITY_EVENT_E*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
</UL>

<P><STRONG><a name="[bb5]"></a>C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)</STRONG> (Thumb, 3772 bytes, Stack size 72 bytes, process_c_proc_messages.o(i._Z34C_PROC_process_RF_SEC_ZONE_signalsP13S_RF_SEC_ZONE10U_DEV_TYPE21RF_DETECTOR_SIGNALS_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char) &rArr; C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendLowBatteryInformation(MSME_MSG_E, U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gsm_coverage_message(unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetRssiIndBmValue(int, int)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_RFM_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_open_alarm()
<LI><a href="#[c3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_IsPrevRfDetectorTlbMsgAcked(unsigned char)
<LI><a href="#[c37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_SetRfDetectorTlbMsgWaitAck(unsigned char)
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_monitor()
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelTamperBypass()
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterMagnet(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFgPhotoTable(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart2(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart1(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[b8]"></a>Clear_Specific_Device_Machine_Exec()</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, deviceupdatemachine.o(i._Z34Clear_Specific_Device_Machine_Execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Clear_Specific_Device_Machine_Exec() &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRamRemoteParamStatTbl(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
<LI> deviceupdatemachine.o(i._Z34Clear_Specific_Device_Machine_Execv)
</UL>
<P><STRONG><a name="[53a]"></a>FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fl_types.o(i._Z34FL_RF_SEC_ZONE_read_device_versionhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMajorAndMinorVersions(unsigned char, unsigned char)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceUpdateCheck_exec()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_Or_PIR_ConfigCheck(unsigned char*)
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDefectTr5Version(DEVICE_TYPE, unsigned char)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTargetType(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ba5]"></a>FOR_ALL_RF_SEC_ZONES_set_t_bypass2(unsigned char, unsigned char)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ram_rf_sec_zone.o(i._Z34FOR_ALL_RF_SEC_ZONES_set_t_bypass2hh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FOR_ALL_RF_SEC_ZONES_set_t_bypass2(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6d7]"></a>GSM_Control_End_CSD_Full_Msg_Cycle()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsm_stm_control.o(i._Z34GSM_Control_End_CSD_Full_Msg_Cyclev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GSM_Control_End_CSD_Full_Msg_Cycle() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
</UL>

<P><STRONG><a name="[6de]"></a>GSM_Message_End_TCP_Full_Msg_Cycle()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsm_stm_message.o(i._Z34GSM_Message_End_TCP_Full_Msg_Cyclev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GSM_Message_End_TCP_Full_Msg_Cycle() &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Turn_Off_Socket_Indication(unsigned char, unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Message(void*)
</UL>

<P><STRONG><a name="[c35]"></a>GSM_Streaming_API_SendEndOfSession(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gsm_api.o(i._Z34GSM_Streaming_API_SendEndOfSessionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_SendEndOfSession(unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_VoiceCallAnswer(unsigned char, unsigned short, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[7c0]"></a>GSM_Turn_Off_All_Socket_Indication(unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, comm_common_funcs.o(i._Z34GSM_Turn_Off_All_Socket_Indicationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GSM_Turn_Off_All_Socket_Indication(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_Init_flags()
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[2d2]"></a>INCOME_MESSAGE_VIDEO_nack_received()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process_income_message.o(i._Z34INCOME_MESSAGE_VIDEO_nack_receivedv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[6fb]"></a>INCOME_MESSAGE_clear_nack_received()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process_income_message.o(i._Z34INCOME_MESSAGE_clear_nack_receivedv))
<BR><BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[c2a]"></a>IPDE_new_send_start_cover_test_msg(unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, videoengine.o(i._Z34IPDE_new_send_start_cover_test_msgh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IPDE_new_send_start_cover_test_msg(unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test_exec()
</UL>

<P><STRONG><a name="[375]"></a>OSAL_PriorityQueueGetNumOfElements(OSAL_PriorityQueue*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal_priority_queue.o(i._Z34OSAL_PriorityQueueGetNumOfElementsP18OSAL_PriorityQueue))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeOutEventInQueue(unsigned char, OSAL_PriorityQueue*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEventInQueue(unsigned short, OSAL_PriorityQueue*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[165]"></a>RFApiVSEG_BuildOPDISecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rfapivseg.o(i._Z34RFApiVSEG_BuildOPDISecEngStatusMsgPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteBuffer(I2C_COMMAND_WRITE)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>RF_INPUT_get_supervisory_count_buf()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ram_rf_input_dev.o(i._Z34RF_INPUT_get_supervisory_count_bufv))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_erase(unsigned short)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_INPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
</UL>

<P><STRONG><a name="[84c]"></a>SMS_message_get_connection_timeout()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sms_message.o(i._Z34SMS_message_get_connection_timeoutv))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketTimeout(TimerStruct_S*)
</UL>

<P><STRONG><a name="[c01]"></a>SUPERVISORY_msme_rf_in_restore_msg(RF_INPUT_DEV_TYPE_E)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, supervisory.o(i._Z34SUPERVISORY_msme_rf_in_restore_msg19RF_INPUT_DEV_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_restore_msg(U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[194]"></a>TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char)</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, test_func.o(i._Z34TEST_ExecuteSendCommandToGSMModulePcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteSendCommandToGSMModule(char*, unsigned short, unsigned char) &rArr; GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char) &rArr; GsmPrintoutsSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char, unsigned, unsigned char*, unsigned short, unsigned short*) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendMessageToUart(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short, unsigned, unsigned short*, unsigned char)
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsMuxOn()
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPstnModuleEnable()
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[a5c]"></a>TIMER_RestoreRFresetCounterFromNVM(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i._Z34TIMER_RestoreRFresetCounterFromNVMh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[af]"></a>UpdateDeviceBatteryInformation_exe()</STRONG> (Thumb, 634 bytes, Stack size 64 bytes, devicebatterystate.o(i._Z34UpdateDeviceBatteryInformation_exev))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = UpdateDeviceBatteryInformation_exe() &rArr; RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_CopyBattLevelToRam(unsigned, unsigned char*, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[c4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKf3NeedBatteryInformation()
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandler1(unsigned char)
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGetBatteryInfoRfMsg()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> devicebatterystate.o(i._Z34UpdateDeviceBatteryInformation_exev)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[7b7]"></a>get_next_ready_MSME_PROC_EVENT_ptr()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msme_q.o(i._Z34get_next_ready_MSME_PROC_EVENT_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_next_ready_MSME_PROC_EVENT_ptr() &rArr; GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextEventToDo(sEventDrivenQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
</UL>

<P><STRONG><a name="[989]"></a>ram_control_panel_GetIsVATDisabled()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z34ram_control_panel_GetIsVATDisabledv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ram_control_panel_GetIsVATDisabled() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[7dc]"></a>CONTROL_PANEL_get_sysinactivity_ptr()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z35CONTROL_PANEL_get_sysinactivity_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CONTROL_PANEL_get_sysinactivity_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKPDInactivityStatus(unsigned char)
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralInactivity()
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetlInactivityWin()
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_set_gen_inactivity(bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[bb9]"></a>CPUI_Buttons_CheckSlaveCurrentState(S_CPUI_ButtonInfo*, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z35CPUI_Buttons_CheckSlaveCurrentStateP17S_CPUI_ButtonInfoh))
<BR><BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_TypePinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_CheckMasterPinForProg(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[37f]"></a>CPUI_Buttons_StopForceArmWindowFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z35CPUI_Buttons_StopForceArmWindowFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[c4]"></a>C_PROC_SendTechnicalInformation_exe()</STRONG> (Thumb, 638 bytes, Stack size 56 bytes, c_proc.o(i._Z35C_PROC_SendTechnicalInformation_exev))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = C_PROC_SendTechnicalInformation_exe() &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[c4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticFuncItrSendNextDev(Inf4SendTechinfInfoTask_t*)
<LI><a href="#[c4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInterestingDevice(unsigned char*, Inf4SendTechinfInfoTask_t*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDeviceBatteryLevelTable(Inf4SendTechinfInfoTask_t*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBatteryLevel(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*)
<LI><a href="#[c4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillItrBuffer(unsigned char*, Inf4SendTechinfInfoTask_t*, ItrStatus_t*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z35C_PROC_SendTechnicalInformation_exev)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[c50]"></a>C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)</STRONG> (Thumb, 724 bytes, Stack size 64 bytes, process_c_proc_messages.o(i._Z35C_PROC__process_security_open_alarmP13S_RF_SEC_ZONE10U_DEV_TYPE21RF_DETECTOR_SIGNALS_Eh17SECURITY_STATES_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexAlarm()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChimeMasked()
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChimeOrInactivityCntBit()
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreAlarmStatus()
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddVideoDetection(unsigned char)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDetectionMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticAlarmDingDong(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[811]"></a>CheckAndExtractCyberModeLegalParams(unsigned char*, unsigned char*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cybermachine.o(i._Z35CheckAndExtractCyberModeLegalParamsPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CheckAndExtractCyberModeLegalParams(unsigned char*, unsigned char*) &rArr; decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2hex(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[be2]"></a>DiagTest_ClearAllDeviceBatteryLevel()</STRONG> (Thumb, 42 bytes, Stack size 120 bytes, test_diag.o(i._Z35DiagTest_ClearAllDeviceBatteryLevelv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DiagTest_ClearAllDeviceBatteryLevel() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagTest_ClearAllDeviceInfo()
</UL>

<P><STRONG><a name="[878]"></a>FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, fl_types.o(i._Z35FL_RF_SEC_ZONE_write_device_versionhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = FL_RF_SEC_ZONE_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logical_2_Physical(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRequestServerKeyFog(unsigned char, eRequestServerKeyFogType)
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_OUTPUT_write_device_version(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_init(unsigned char, unsigned char)
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamMemMapPtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[be4]"></a>FOR_ALL_RF_SEC_ZONES_clear_t_bypass(unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ram_rf_sec_zone.o(i._Z35FOR_ALL_RF_SEC_ZONES_clear_t_bypassh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FOR_ALL_RF_SEC_ZONES_clear_t_bypass(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_clear_t_bypass(unsigned char)
</UL>

<P><STRONG><a name="[2f0]"></a>GSM_Control_API_GetAccessTechnology()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsm_api.o(i._Z35GSM_Control_API_GetAccessTechnologyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSM_Control_API_GetAccessTechnology()
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
</UL>

<P><STRONG><a name="[bd4]"></a>GSM_Control_StartStopJamDetectTimer(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gsm_stm_control.o(i._Z35GSM_Control_StartStopJamDetectTimerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Control_StartStopJamDetectTimer(unsigned) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimerExt(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxMngGsmUnsolicitedHandler(unsigned char, S_COMM_STM_RX_MNG_COMM_TASK_REG*, char*, unsigned short)
</UL>

<P><STRONG><a name="[2d0]"></a>INCOME_MESSAGE_VIDEO_retry_received()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process_income_message.o(i._Z35INCOME_MESSAGE_VIDEO_retry_receivedv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[2d1]"></a>INCOME_MESSAGE_clear_VIDEO_ack_nack()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process_income_message.o(i._Z35INCOME_MESSAGE_clear_VIDEO_ack_nackv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[851]"></a>Is_Battery_Above_Chargers_Threshold()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bat.o(i._Z35Is_Battery_Above_Chargers_Thresholdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Is_Battery_Above_Chargers_Threshold()
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBattHandler()
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_ON_if_GSM_idle()
</UL>

<P><STRONG><a name="[77b]"></a>Is_Battery_Under_Chargers_Threshold()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bat.o(i._Z35Is_Battery_Under_Chargers_Thresholdv))
<BR><BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHARGER_EN_N_DIS(bool)
</UL>

<P><STRONG><a name="[bf3]"></a>RF_OUTPUT_get_supervisory_count_buf()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ram_rf_output_dev.o(i._Z35RF_OUTPUT_get_supervisory_count_bufv))
<BR><BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_OUTPUT_DEV_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
</UL>

<P><STRONG><a name="[190]"></a>TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, test_func.o(i._Z35TEST_ExecuteEEpromOrRfReadOperationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteEEpromOrRfReadOperation(char*, unsigned short, unsigned char) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Digit2Ascii(unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[aca]"></a>TEST_SendApplicationTestOpenningMsg(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, test_api.o(i._Z35TEST_SendApplicationTestOpenningMsgh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TEST_SendApplicationTestOpenningMsg(unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
</UL>

<P><STRONG><a name="[754]"></a>VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, vat_func.o(i._Z35VAT_DMAPacketTxToSpeakerDoneHandlerP10S_VAT_InfoP19S_VatTaskGlobalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = VAT_DMAPacketTxToSpeakerDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*) &rArr; FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*) &rArr; FLASH_ExecuteOperation(unsigned short, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned char*, unsigned*, unsigned short*, unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read(unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListInsertToHead(unsigned char, OSAL_List*, void*)
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListDeleteTail(OSAL_List*)
<LI><a href="#[c51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ListGetTail(OSAL_List*)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FreeDecoder(S_VatTaskGlobalData*)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[b52]"></a>CPUI_Buttons_CheckMasterCurrentState(S_CPUI_ButtonInfo*, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z36CPUI_Buttons_CheckMasterCurrentStateP17S_CPUI_ButtonInfoh))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_EnterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ActivateProgram(S_CPUI_ButtonInfo*)
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_TypePinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_ProgsOrReset(S_CPUI_ButtonInfo*)
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PinEntered(S_CPUI_ButtonInfo*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PerformPinCodeActions(S_CPUI_ButtonInfo*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Button_CheckMasterPinForProg(S_CPUI_ButtonInfo*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_SetResetProg(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[b6c]"></a>C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, process_c_proc_messages.o(i._Z36C_PROC__process_perimeter_open_alarmP21S_SEC_ZONE_ENTRY_DATA10U_DEV_TYPE21RF_DETECTOR_SIGNALS_Eh17SECURITY_STATES_Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_pause(bool)
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterSirenOn()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[c52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_perimeter_time_from_last_detection(unsigned short)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Perimeter_Detection_Message(int)
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart2(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart1(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_entry_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[ac5]"></a>C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E)</STRONG> (Thumb, 532 bytes, Stack size 48 bytes, process_c_proc_messages.o(i._Z36C_PROC_process_CONTROL_PANEL_signalsh10U_DEV_TYPE23CONTROL_PANEL_SIGNALS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_CONTROL_PANEL_signals(unsigned char, U_DEV_TYPE, CONTROL_PANEL_SIGNALS_E) &rArr; SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char) &rArr; Start_prealarm(unsigned char, unsigned char) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CONTROL_PANEL_ptr()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation(unsigned short, unsigned short, S_POSESO_Reply*)
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerStructPtr()
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_TAMPER_event(U_DEV_TYPE, unsigned char)
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmsSendTtrOpenBackTamper()
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanelTamperBypass()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_CONTROL_PANEL_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c28]"></a>C_PROC_process_RF_SEC_ZONE_build_msg(unsigned char*, unsigned char*, S_SEC_ZONE_ENTRY_DATA*, unsigned char)</STRONG> (Thumb, 624 bytes, Stack size 56 bytes, process_c_proc_messages.o(i._Z36C_PROC_process_RF_SEC_ZONE_build_msgPhS_P21S_SEC_ZONE_ENTRY_DATAh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = C_PROC_process_RF_SEC_ZONE_build_msg(unsigned char*, unsigned char*, S_SEC_ZONE_ENTRY_DATA*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[81d]"></a>C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, process_c_proc_messages.o(i._Z36C_proc_process_KEY_FOB_perimeter_armP16U_KEY_FOB_STATUSP16U_KEY_FOB_PARAMShh10U_DEV_TYPEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool) &rArr; SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char) &rArr; KEY_FOB_send_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char, unsigned char) &rArr; KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char) &rArr; FillKf3LEds(unsigned char, U_KEY_FOB_PARAMS, KEY_FOB_MESSAGE_E, KEY_FOB_LEDS_STATE_S*) &rArr; KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChangeBadBeep()
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKF3Type(unsigned char)
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pre_arm_exit(PRE_ARM_EXIT_SCENARIO_E)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[c53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_delay_force_arm_4_open_zone_start(U_KEY_FOB_STATUS*)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[be5]"></a>FOR_ALL_RF_SEC_ZONES_clear_t_bypass2(unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ram_rf_sec_zone.o(i._Z36FOR_ALL_RF_SEC_ZONES_clear_t_bypass2h))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FOR_ALL_RF_SEC_ZONES_clear_t_bypass2(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_clear_t_bypass(unsigned char)
</UL>

<P><STRONG><a name="[463]"></a>Flash_GeneralAcquireRlease_SSP_Mutex(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash_func.o(i._Z36Flash_GeneralAcquireRlease_SSP_Mutexhh))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_MutexRelease(unsigned*)
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_MutexAcquire(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashManager(void*)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTaskBusyPollAfterCapture(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[a5d]"></a>GSM_Control_API_SetCurrentStatistics(unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gsm_api.o(i._Z36GSM_Control_API_SetCurrentStatisticsPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GSM_Control_API_SetCurrentStatistics(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[4f5]"></a>GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, gsm_api.o(i._Z36GSM_Control_Start_CSD_Full_Msg_CyclehPcttS_htPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GSM_Control_Start_CSD_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[503]"></a>GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, gsm_api.o(i._Z36GSM_Message_Start_TCP_Full_Msg_CyclehPcttS_tS_hS_tjtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmMessageReadyForCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[9c0]"></a>GSM_Turn_On_Packet_Socket_Indication(unsigned char, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gsm_stm_message.o(i._Z36GSM_Turn_On_Packet_Socket_Indicationhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GSM_Turn_On_Packet_Socket_Indication(unsigned char, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemParams()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
</UL>

<P><STRONG><a name="[90a]"></a>RFApiVSEG_GetDeviceTypeLogicalOffset(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rfapivseg.o(i._Z36RFApiVSEG_GetDeviceTypeLogicalOffseth))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DeleteDevice(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[b59]"></a>RFApiVSEG_GetDeviceTypeSubTypeOffset(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfapivseg.o(i._Z36RFApiVSEG_GetDeviceTypeSubTypeOffseth))
<BR><BR>[Called By]<UL><LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Info_InPanel(unsigned char, unsigned char*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[ca]"></a>SIREN_send_new_protocol_command_exec()</STRONG> (Thumb, 570 bytes, Stack size 80 bytes, siren.o(i._Z36SIREN_send_new_protocol_command_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SIREN_send_new_protocol_command_exec() &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTimeoutExpired1(SYS_TASK*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout(SYS_TASK*, unsigned)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SIREN_ptr(unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnoughPlaceInRfQueue(unsigned char)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenVersionCheck(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> siren.o(i._Z36SIREN_send_new_protocol_command_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[527]"></a>SMS_message_SendPacketOverConnection(unsigned char*, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sms_message.o(i._Z36SMS_message_SendPacketOverConnectionPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SMS_message_SendPacketOverConnection(unsigned char*, unsigned char) &rArr; GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Streaming_API_SendGPRS(unsigned char, char*, unsigned short, unsigned short, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[339]"></a>Security_clear_annex_alarm_in_memory()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, security.o(i._Z36Security_clear_annex_alarm_in_memoryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Security_clear_annex_alarm_in_memory() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPanicAlarm()
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annex_clear_alarm_in_memory()
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterSirenOn()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecAlarmPending(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
</UL>

<P><STRONG><a name="[18f]"></a>TEST_ExecuteEEpromOrRfWriteOperation(char*, unsigned short, unsigned char)</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, test_func.o(i._Z36TEST_ExecuteEEpromOrRfWriteOperationPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = TEST_ExecuteEEpromOrRfWriteOperation(char*, unsigned short, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[53b]"></a>ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ram_rf_sec_zone.o(i._Z36ram_rf_sec_zone_GetTagReaderMajorVerPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_security_entry_data(RF_SEC_ZONE_TYPE_E*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMajorAndMinorVersions(unsigned char, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Remote_Param_Exec()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDefectTr5Version(DEVICE_TYPE, unsigned char)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTargetType(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[338]"></a>tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, tag_reader.o(i._Z36tag_reader_send_new_protocol_commandhhPhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[629]"></a>CONTROL_PANEL_get_KF_lock_options_ptr()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ram_control_panel.o(i._Z37CONTROL_PANEL_get_KF_lock_options_ptrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CONTROL_PANEL_get_KF_lock_options_ptr() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCfgChanged(unsigned char)
</UL>

<P><STRONG><a name="[7ee]"></a>C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*)</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, c_proc.o(i._Z37C_PROC_SendTemperatureBathInformationP14S_POSESO_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = C_PROC_SendTemperatureBathInformation(S_POSESO_Reply*) &rArr; MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg2(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, S_POSESO_Reply*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetItrStatus(Inf4SendTechinfInfoTask_t*, ItrStatus_t*, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[c47]"></a>C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, process_c_proc_messages.o(i._Z37C_PROC_process_RF_SEC_ZONE_open_alarmP13S_RF_SEC_ZONE10U_DEV_TYPE21RF_DETECTOR_SIGNALS_Eh17SECURITY_STATES_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexAlarm()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChimeMasked()
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChimeOrInactivityCntBit()
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreAlarmStatus()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddVideoDetection(unsigned char)
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_open_pir()
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMagMsgEnabled()
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticAlarmDingDong(unsigned char*)
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
</UL>

<P><STRONG><a name="[7a1]"></a>EnterCounters_CalculateMissedMessages(int, int)</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, entercounterstodatabase.o(i._Z37EnterCounters_CalculateMissedMessagesii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnterCounters_CalculateMissedMessages(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCounters_PerformIIRCalc(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForSupervisory(unsigned char)
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNewMessage()
</UL>

<P><STRONG><a name="[31d]"></a>GSM_Control_API_GetPeriodicStatistics()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_api.o(i._Z37GSM_Control_API_GetPeriodicStatisticsv))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Power_Off(unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[533]"></a>GSM_Control_API_SaveCurrentStatistics()</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, gsm_api.o(i._Z37GSM_Control_API_SaveCurrentStatisticsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_SaveCurrentStatistics() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Power_Off(unsigned char)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[507]"></a>GSM_Control_API_SetAudioConfiguration(unsigned char, unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, gsm_api.o(i._Z37GSM_Control_API_SetAudioConfigurationhhhtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GSM_Control_API_SetAudioConfiguration(unsigned char, unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>

<P><STRONG><a name="[bfb]"></a>GSM_Control_StartStopRegDebounceTimer(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gsm_stm_control.o(i._Z37GSM_Control_StartStopRegDebounceTimerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GSM_Control_StartStopRegDebounceTimer(unsigned) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
</UL>

<P><STRONG><a name="[566]"></a>OSAL_CreateTempTaskWithPendingMessage()</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, osal_db.o(i._Z37OSAL_CreateTempTaskWithPendingMessagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSAL_CreateTempTaskWithPendingMessage() &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IsMailBoxEmpty(unsigned char)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTaskStackSize(unsigned char)
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskCreate(void(*)(void*), const signed char*, unsigned short, void*, unsigned short, unsigned*, unsigned*)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SetTaskHandle
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IdleTask()
</UL>

<P><STRONG><a name="[c57]"></a>OSAL_CyclicBufferInsertOneByteFromISR(OSAL_CyclicBuffer*, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, osal_cyclic_buff.o(i._Z37OSAL_CyclicBufferInsertOneByteFromISRP17OSAL_CyclicBufferh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSAL_CyclicBufferInsertOneByteFromISR(OSAL_CyclicBuffer*, unsigned char) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR(unsigned char)
</UL>

<P><STRONG><a name="[94b]"></a>RamControlPanelClearLowBattIndication()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ram_control_panel.o(i._Z37RamControlPanelClearLowBattIndicationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = RamControlPanelClearLowBattIndication() &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitStatusFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
</UL>

<P><STRONG><a name="[bf4]"></a>SUPERVISORY_msme_rf_sec_in_active_msg(unsigned char)</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, supervisory.o(i._Z37SUPERVISORY_msme_rf_sec_in_active_msgh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SUPERVISORY_msme_rf_sec_in_active_msg(unsigned char) &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterMagnet(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_active_msg(U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c2]"></a>SendCommunicationProtocolInf_ICI_exec()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, c_proc.o(i._Z37SendCommunicationProtocolInf_ICI_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendCommunicationProtocolInf_ICI_exec() &rArr; MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg1(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
</UL>
<BR>[Address Reference Count : 3]<UL><LI> c_proc.o(i._Z37SendCommunicationProtocolInf_ICI_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[bb0]"></a>tag_reader_set_arming_prevention_type(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tag_reader.o(i._Z37tag_reader_set_arming_prevention_typeh))
<BR><BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_exit_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[7d9]"></a>CONTROL_PANEL_set_chime_inactivity_cnt(bool)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ram_control_panel.o(i._Z38CONTROL_PANEL_set_chime_inactivity_cntb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = CONTROL_PANEL_set_chime_inactivity_cnt(bool) &rArr; CONTROL_PANEL_save_params() &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChimeMask(int, int)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_save_params()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[c49]"></a>C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, process_c_proc_messages.o(i._Z38C_PROC_process_RF_SEC_ZONE_close_alarmP13S_RF_SEC_ZONE10U_DEV_TYPE21RF_DETECTOR_SIGNALS_Eh17SECURITY_STATES_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char) &rArr; SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterWasAlarm()
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char)
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart2(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart1(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
</UL>

<P><STRONG><a name="[c48]"></a>C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)</STRONG> (Thumb, 760 bytes, Stack size 64 bytes, process_c_proc_messages.o(i._Z38C_PROC_process_RF_SEC_ZONE_open_alarm2P13S_RF_SEC_ZONE10U_DEV_TYPE21RF_DETECTOR_SIGNALS_Eh17SECURITY_STATES_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E) &rArr; C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short) &rArr; SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; SaveDelayedAlarm(unsigned char, DELAYED_DEVICE_OPTION_E, E_DELAYED_VIDEO_TYPE) &rArr; StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE) &rArr; Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexHandleAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexAlarm()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChimeMasked()
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChimeOrInactivityCntBit()
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_inactivity_timer()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreAlarmStatus()
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_alarm_details(unsigned char, unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_last_entry_open_alarm(unsigned char, int)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEntryExitAlarm(unsigned char, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMagMsgEnabled()
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDetectionMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, RF_DETECTOR_SIGNALS_E, unsigned char)
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticAlarmDingDong(unsigned char*)
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreAlarmHandleDetection(unsigned char, RF_DETECTOR_SIGNALS_E, SECURITY_STATES_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
</UL>

<P><STRONG><a name="[9a5]"></a>FileHandler_ReceiveNewRFProtocolPacket(unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, filehandler.o(i._Z38FileHandler_ReceiveNewRFProtocolPacketPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FileHandler_ReceiveNewRFProtocolPacket(unsigned char*) &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RECEIVE_exec()
</UL>

<P><STRONG><a name="[bd2]"></a>FunctionalCheckIfDeviceBelongsToSystem(unsigned char*, bool, bool)</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, cc11xxdrv.o(i._Z38FunctionalCheckIfDeviceBelongsToSystemPhbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FunctionalCheckIfDeviceBelongsToSystem(unsigned char*, bool, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyfob(unsigned char*)
<LI><a href="#[c59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCorrectCpSerialFromRf(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EarlyPacketFiltering(unsigned char*)
</UL>

<P><STRONG><a name="[31e]"></a>GSM_Control_API_GetPermanentStatistics()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_api.o(i._Z38GSM_Control_API_GetPermanentStatisticsv))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Power_Off(unsigned char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_finalize_actions(S_MSME_MSG_EVENT*, bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b90]"></a>GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gsm_api.o(i._Z38GSM_Streaming_API_GetGsmStatus_ODM_CMDhtPjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GSM_Streaming_API_GetGsmStatus_ODM_CMD(unsigned char, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_API_GetModemFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[c00]"></a>SUPERVISORY_msme_rf_sec_in_restore_msg(unsigned char)</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, supervisory.o(i._Z38SUPERVISORY_msme_rf_sec_in_restore_msgh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SUPERVISORY_msme_rf_sec_in_restore_msg(unsigned char) &rArr; tag_reader_getSettings(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getSettings(unsigned char)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterMagnet(S_SEC_ZONE_ENTRY_DATA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_msme_restore_msg(U_DEV_TYPE, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[599]"></a>get_perimeter_time_from_last_detection()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, videoengine.o(i._Z38get_perimeter_time_from_last_detectionv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
</UL>

<P><STRONG><a name="[c52]"></a>set_perimeter_time_from_last_detection(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, videoengine.o(i._Z38set_perimeter_time_from_last_detectiont))
<BR><BR>[Called By]<UL><LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_perimeter_open_alarm(S_SEC_ZONE_ENTRY_DATA*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E, unsigned short)
</UL>

<P><STRONG><a name="[37a]"></a>CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*)</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, cpui_buttons_func.o(i._Z39CPUI_Buttons_ButtonPressIntervalExpiredhPhPjS0_P17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_ButtonPressIntervalExpired(unsigned char, unsigned char*, unsigned*, unsigned*, S_CPUI_ButtonInfo*) &rArr; CPUI_Buttons_PrintMode(unsigned char) &rArr; UART_SendMessage(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_RecognizeButtonPressed()
<LI><a href="#[c21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_MoreThanOneButtonPress(unsigned)
<LI><a href="#[c22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_NumberOfButtonPressed(unsigned)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_EndButtonPressProcess(unsigned*, unsigned*, unsigned char*)
<LI><a href="#[c26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_CheckValidButtonPress(unsigned char, unsigned char)
<LI><a href="#[c25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_GetThePressedButtons(unsigned, unsigned char*, unsigned char*)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_PrintMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>

<P><STRONG><a name="[37d]"></a>CPUI_Buttons_StopOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpui_buttons_func.o(i._Z39CPUI_Buttons_StopOutgoingCallWindowFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[1c0]"></a>CPUI_GetPartitionPerimeterAnnexZoneLeds(unsigned*)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cpui_func.o(i._Z39CPUI_GetPartitionPerimeterAnnexZoneLedsPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CPUI_GetPartitionPerimeterAnnexZoneLeds(unsigned*) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
<LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[44e]"></a>C_PROC_SendCommunicationProtocolInf_ICI()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, c_proc.o(i._Z39C_PROC_SendCommunicationProtocolInf_ICIv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C_PROC_SendCommunicationProtocolInf_ICI() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
</UL>

<P><STRONG><a name="[c46]"></a>C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, process_c_proc_messages.o(i._Z39C_PROC_process_RF_SEC_ZONE_close_alarm2P13S_RF_SEC_ZONE10U_DEV_TYPE21RF_DETECTOR_SIGNALS_Eh17SECURITY_STATES_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E) &rArr; StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char) &rArr; SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVirtualDeviceType(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBypassLogic(S_SEC_ZONE_ENTRY_DATA*, SIGNAL_TYPE_E)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterWasAlarm()
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char)
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart2(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZoneStatusPart1(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_signals(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char)
</UL>

<P><STRONG><a name="[571]"></a>CPUI_Buttons_StartOutgoingCallWindowFunc(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cpui_buttons_func.o(i._Z40CPUI_Buttons_StartOutgoingCallWindowFuncP17S_CPUI_ButtonInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CPUI_Buttons_StartOutgoingCallWindowFunc(S_CPUI_ButtonInfo*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateStateFlag(S_CPUI_ButtonInfo*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[920]"></a>TranslateNewRfGeneralTypeToRfSecZoneType(C_DEV_TYPE_E)</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, c_proc.o(i._Z40TranslateNewRfGeneralTypeToRfSecZoneType12C_DEV_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateDeviceVer(CONST_DATA_TBL_S*, unsigned char*, C_DEV_TYPE_E, bool)
</UL>

<P><STRONG><a name="[c0e]"></a>tag_reader_set_lck_or_rfoutput_activated(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tag_reader.o(i._Z40tag_reader_set_lck_or_rfoutput_activatedh))
<BR><BR>[Called By]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[c33]"></a>RF_INPUT_get_extreme_temp_supervisory_count_buf()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ram_rf_input_dev.o(i._Z47RF_INPUT_get_extreme_temp_supervisory_count_bufv))
<BR><BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
</UL>

<P><STRONG><a name="[b58]"></a>itoa(unsigned char*, unsigned short, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, m_a2g.o(i._Z4itoaPhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = itoa(unsigned char*, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Update_Socket_Param(unsigned char*, char*, unsigned char*)
</UL>

<P><STRONG><a name="[c53]"></a>C_PROC_process_KEY_FOB_delay_force_arm_4_open_zone_start(U_KEY_FOB_STATUS*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, process_c_proc_messages.o(i._Z56C_PROC_process_KEY_FOB_delay_force_arm_4_open_zone_startP16U_KEY_FOB_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C_PROC_process_KEY_FOB_delay_force_arm_4_open_zone_start(U_KEY_FOB_STATUS*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_delay_full_or_part_force_arm_4_open_zone_proc(unsigned char, ERROR_E*)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
</UL>

<P><STRONG><a name="[81e]"></a>C_PROC_process_KEY_FOB_force_arm_desicion_4_open_zone_proc(U_KEY_FOB_STATUS*, SECURITY_EVENT_E*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, process_c_proc_messages.o(i._Z58C_PROC_process_KEY_FOB_force_arm_desicion_4_open_zone_procP16U_KEY_FOB_STATUSP16SECURITY_EVENT_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = C_PROC_process_KEY_FOB_force_arm_desicion_4_open_zone_proc(U_KEY_FOB_STATUS*, SECURITY_EVENT_E*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_ARM_request(S_KEY_FOB*, KEY_FOB_REQUESTS_E, unsigned char, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformKF3Arming(S_KEY_FOB*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE)
</UL>

<P><STRONG><a name="[a1a]"></a>parse(unsigned char*, int)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, perifdevice.o(i._Z5parsePhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = parse(unsigned char*, int) &rArr; CPUI_NotifyPinPressed(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyPinPressed(unsigned short)
<LI><a href="#[c5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_UpdateSlaveCurrentState(S_CPUI_ButtonInfo*, unsigned char)
<LI><a href="#[c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum(const unsigned char*, int)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_TRANSMIT_exec()
</UL>

<P><STRONG><a name="[ad8]"></a>reset(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, util.o(i._Z5reseth))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_MACHINE_exec()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iridium_15_maintenance_scheduler()
</UL>

<P><STRONG><a name="[bf0]"></a>C_PROC_process_KEY_FOB_delay_full_or_part_force_arm_4_open_zone_proc(unsigned char, ERROR_E*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, process_c_proc_messages.o(i._Z68C_PROC_process_KEY_FOB_delay_full_or_part_force_arm_4_open_zone_prochP7ERROR_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = C_PROC_process_KEY_FOB_delay_full_or_part_force_arm_4_open_zone_proc(unsigned char, ERROR_E*) &rArr; GetPlasticVersion() &rArr; GetGeneralParameters() &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyfobStatusStruct(int)
<LI><a href="#[c53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_delay_force_arm_4_open_zone_start(U_KEY_FOB_STATUS*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[3f1]"></a>IsFull(sEventDrivenQ*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eventdrivenq.o(i._Z6IsFullP13sEventDrivenQ))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[56d]"></a>IsMute()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, voice_manager.o(i._Z6IsMutev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsMute()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_phone_mute()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_CallGuardBlink(unsigned*)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[3b1]"></a>aERROR(unsigned char, unsigned, unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, log.o(i._Z6aERRORhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Reset()
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_get_time_date(unsigned char*)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDelayTask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_copybuf()
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_start()
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_frame()
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_state_nack()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamMemoryMap_HardReset_exec()
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_ARM_request(unsigned char, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_power_cycle_exec()
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_output(unsigned char)
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_input(unsigned char)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[c1c]"></a>setPLL()</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lpc23xxhardw.o(i._Z6setPLLv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setPLL() &rArr; FeedPll() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedPll()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>DMA_ISR()</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, dma_isr.o(i._Z7DMA_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DMA_ISR() &rArr; DMASendMessageToTask(unsigned char, unsigned short, unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMASendMessageToTask(unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[292]"></a>FcsCalc(unsigned char*, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsm_mux_control.o(i._Z7FcsCalcPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FcsCalc(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxParser(unsigned char*, unsigned short, unsigned short*, unsigned char*)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxBuilder(unsigned char, S_COMM_STM_RX_MNG_RX_BUFFER*, unsigned short)
</UL>

<P><STRONG><a name="[c5e]"></a>FeedPll()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc23xxhardw.o(i._Z7FeedPllv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FeedPll() &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskEnterCriticalSection()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTaskExitCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPLL()
</UL>

<P><STRONG><a name="[62d]"></a>GetKfId(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, apicmdutilfunc.o(i._Z7GetKfIdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GetKfId(unsigned char) &rArr; FindFreeKfId() &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeKfId()
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_build_msg(S_MSME_MSG_EVENT*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[211]"></a>I2C_ISR(unsigned char)</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, i2c_isr.o(i._Z7I2C_ISRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_ISR(unsigned char) &rArr; SendMessageToI2CTask(unsigned short, unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageToI2CTask(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_1_ISR()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_0_ISR()
</UL>

<P><STRONG><a name="[c5f]"></a>InitRfQ()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfq.o(i._Z7InitRfQv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitRfQ() &rArr; CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreMain()
</UL>

<P><STRONG><a name="[288]"></a>IsEmpty(sEventDrivenQ*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventdrivenq.o(i._Z7IsEmptyP13sEventDrivenQ))
<BR><BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextEventToDo(sEventDrivenQ*)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfQEmpty()
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEventFromQueue(sEventDrivenQ*, unsigned char)
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentEvent(sEventDrivenQ*)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsmeQempty()
</UL>

<P><STRONG><a name="[c60]"></a>PreMain()</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, premain.o(i._Z7PreMainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PreMain() &rArr; InitRfQ() &rArr; CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfQ()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>RTC_ISR()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc_isr.o(i._Z7RTC_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ISR()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_INT_type(unsigned char)
<LI><a href="#[c61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSM_RTC_Tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[92e]"></a>SetKfId(unsigned char, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apicmdutilfunc.o(i._Z7SetKfIdhh))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
</UL>

<P><STRONG><a name="[5b7]"></a>SetMute(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, voice_manager.o(i._Z7SetMuteh))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpyModeOption(unsigned char)
</UL>

<P><STRONG><a name="[2f2]"></a>get_bit(unsigned char*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, util.o(i._Z7get_bitPhj))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPstnModuleEnable()
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigFoxDisabled(unsigned char)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_KEY_FOB_status(unsigned char)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_init_params()
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_set_jamming_machine(bool)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Jamming_handler_exec()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_init_params()
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSyncClockGSM()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_Embedded_Diagnostic_msg(unsigned short, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMagMsgEnabled()
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoPerimeterArmEnabled()
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_valid(unsigned char)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Security_SetSliderWindowTest()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[2a4]"></a>rc_init(rc_state*, const unsigned char*, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, sfd_func.o(i._Z7rc_initP8rc_statePKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rc_init(rc_state*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFD_InitRC()
</UL>

<P><STRONG><a name="[383]"></a>set_bit(unsigned char*, unsigned, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, util.o(i._Z7set_bitPhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_bit(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_KEY_FOB_status(unsigned char, unsigned char)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTemperatureForExtremeValue(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_output_dev_init(unsigned char, unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Flash_Subpage_exec()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigFoxEnDis(unsigned char, unsigned char)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSTUNParams(bool, unsigned char*)
</UL>

<P><STRONG><a name="[64f]"></a>ALARM_on(ALRAM_TYPE_E, unsigned char, bool)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, alarm.o(i._Z8ALARM_on12ALRAM_TYPE_Ehb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ALARM_on(ALRAM_TYPE_E, unsigned char, bool) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmVoiceCallOn()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOn(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundOrVAT_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticAlarmDingDong(unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_actions(SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[823]"></a>Add2List(unsigned char, unsigned char, unsigned char, FitEntitiesList_t*, unsigned short*)</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, apicmdprocessing.o(i._Z8Add2ListhhhP17FitEntitiesList_tPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Add2List(unsigned char, unsigned char, unsigned char, FitEntitiesList_t*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddEntityGroup2List(unsigned short, rules_arg_t*, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndAddEntity(unsigned short, rules_arg_t*, unsigned char, FitEntitiesList_t*, unsigned short*)
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGetAllCmd(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[5d3]"></a>AnnexArm(int)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, annex.o(i._Z8AnnexArmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = AnnexArm(int) &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_SetArmAwarnessUpdate()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsmePanelStatus()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_CalcArmType(unsigned char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexWriteArmFlag(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[5f0]"></a>FindKfId(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, apicmdprocessing.o(i._Z8FindKfIdj))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_KEY_FOB_ers(unsigned char)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateKF3ConfigBit(unsigned short, unsigned short)
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelParallel_UI_Entity(unsigned)
</UL>

<P><STRONG><a name="[c04]"></a>GetJDNag()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(i._Z8GetJDNagv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetJDNag() &rArr; GetJDZoneEntry() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
</UL>

<P><STRONG><a name="[4a4]"></a>GetValue(unsigned short, unsigned char*, unsigned char*, unsigned short*)</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, apipckprocessing.o(i._Z8GetValuetPhS_Pt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetValue(unsigned short, unsigned char*, unsigned char*, unsigned short*) &rArr; CollectCharBuf(unsigned char*, unsigned short*, unsigned char, unsigned char) &rArr; isxdigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectCharBuf(unsigned char*, unsigned short*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t)
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[c62]"></a>HAL_Init()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_api.o(i._Z8HAL_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Init() &rArr; SSP_Init(unsigned char, unsigned char, unsigned) &rArr; OSAL_PortMutexCreate(unsigned**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init(unsigned char, unsigned char, unsigned)
<LI><a href="#[c63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init()
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PatformSpecificInit()
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Device_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
</UL>

<P><STRONG><a name="[27a]"></a>I2C_Init(unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, i2c_func.o(i._Z8I2C_Inith))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Init(unsigned char) &rArr; HAL_EnablePeripheralPower(unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortEnableInterrupts(unsigned, unsigned)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnablePeripheralPower(unsigned char)
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBaudRate(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CManager(void*)
</UL>

<P><STRONG><a name="[b01]"></a>InitGsmQ()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsmq.o(i._Z8InitGsmQv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitGsmQ() &rArr; CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[121]"></a>InitTask(void*)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, init_task.o(i._Z8InitTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = InitTask(void*) &rArr; INIT_InitOffsetArrays() &rArr; SetCyberMode(unsigned char*) &rArr; UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_Init()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_Init(unsigned char)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskDelete(unsigned char)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_ErrorExec(unsigned char, unsigned, unsigned char)
<LI><a href="#[c66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitFlags()
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_Init()
<LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init()
<LI><a href="#[c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitTestAndProductionParams(unsigned char)
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetSigfoxKeepAliveFlag(unsigned char)
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_UartInit()
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitStart(unsigned char)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMNG_InitDone(unsigned char)
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_EnterRadioTestMode(unsigned char)
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_CheckIfNewSWLoaded(unsigned char)
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitOffsetArrays()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_InitRadio(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[c58]"></a>IsKeyfob(unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z8IsKeyfobPh))
<BR><BR>[Called By]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionalCheckIfDeviceBelongsToSystem(unsigned char*, bool, bool)
</UL>

<P><STRONG><a name="[c14]"></a>IsRFIdle()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfutilfunc.o(i._Z8IsRFIdlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsRFIdle()
</UL>
<BR>[Calls]<UL><LI><a href="#[c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioApi_IsRfInIdle()
<LI><a href="#[c67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadStatus()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfQEmpty()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
</UL>

<P><STRONG><a name="[54d]"></a>KFLowBat(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, key_fob.o(i._Z8KFLowBatP22KEY_FOB_SYSTEM_STATE_SP20KEY_FOB_LEDS_STATE_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KFLowBat(KEY_FOB_SYSTEM_STATE_S*, KEY_FOB_LEDS_STATE_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KfLedsInError(U_KEY_FOB_PARAMS*, unsigned char, KEY_FOB_LEDS_STATE_S*, unsigned)
</UL>

<P><STRONG><a name="[c69]"></a>LOG_init()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, log.o(i._Z8LOG_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LOG_init() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[17f]"></a>NoAction(S_CPUI_ButtonInfo*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kpdoutstub.o(i._Z8NoActionP17S_CPUI_ButtonInfo))
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.constdata)
</UL>
<P><STRONG><a name="[b02]"></a>PDA_Init()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, m_pdaprocess.o(i._Z8PDA_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PDA_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDA_ResetReceiver()
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[805]"></a>Pct2Sens(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, process_income_message.o(i._Z8Pct2Sensh))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[af8]"></a>RKP_init()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rkp.o(i._Z8RKP_initv))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Software_Modules(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[879]"></a>RPC_done()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rpc.o(i._Z8RPC_donev))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c63]"></a>RTC_Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc_api.o(i._Z8RTC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Init() &rArr; HAL_EnablePeripheralPower(unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnablePeripheralPower(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init()
</UL>

<P><STRONG><a name="[3c3]"></a>RTC_Stop()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc_func.o(i._Z8RTC_Stopv))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeAndDate(RTC_Time_t*)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate(unsigned char, unsigned char, unsigned short)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate(unsigned char*)
</UL>

<P><STRONG><a name="[7a8]"></a>ReadDTMF()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dtmf.o(i._Z8ReadDTMFv))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceMachine()
</UL>

<P><STRONG><a name="[b65]"></a>ResetApi()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, apipckprocessing.o(i._Z8ResetApiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ResetApi() &rArr; ResetCopyAllCUI2UIHandler() &rArr; RemoveFunction(void(*)()) &rArr; RemoveFromScheduler(void(*)(), tQ_TYPE) &rArr; GetTaskQIndex(void(*)(), sSmartSchedulerQ*, tQ_TYPE)
</UL>
<BR>[Calls]<UL><LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCopyAllCUI2UIHandler()
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetModifyHandler()
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGetHandler()
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDelHandler()
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAddEntity()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPackProc()
</UL>
<BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
</UL>

<P><STRONG><a name="[a37]"></a>RfMsgLog(unsigned char*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rflogmsg.o(i._Z8RfMsgLogPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = RfMsgLog(unsigned char*) &rArr; AddRfMsgLog(unsigned char*, DEVICE_TYPE) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfMsgLog(unsigned char*, DEVICE_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
</UL>

<P><STRONG><a name="[cd]"></a>RfRxDone(OSAL_CyclicBuffer*, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfcallbackprocedures.o(i._Z8RfRxDoneP17OSAL_CyclicBuffert))
<BR>[Address Reference Count : 1]<UL><LI> init_func.o(i._Z14INIT_InitRadioh)
</UL>
<P><STRONG><a name="[cc]"></a>RfTxDone(OSAL_CyclicBuffer*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfcallbackprocedures.o(i._Z8RfTxDoneP17OSAL_CyclicBuffer))
<BR>[Address Reference Count : 1]<UL><LI> init_func.o(i._Z14INIT_InitRadioh)
</UL>
<P><STRONG><a name="[c64]"></a>SSP_Init(unsigned char, unsigned char, unsigned)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ssp_spi_api.o(i._Z8SSP_Inithhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSP_Init(unsigned char, unsigned char, unsigned) &rArr; OSAL_PortMutexCreate(unsigned**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearReceiveSSPFIFO(unsigned char)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SetRate(unsigned char, unsigned, unsigned, unsigned char)
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortMutexCreate(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[c62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47b]"></a>SendSync()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, c_proc.o(i._Z8SendSyncv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendSync() &rArr; C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
</UL>

<P><STRONG><a name="[31c]"></a>Sens2Pct(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, msme.o(i._Z8Sens2Pcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sens2Pct(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[44b]"></a>SetJDNag(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timer.o(i._Z8SetJDNagj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetJDNag(unsigned) &rArr; GetJDZoneEntry() &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJDZoneEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootMsg(bool)
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_process_JD_Status(unsigned char, C_DEV_TYPE_E, unsigned char*)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerHandler()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[1b5]"></a>TEST_ISN(char*, unsigned short, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, test_func.o(i._Z8TEST_ISNPcth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TEST_ISN(char*, unsigned short, unsigned char) &rArr; StartSirenTest(unsigned char, unsigned short) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrStr(char*, char*, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipCommaAndWhiteSps(char*, char*)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SkipWhiteSpaces(char*, char*)
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSirenTest(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_tabls.o(.constdata)
</UL>
<P><STRONG><a name="[2b0]"></a>TimerSet(TimerStruct_S*, unsigned long)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(i._Z8TimerSetP13TimerStruct_Sm))
<BR><BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBootHandler(bool)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOn(unsigned char, bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDelayedAlarm(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexExit_exec()
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_message_connection_closed(unsigned char)
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketTimeout(TimerStruct_S*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_exec()
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_MESSAGE_exec()
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListenModeBypassToChannel(int)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_TRANSMIT_exec()
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmGoodCondition()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_STATUS_exec()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_process_ring(unsigned char*)
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BypassToChannel(COMMUNICATION_CHANNEL_E)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularCallOption(unsigned char)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCommState_exec()
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStateChangeMsg()
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPanelCommState(PANEL_COMM_STATE_E)
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RefreshJDSupervision()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_RF_subsystem_upon_req()
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JammingBypassToChannel(int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_SendJDConfigMessages_exec()
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartJammingHandler(bool)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JD_MESSAGE_exec()
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRFProcess(VIDEO_RF_TRANSFER_S*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFile_exec()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_auto_learn(C_DEV_TYPE_E)
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_exec()
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP_SYSTEM_OP_commands(unsigned char*, unsigned char*, E_MP_ERROR_CODE*, EL_DRIVER_STATUS*, unsigned char*)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPowerSaveMode(unsigned)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_COMMAND_state_receive()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_C(bool)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInit()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_arm_exit_exec()
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_prealarm(unsigned char, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDataConnection_exec()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_video_request_exec()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCommMachine_exec()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerKeyRequest_exec()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_APP_COMMAND_exec()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDtmfTimout_exec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoRFMachine_exec()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_TRANSMIT_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSESO_LISTEN_exec()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRfSequence()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTEN_exec()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_boot_condition_exec()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_COMMAND_exec()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRamMemMap_exec()
<LI><a href="#[c53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_delay_force_arm_4_open_zone_start(U_KEY_FOB_STATUS*)
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_PINCODE_request(RKP_MSG_VAL_U*, unsigned char, U_DEV_TYPE, unsigned char*, unsigned char*)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_Annex_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, bool, int)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSafetySnooze(unsigned char, unsigned char)
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_video_sequences_timeout()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre_alarm_indication_exec()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_entry_start()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDAcks_exec()
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncomingBufferParser()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_power_cycle_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_exec()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDE_new_start_cover_test_exec()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_no_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_star_button(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check()
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_stun(S_MESSAGE_COMM_INFO*)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_MESSAGE_send_msg(S_MESSAGE_COMM_INFO*)
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetServerTimer()
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Perform_DTMF_Code_Actions()
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_open_call(unsigned)
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListenModeBypassVideoChannel(int)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_next_ack_state()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BypassVideoChannel(COMMUNICATION_CHANNEL_E)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_video_ack()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_gprs_ack()
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Poseso_LISTEN_exec()
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Poseso_LISTEN(POSESO_LISTEN_TYPE_E)
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_LISTEN_mode()
</UL>

<P><STRONG><a name="[212]"></a>UART_ISR(unsigned char)</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, uart_isr.o(i._Z8UART_ISRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_ISR(unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTaskFromInt(OSAL_Msg*)
<LI><a href="#[c57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_CyclicBufferInsertOneByteFromISR(OSAL_CyclicBuffer*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_ISR()
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_ISR()
</UL>

<P><STRONG><a name="[2bf]"></a>VideoCRC(unsigned char*, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, message.o(i._Z8VideoCRCPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VideoCRC(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActivationCode()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_exec()
</UL>

<P><STRONG><a name="[c5c]"></a>calc_sum(const unsigned char*, int)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, perifdevice.o(i._Z8calc_sumPKhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_sum(const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse(unsigned char*, int)
</UL>

<P><STRONG><a name="[2d4]"></a>char2int(unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, util.o(i._Z8char2inthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2hex(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int(unsigned char*, unsigned char)
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[bfa]"></a>initDTMF()</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, dtmf.o(i._Z8initDTMFv))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTONS_InitButtonInterrupts()
</UL>

<P><STRONG><a name="[5cb]"></a>is_digit(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, util.o(i._Z8is_digith))
<BR><BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INCOME_MESSAGE_parse_UIS(unsigned char*, unsigned char)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ligal_char(unsigned char)
</UL>

<P><STRONG><a name="[e8]"></a>learnKPD(int, int, int*, void*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, kpdprogs.o(i._Z8learnKPDiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = learnKPD(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_auto_learn(C_DEV_TYPE_E)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[e9]"></a>learnNPT(int, int, int*, void*)</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, kpdprogs.o(i._Z8learnNPTiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = learnNPT(int, int, int*, void*) &rArr; progGeneralStates(int, int, int*, void*) &rArr; OSAL_StartTimer(unsigned short, unsigned, unsigned char) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_GoodBeepFunc()
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_INPUT_get_entry(unsigned char)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIY_Abort()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_auto_learn(C_DEV_TYPE_E)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNPTUser(unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEntryDeletion(unsigned short, unsigned short)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_USER_ptr(unsigned char)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progGeneralStates(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[f1]"></a>progTest(int, int, int*, void*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, kpdprogs.o(i._Z8progTestiiPiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = progTest(int, int, int*, void*) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_OUTGOING_PHONE_read(unsigned char)
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_VOICE_open_call(unsigned char*)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fast_dial()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(i._Z19initIntefaceMachinev)
</UL>
<P><STRONG><a name="[736]"></a>rc_crypt(rc_state*, unsigned char*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, sfd_func.o(i._Z8rc_cryptP8rc_statePhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rc_crypt(rc_state*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFD_SendCRCData(unsigned char*, unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[332]"></a>ALARM_off()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, alarm.o(i._Z9ALARM_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ALARM_off() &rArr; SetSirenOff() &rArr; CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ExecuteAlarmActivate(char*, unsigned short, unsigned char)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceAlarm_Off()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexAlarm_exec()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prealarm_siren_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_alarm_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
</UL>

<P><STRONG><a name="[c65]"></a>CPUI_Init()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cpui_api.o(i._Z9CPUI_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = CPUI_Init() &rArr; CPUI_Init_Param() &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init_Led()
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init_Param()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[9af]"></a>CheckRule(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apicmdutilfunc.o(i._Z9CheckRuleh))
<BR><BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFitEntitiesList(unsigned char*, unsigned char*, unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[452]"></a>CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, apicmdutilfunc.o(i._Z9CopyFieldtttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CopyField(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUserFromCUI2UI(unsigned char)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyUI2CUIFields(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCUI2UIFields(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyKFEntity(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[2d7]"></a>DIY_Abort()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, do_it_yourself.o(i._Z9DIY_Abortv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DIY_Abort() &rArr; C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E) &rArr; C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg1(A2C_PROC_MESSAGE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnNPT(int, int, int*, void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKPD(int, int, int*, void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progTestAllLeds(int, int, int*, void*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnKeyFob(int, int, int*, void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnSiren(int, int, int*, void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnPerif(int, int, int*, void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learnInput(int, int, int*, void*)
</UL>

<P><STRONG><a name="[6e1]"></a>DTR_OnOff(int)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, comm_common_funcs.o(i._Z9DTR_OnOffi))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910SetDTRLine(unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_HwPowerSaveControl(unsigned char)
</UL>

<P><STRONG><a name="[c6b]"></a>EnButtons()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, scheduler.o(i._Z9EnButtonsv))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>

<P><STRONG><a name="[b4f]"></a>FillTxCmd(unsigned char*, unsigned char*, unsigned short, unsigned char)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, apipckprocessing.o(i._Z9FillTxCmdPhS_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FillTxCmd(unsigned char*, unsigned char*, unsigned short, unsigned char) &rArr; SaveDec2Hex(unsigned long, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDec2Hex(unsigned long, unsigned char*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
</UL>

<P><STRONG><a name="[6c7]"></a>GetApnPtr(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ram_phone_num.o(i._Z9GetApnPtrh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetApnPtr(unsigned char) &rArr; FL_APN_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_APN_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
</UL>

<P><STRONG><a name="[985]"></a>GetArgNum(POSESO_CMD_TYPE_E)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, process_income_message.o(i._Z9GetArgNum17POSESO_CMD_TYPE_E))
<BR><BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
</UL>

<P><STRONG><a name="[713]"></a>GetPicNum()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, process_c_proc_messages.o(i._Z9GetPicNumv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRfVideoQueueFull()
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelayedVideoHandler(DELAYED_DEVICE_OPTION_E, unsigned char, E_DELAYED_VIDEO_TYPE)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpddAckReceived(unsigned char, unsigned char, bool)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_msg(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngineSendConfig(int, int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_video_all_pirs_exec()
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoRequest(unsigned char)
</UL>

<P><STRONG><a name="[91b]"></a>GetSocket()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, videoengine.o(i._Z9GetSocketv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSocket()
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDialer()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_close_connection()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_crc_transmision()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_video_connection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_video_packet()
</UL>

<P><STRONG><a name="[23]"></a>I2C_0_ISR()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_isr.o(i._Z9I2C_0_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_0_ISR() &rArr; I2C_ISR(unsigned char) &rArr; SendMessageToI2CTask(unsigned short, unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ISR(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[913]"></a>InitMsmeQ()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, msme_q.o(i._Z9InitMsmeQv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitMsmeQ() &rArr; CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewQ(sEventDrivenQ*, Q_TYPE_E)
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initOptionsVector()
</UL>

<P><STRONG><a name="[75]"></a>Init_exec()</STRONG> (Thumb, 1820 bytes, Stack size 88 bytes, init.o(i._Z9Init_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = Init_exec() &rArr; Init_Rf_exec() &rArr; QueueHandler(unsigned char, unsigned char, unsigned char) &rArr; PrepareDataForTransmission(unsigned char, unsigned char, unsigned char) &rArr; SndUpdateFile(unsigned char) &rArr; FillHeader(S_RfApi_MsgHeader*, unsigned char*, unsigned char, unsigned char, unsigned char, bool) &rArr; SerialNumberCheck() &rArr; GenerateOffset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortEnableInterrupts(unsigned, unsigned)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_DigitalAudioClockPolarity(unsigned char, unsigned char, unsigned*)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_SendInitGsm(unsigned char, unsigned char, unsigned short, unsigned*, unsigned short*)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StrLen(char*, unsigned)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisableEnableLed(unsigned char, unsigned char)
<LI><a href="#[c43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetFwUpInProgress()
<LI><a href="#[bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_IsHwInitDone()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForConfRxData(unsigned char, unsigned short, unsigned*, unsigned short*, unsigned char, unsigned char, unsigned char, unsigned char, char*, unsigned char, char*, unsigned char, char*, unsigned char)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegForRxData(unsigned char, unsigned short, unsigned*, unsigned short*, void(*)(unsigned char, unsigned char*, unsigned short))
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmConfig(char*, unsigned char, char*, unsigned char, char*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SetModemPinsHE910()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[c65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Init()
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_send_msg(A2C_PROC_MESSAGE_E, unsigned char*, unsigned char)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCStatus()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_get_installation_completed()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit(unsigned char*, unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event1(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVectorOption(unsigned)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGsmEnabled()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_volume(unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aERROR(unsigned char, unsigned, unsigned char)
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_open_session(E_TRANSPORTS)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysoption(E_SYSTEM_OPTIONS)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChimeMasked()
<LI><a href="#[c6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_clr_worst_depth()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_SIM_CENTER_code()
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_start()
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_RingType()
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GSM_PIN_code()
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_ID2logical(unsigned char)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFibroHeader(unsigned char*)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPDATE_FIELD_ENTRY_EEprom_write(unsigned short, unsigned char, unsigned char*, unsigned*, unsigned char)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSMModuleType()
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChangePanelState(PANEL_COMM_STATE_E)
<LI><a href="#[c6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cproc_clr_worst_depth()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_db(unsigned char, unsigned char)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::setMicFixAutoMode(int, int)
<LI><a href="#[c6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnButtons()
<LI><a href="#[c69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_init()
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKfControlFromPanelEntry(unsigned char*)
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSimNumberFromEEProm()
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMainPowerMSGProcess(bool, bool, bool)
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Internal_Flash_CRC()
<LI><a href="#[c6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msme_clr_worst_depth()
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAlwaysAttachMode()
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJammSensitivity()
<LI><a href="#[c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaintSchedState()
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSecurityInit()
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJammDetectDur()
<LI><a href="#[c6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExti1_GSM_RI()
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSyncClockGSM()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRamMemMap()
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMutePhone(int, int)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChimeMask(int, int)
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVirtualSnRequest()
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActivationCode()
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initOptionsVector()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rf_exec()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_params(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> init.o(i._Z9Init_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[738]"></a>IsIDValid()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, smt_task.o(i._Z9IsIDValidv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IsIDValid() &rArr; InternalFlash_GetIdPtr(unsigned short) &rArr; InternalFlash_ReadPtr(unsigned short, unsigned short) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash_GetIdPtr(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJammingEventAction(S_CPUI_ButtonInfo*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
</UL>

<P><STRONG><a name="[3f5]"></a>IsKF3Type(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, process_c_proc_messages.o(i._Z9IsKF3Typeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsKF3Type(unsigned char) &rArr; get_KEY_FOB_ptr(unsigned char) &rArr; FL_KEY_FOB_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_KEY_FOB_ptr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FOB_build_msg(KEY_FOB_MESSAGE_E, U_KEY_FOB_PARAMS, unsigned char*, unsigned char)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKfRFMsg(unsigned char, unsigned char*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_send_error_msg(ERROR_E, U_DEV_TYPE, SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_proc_process_KEY_FOB_perimeter_arm(U_KEY_FOB_STATUS*, U_KEY_FOB_PARAMS*, unsigned char, unsigned char, U_DEV_TYPE, bool)
<LI><a href="#[c2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_ARM_request(S_KEY_FOB*, KEY_FOB_REQUESTS_E, unsigned char, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_msg(unsigned char, U_DEV_TYPE, unsigned char, unsigned char*)
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_USER_access_request(U_ACCESS_FLAGS*, unsigned char, unsigned char, U_DEV_TYPE)
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_unset_transactions(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, SECURITY_EVENT_E, unsigned char, unsigned char*)
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_disarm_actions(SECURITY_STATES_E, S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*, unsigned char, bool, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b95]"></a>IsOldMGLS(S_SEC_ZONE_ENTRY_DATA*)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ram_rf_sec_zone.o(i._Z9IsOldMGLSP21S_SEC_ZONE_ENTRY_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsOldMGLS(S_SEC_ZONE_ENTRY_DATA*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_update_entry(unsigned char, U_DEV_TYPE, unsigned char*)
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_check_rf_zones(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[56c]"></a>IsVoiceOn()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, voice_manager.o(i._Z9IsVoiceOnv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsVoiceOn()
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutgoingVoice()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_EchoNumbers_Func(unsigned char, S_CPUI_ButtonInfo*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceCallAction(S_CPUI_ButtonInfo*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyAction(S_CPUI_ButtonInfo*)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[85]"></a>LINK_exec()</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, link.o(i._Z9LINK_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = LINK_exec() &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Control_API_GetGsmStatus(S_GSM_STATUS*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveFunction(void(*)())
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_APN_config(DIAL_SEQUENCE_TYPE_E, char*, unsigned char*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckOnlineFlag(bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> link.o(i._Z9LINK_execv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[6c3]"></a>LOG_clear()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, log.o(i._Z9LOG_clearv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = LOG_clear() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_MP_handler_F(unsigned char*, unsigned char*, EL_DRIVER_STATUS*)
</UL>

<P><STRONG><a name="[321]"></a>LOG_event(E_LOG_EVENT, unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, log.o(i._Z9LOG_event11E_LOG_EVENTPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_add_event(E_LOG_EVENT, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_pause_msg(unsigned char, unsigned char)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattHandler_exec()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAL_SEQUENCE_exec()
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_start()
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINTENANCE_MACHINE_off(unsigned char)
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_receive_call(E_VOICE_DEVICE)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_INIT_exec()
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_restore_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_disarm(E_MEDIA, bool, S_POSESO_Reply*)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_remote_arm(E_MEDIA, unsigned char, unsigned char, unsigned char, bool, S_POSESO_Reply*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterArm(PerimeterArmTrigger_U)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerHandler_exec()
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vRestore()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set220vFail()
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKfRFMsg(unsigned char, unsigned char*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_message()
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_KEY_FOB_requests(S_KEY_FOB*, unsigned char, U_DEV_TYPE, KEY_FOB_REQUESTS_E)
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RKP_requests(unsigned char, U_DEV_TYPE, RKP_REQUESTS_E, unsigned char*)
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_decode_MESSAGE(U_DEV_TYPE, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForOPDDAcks_exec()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRfMsgLog(unsigned char*, DEVICE_TYPE)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_state_machine(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAFETY_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANIC_MACHINE_exec(S_SEC_EVENT*, U_SECURITY_FAULT_STATUS*)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPERVISORY_active_message(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogVideoEvent(void*, VIDEO_STATUS_E)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[67]"></a>MSME_exec()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, msme.o(i._Z9MSME_execv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = MSME_exec() &rArr; MSME_state_ready() &rArr; MSME_finalize_actions(S_MSME_MSG_EVENT*, bool) &rArr; GSM_Control_API_SaveCurrentStatistics() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_wait4answer()
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_start()
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_ready()
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_fail()
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_state_done()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> msme.o(i._Z15MSME_state_donev)
<LI> msme.o(i._Z15MSME_state_failv)
<LI> msme.o(i._Z16MSME_state_readyv)
<LI> scenarios.o(i._Z13GetFunctionIdPFvvE)
<LI> scenarios.o(i._Z20GetPointerToFunction13tFUNCTIONS_ID)
</UL>
<P><STRONG><a name="[a51]"></a>MSME_init(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, msme.o(i._Z9MSME_initPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSME_init(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemFlags_exec()
</UL>

<P><STRONG><a name="[698]"></a>MuxParser(unsigned char*, unsigned short, unsigned short*, unsigned char*)</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, gsm_mux_control.o(i._Z9MuxParserPhtPtS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MuxParser(unsigned char*, unsigned short, unsigned short*, unsigned char*) &rArr; FcsCalc(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FcsCalc(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Rx_Manager(void*)
</UL>

<P><STRONG><a name="[66f]"></a>OSAL_Init()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, osal_init.o(i._Z9OSAL_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSAL_Init() &rArr; OSAL_TaskCreate(unsigned char) &rArr; OSAL_PortMailBoxCreate(unsigned short, void**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskCreate(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__keilInitTask()
</UL>

<P><STRONG><a name="[734]"></a>PDA_Write(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_pdaprocess.o(i._Z9PDA_Writet))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PDA_send(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[139]"></a>RFManager(void*)</STRONG> (Thumb, 802 bytes, Stack size 16 bytes, rf_manager_task.o(i._Z9RFManagerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RFManager(void*) &rArr; Radio_SendBpskMsg(unsigned char*, unsigned) &rArr; Radio_LoadBpskCfg(bool, unsigned char) &rArr; Radio_CalFreq(unsigned) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueInsert(OSAL_PriorityQueue*, unsigned, void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PriorityQueueCreate(unsigned char, unsigned short, unsigned char, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_WaitOnMessage(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MsgFree(OSAL_Msg*)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StartTimer(unsigned short, unsigned, unsigned char)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvUpdateStatus(unsigned, S_RF_ReqInfo*)
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvExtractFromQ(OSAL_PriorityQueue*)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAttribHandler(unsigned, unsigned, S_RF_ReqInfo*, unsigned char*)
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMsgBuffers(unsigned, unsigned, S_RF_ReqInfo*)
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleGetParams(OSAL_Msg*)
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrvHandleExcParams(S_RF_ReqInfo*, S_Radio_StaticData*)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_GetTimeMsec()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StopTimer(unsigned short)
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RestoreEcopRf1Cfg()
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_StaticDataPtrSet(void*)
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pRadio_GetStatistics()
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleTraffic()
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_TrafficAbort()
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleGdo2(unsigned)
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadRSSI()
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendMsg(unsigned char*, unsigned, unsigned)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_DrvInit(OSAL_PriorityQueue*, S_Radio_StaticData*, S_RF_ReqInfo*, SAVE_LAST_RF_PARAMS_S*, unsigned char)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_db.o(.constdata)
</UL>
<P><STRONG><a name="[3c4]"></a>RTC_Start()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc_func.o(i._Z9RTC_Startv))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeAndDate(RTC_Time_t*)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate(unsigned char, unsigned char, unsigned short)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidDate(unsigned char*)
</UL>

<P><STRONG><a name="[6e3]"></a>RTS_OnOff(int)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, comm_common_funcs.o(i._Z9RTS_OnOffi))
<BR><BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910SetRTSLine(unsigned char)
</UL>

<P><STRONG><a name="[4d2]"></a>SendRfMsg()</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sendrfmsg.o(i._Z9SendRfMsgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfTxBuf()
<LI><a href="#[bfd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendPacketPreambleCounter()
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendPacketTimeOut()
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfRetryOrBroadcast()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxPacket(unsigned char**)
</UL>

<P><STRONG><a name="[c78]"></a>SetIOport()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i._Z9SetIOportv))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5df]"></a>Set_voice(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, control_panel.o(i._Z9Set_voiceb))
<BR><BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_receive_call(E_VOICE_DEVICE)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_DTMF_handler(unsigned char)
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PROC_decode_msg(unsigned char*, unsigned char)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_decode_status(S_GSM_STATUS*)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVoiceCall(S_CPUI_ButtonInfo*)
</UL>

<P><STRONG><a name="[b50]"></a>SndUdpMsg(FLAG_FIELD*, unsigned char*, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, apipckprocessing.o(i._Z9SndUdpMsgP10FLAG_FIELDPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SndUdpMsg(FLAG_FIELD*, unsigned char*, unsigned char) &rArr; EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*) &rArr; G_PROC_send(E_GSM_A2G_COMMANDS, unsigned char*, unsigned char*, unsigned char) &rArr; aERROR(unsigned char, unsigned, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATALINK_set_packet_processed()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_build_frame_F(unsigned char*, unsigned char, unsigned char, E_PANEL_MODE, E_PROTOCOL_TYPE, unsigned char*, unsigned char, unsigned char*, unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EL_send_cmd_F(unsigned char*, unsigned char, EL_DRIVER_STATUS*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApiPackProcHandler_exec()
</UL>

<P><STRONG><a name="[547]"></a>StartInit()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, init.o(i._Z9StartInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartInit() &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral1(unsigned char, tFUNCTIONS_ID)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFtimerInit()
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartReadSysFlags()
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitScheduler()
</UL>

<P><STRONG><a name="[1e]"></a>UART0_ISR()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_isr.o(i._Z9UART0_ISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART0_ISR() &rArr; UART_ISR(unsigned char) &rArr; OSAL_SendMessageToTaskFromInt(OSAL_Msg*) &rArr; OSAL_PortSendMessageToTaskFromInt(void*, void*) &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup_m.o(RESET)
</UL>
<P><STRONG><a name="[6d5]"></a>UART_Free(unsigned char, unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uart_api.o(i._Z9UART_Freehhht))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = UART_Free(unsigned char, unsigned char, unsigned char, unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SendMessageToTask(OSAL_Msg*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocMsg()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_STM_Control(void*)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HE910_AnswerHandler(unsigned char, S_GSM_FUNC_TABLE_HANDLE*, char*, unsigned short)
<LI><a href="#[c09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationDeactivate()
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestApplicationActivate()
</UL>

<P><STRONG><a name="[418]"></a>UART_Init(unsigned char)</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, uart_func.o(i._Z9UART_Inith))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Init(unsigned char) &rArr; HAL_EnablePeripheralPower(unsigned char) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnablePeripheralPower(unsigned char)
<LI><a href="#[c3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllocatedChannelId(unsigned char)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartManager(void*)
</UL>

<P><STRONG><a name="[9c3]"></a>UpdateRkp()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, security.o(i._Z9UpdateRkpv))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_clear_indications(bool)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollInteruptBits_exec()
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCallSDCommand(unsigned char, bool, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[2d5]"></a>ascii2hex(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, util.o(i._Z9ascii2hexh))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2int(unsigned char*, unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2int(unsigned char, unsigned char)
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndExtractCyberModeLegalParams(unsigned char*, unsigned char*)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[a47]"></a>getUserId(unsigned char*)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, process_income_message.o(i._Z9getUserIdPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = getUserId(unsigned char*) &rArr; decstr2int2(unsigned char*) &rArr; decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2int2(unsigned char*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_USER_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramUserInterface(unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[2de]"></a>hex2ascii(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, util.o(i._Z9hex2asciih))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2hexstr(unsigned, unsigned char*, unsigned char)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[5cc]"></a>is_letter(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, util.o(i._Z9is_letterh))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ligal_char(unsigned char)
</UL>

<P><STRONG><a name="[1dc]"></a>__cxxabiv1::__class_type_info::~__class_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[c71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::~type_info()
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[ccb]"></a>__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD1Ev), UNUSED)

<P><STRONG><a name="[1de]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info()
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[ccc]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD1Ev), UNUSED)

<P><STRONG><a name="[1c9]"></a>C2AMess::data()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, c2amess.o(i._ZN7C2AMess4dataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C2AMess::data()
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanicAction(S_CPUI_ButtonInfo*)
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEntryTime(int, int, int*, void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progExitTime(int, int, int*, void*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c2amess.o(.constdata__ZTV7C2AMess)
</UL>
<P><STRONG><a name="[1cb]"></a>C2AMess::isTaken()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, c2amess.o(i._ZN7C2AMess7isTakenEv))
<BR>[Address Reference Count : 1]<UL><LI> c2amess.o(.constdata__ZTV7C2AMess)
</UL>
<P><STRONG><a name="[1c8]"></a>C2AMess::calc_sum()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, c2amess.o(i._ZN7C2AMess8calc_sumEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C2AMess::calc_sum()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c2amess.o(.constdata__ZTV7C2AMess)
</UL>
<P><STRONG><a name="[a9d]"></a>C2AMess::C2AMess(int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, c2amess.o(i._ZN7C2AMessC1Ei))
<BR><BR>[Called By]<UL><LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_KpdOutStub_c
</UL>

<P><STRONG><a name="[ccd]"></a>C2AMess::C2AMess__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, c2amess.o(i._ZN7C2AMessC1Ei), UNUSED)

<P><STRONG><a name="[1cc]"></a>C2AMess::operator =(int)</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, c2amess.o(i._ZN7C2AMessaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = C2AMess::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanicAction(S_CPUI_ButtonInfo*)
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEntryTime(int, int, int*, void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progExitTime(int, int, int*, void*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullArmAction(S_CPUI_ButtonInfo*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PartArmPanel(int, S_CPUI_ButtonInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c2amess.o(.constdata__ZTV7C2AMess)
</UL>
<P><STRONG><a name="[1ce]"></a>C2AMess::operator &lang;&lang;(const char*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, c2amess.o(i._ZN7C2AMesslsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = C2AMess::operator &lang;&lang;(const char*) &rArr; OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_Buttons_CheckPin(S_CPUI_ButtonInfo*, const unsigned char*, int)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progEntryTime(int, int, int*, void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progExitTime(int, int, int*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c2amess.o(.constdata__ZTV7C2AMess)
</UL>
<P><STRONG><a name="[1cf]"></a>C2AMess::operator &lang;&lang;(const User&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c2amess.o(i._ZN7C2AMesslsERK4User))
<BR>[Address Reference Count : 1]<UL><LI> c2amess.o(.constdata__ZTV7C2AMess)
</UL>
<P><STRONG><a name="[1d0]"></a>SysPower::getVoltage()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, syspower.o(i._ZN8SysPower10getVoltageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysPower::getVoltage()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syspower.o(.constdata__ZTV8SysPower)
</UL>
<P><STRONG><a name="[1d1]"></a>SysPower::getDCJackVoltage()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, syspower.o(i._ZN8SysPower16getDCJackVoltageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysPower::getDCJackVoltage()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syspower.o(.constdata__ZTV8SysPower)
</UL>
<P><STRONG><a name="[c72]"></a>SysPower::SysPower()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, syspower.o(i._ZN8SysPowerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_MAIN_C
</UL>

<P><STRONG><a name="[cce]"></a>SysPower::SysPower__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syspower.o(i._ZN8SysPowerC1Ev), UNUSED)

<P><STRONG><a name="[1d9]"></a>SysSound::isFullDuplex()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSound12isFullDuplexEv))
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[8f6]"></a>SysSound::Set_Speaker_Vol(bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSound15Set_Speaker_VolEb))
<BR><BR>[Called By]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerVolumeStep(bool)
</UL>

<P><STRONG><a name="[1d5]"></a>SysSound::setMicFixAutoMode(int, int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSound17setMicFixAutoModeEii))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_exec()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[1db]"></a>SysSound::stop()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, syssound.o(i._ZN8SysSound4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SysSound::stop() &rArr; CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_BeepStop()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_ConnectToSpeaker(unsigned, unsigned, unsigned char, unsigned*)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingTonePlaying()
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRingTone(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[1da]"></a>SysSound::isMicOn()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSound7isMicOnEv))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIManager(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[1d8]"></a>SysSound::muteMic()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, syssound.o(i._ZN8SysSound7muteMicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SysSound::muteMic() &rArr; CODEC_MicOnOff(int, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_MicOnOff(int, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[1d6]"></a>SysSound::muteSpk(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSound7muteSpkEi))
<BR><BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_TerminateOp(S_VAT_Info*, S_VatTaskGlobalData*, unsigned char)
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerVolumeStep(bool)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_PerformBeep(unsigned char, unsigned char, S_CPUI_BeepInfo**, unsigned char)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSirenOff()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_process_exec()
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAnswerAfterRingsOption(unsigned char)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoFullDuplexOption(unsigned char)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularCallOption(unsigned char)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpyModeOption(unsigned char)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_off()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_save_mode_entrance_exec()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_RECEIVE_exec()
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToFullDuplex()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[1d7]"></a>SysSound::muteSpk(int, unsigned*)</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, syssound.o(i._ZN8SysSound7muteSpkEiPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SysSound::muteSpk(int, unsigned*) &rArr; CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*)
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_AutoMicrophoneGain(unsigned char, unsigned char, unsigned*)
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_PowerOnOff(int, unsigned char, unsigned*)
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetSpkVol(signed char, unsigned char, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitCodec()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[1d4]"></a>SysSound::setMicVol(int)</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, syssound.o(i._ZN8SysSound9setMicVolEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SysSound::setMicVol(int) &rArr; CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*) &rArr; CODEC_SetRegister(unsigned char, unsigned short, unsigned char, unsigned*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_FixedMicrophoneGain(unsigned char, unsigned char, unsigned*)
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_AutoMicrophoneGain(unsigned char, unsigned char, unsigned*)
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_MicOnOff(int, unsigned char, unsigned*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_mute_mic(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[1d2]"></a>SysSound::setSpkVol(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSound9setSpkVolEi))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_on()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syssound.o(.constdata__ZTV8SysSound)
</UL>
<P><STRONG><a name="[c73]"></a>SysSound::SysSound()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSoundC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_MAIN_C
</UL>

<P><STRONG><a name="[ccf]"></a>SysSound::SysSound__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syssound.o(i._ZN8SysSoundC1Ev), UNUSED)

<P><STRONG><a name="[c8d]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[74f]"></a>fnG729ADecInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vocoder_stub.o(i.fnG729ADecInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fnG729ADecInit &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_InitDecoder(S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[a90]"></a>fnG729ADecRun</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vocoder_stub.o(i.fnG729ADecRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fnG729ADecRun &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FileTransmissionHandler(S_VAT_Info*, S_VatTaskGlobalData*)
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VAT_FlashDoneHandler(S_VAT_Info*, S_VatTaskGlobalData*)
</UL>

<P><STRONG><a name="[c44]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[c76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSendMessageToTaskFromInt(void*, void*)
</UL>

<P><STRONG><a name="[536]"></a>isxdigit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, apipckprocessing.o(i.isxdigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isxdigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexPerByte(unsigned char*, unsigned short*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectCharBuf(unsigned char*, unsigned short*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ee]"></a>main</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = main &rArr; SSP_Init(unsigned char, unsigned char, unsigned) &rArr; OSAL_PortMutexCreate(unsigned**) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init(unsigned char, unsigned char, unsigned)
<LI><a href="#[c7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitResetSource()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResetWatchdog()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SPI_SetPins(unsigned char)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortEnableInterrupts(unsigned, unsigned)
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortDisableInterrupts(unsigned, unsigned)
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_InitInterruptTable()
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortStart()
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInactivityMachine()
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RefreshJDSupervision()
<LI><a href="#[c77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearIsInitDone()
<LI><a href="#[c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPLL()
<LI><a href="#[c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreMain()
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitScheduler()
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIntefaceMachine()
<LI><a href="#[c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIOport()
<LI><a href="#[c79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_MAIN_C_SysPwr___Z27OSAL_PortEnableCpuInterruptv
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_VF()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c7b]"></a>os_error</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[c75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
</UL>

<P><STRONG><a name="[111]"></a>os_idle_demon</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = os_idle_demon &rArr; OSAL_IdleTask() &rArr; LegacyFunc() &rArr; GenerateScheduler_exec() &rArr; OperateFunction(void(*)()) &rArr; OperateTimeBasedEvants(tFUNCTIONS_ID) &rArr; LoadNewScenarios(tQ_TYPE) &rArr; LoadHighPrioTasksScenario(tSCENARIO_ID) &rArr; InsertScheduler_EventToQ(void(*)(), unsigned char, tQ_TYPE, long) &rArr; SendItemToPriorityQ(sPriorityQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInPriorityQ(sPriorityQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_IdleTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[c91]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_tmr_call), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[47]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[c7c]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[c7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[c80]"></a>rt_chk_robin</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[c82]"></a>rt_dec_dly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[c83]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[f8]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z20OSAL_PortSuspendTaskj)
</UL>
<P><STRONG><a name="[c85]"></a>rt_evt_psh</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[48]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[c7e]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[c8f]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[c88]"></a>rt_init_stack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[fc]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[c0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSendMessageToTaskFromInt(void*, void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_port.o(i._Z22OSAL_PortIsMailBoxFullPv)
<LI> osal_port.o(i._Z23OSAL_PortIsMailBoxEmptyPv)
</UL>
<P><STRONG><a name="[fd]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z22OSAL_PortMailBoxCreatetPPv)
</UL>
<P><STRONG><a name="[c89]"></a>rt_mbx_psh</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[100]"></a>rt_mbx_send</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mbx_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z26OSAL_PortSendMessageToTaskPvS_)
</UL>
<P><STRONG><a name="[fe]"></a>rt_mbx_wait</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z22OSAL_PortWaitOnMessagePv)
</UL>
<P><STRONG><a name="[f7]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z20OSAL_PortMutexCreatePPj)
</UL>
<P><STRONG><a name="[fa]"></a>rt_mut_release</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_port.o(i._Z21OSAL_PortMutexReleasePj)
<LI> osal_port.o(i._Z26OSAL_PortForceMutexReleasePj)
</UL>
<P><STRONG><a name="[f9]"></a>rt_mut_wait</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z21OSAL_PortMutexCapturePj)
</UL>
<P><STRONG><a name="[21b]"></a>rt_pop_req</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[c76]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[c75]"></a>rt_psq_enq</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_psq_enq &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[c7d]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[c81]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[c8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[c82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[c85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[c84]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[c8a]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[c86]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[c8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[c89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[c85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[c8c]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[c8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
</UL>

<P><STRONG><a name="[c8b]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[c81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[219]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_stk_check &rArr; os_error &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[c7f]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[cf]"></a>rt_sys_init</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[c8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[c8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z14OSAL_PortStartv)
</UL>
<P><STRONG><a name="[21c]"></a>rt_systick</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[c7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[c7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[c90]"></a>rt_tmr_tick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortTickerHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[d6]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_SetTaskHandle
<LI><a href="#[c87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z19OSAL_PortTaskCreatePFvPvEPKatS_tPjS4_)
</UL>
<P><STRONG><a name="[d0]"></a>rt_tsk_delete</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[c86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[c83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osal_port.o(i._Z14__keilInitTaskv)
<LI> osal_port.o(i._Z19OSAL_PortTaskDeletev)
</UL>
<P><STRONG><a name="[10b]"></a>rt_tsk_lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_system.o(i.rt_tsk_lock))
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z33OSAL_PortTaskDisableContextSwitchv)
</UL>
<P><STRONG><a name="[207]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortGetSelfTaskHandle()
</UL>

<P><STRONG><a name="[10a]"></a>rt_tsk_unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.rt_tsk_unlock))
<BR>[Address Reference Count : 1]<UL><LI> osal_port.o(i._Z32OSAL_PortTaskEnableContextSwitchv)
</UL>
<P><STRONG><a name="[234]"></a>sfx_AES_128_cbc_encrypt</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, sigfox_port.o(i.sfx_AES_128_cbc_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sfx_AES_128_cbc_encrypt &rArr; PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned) &rArr; aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAES
</UL>

<P><STRONG><a name="[227]"></a>sfx_change_frequency</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, sigfox_port.o(i.sfx_change_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sfx_change_frequency &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxTxTestMode
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_frequency
</UL>

<P><STRONG><a name="[225]"></a>sfx_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sigfox_port.o(i.sfx_close))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxClose
</UL>

<P><STRONG><a name="[22e]"></a>sfx_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sigfox_port.o(i.sfx_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sfx_delay &rArr; OSAL_PortSuspendTask(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendFrame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxTxTestMode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendOutOfBand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendBit
</UL>

<P><STRONG><a name="[224]"></a>sfx_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sigfox_port.o(i.sfx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sfx_free &rArr; OSAL_HeapFreeBuff(unsigned**) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxClose
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendOutOfBand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
</UL>

<P><STRONG><a name="[21f]"></a>sfx_get_nv_mem</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sigfox_port.o(i.sfx_get_nv_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sfx_get_nv_mem &rArr; EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*) &rArr; EEPROM_Read(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read1(unsigned, unsigned char*, unsigned short, unsigned short, unsigned*)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_frequency
</UL>

<P><STRONG><a name="[222]"></a>sfx_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sigfox_port.o(i.sfx_init))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxInit
</UL>

<P><STRONG><a name="[625]"></a>sfx_initDataBase</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sigfox_port.o(i.sfx_initDataBase))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_ManagerTask(void*)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSFXLibrary()
</UL>

<P><STRONG><a name="[21e]"></a>sfx_malloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sigfox_port.o(i.sfx_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sfx_malloc &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendOutOfBand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
</UL>

<P><STRONG><a name="[22d]"></a>sfx_send</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, sigfox_port.o(i.sfx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sfx_send &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendFrame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxTxTestMode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendOutOfBand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendBit
</UL>

<P><STRONG><a name="[221]"></a>sfx_set_nv_mem</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, sigfox_port.o(i.sfx_set_nv_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = sfx_set_nv_mem &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_PortSuspendTask(unsigned)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_TaskBusyPoll(volatile unsigned*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrame
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_frequency
</UL>

<P><STRONG><a name="[4b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[c92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4c3]"></a>Radio_CalExec()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z13Radio_CalExecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Radio_CalExec() &rArr; Radio_SendStrobe(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoDefaultState()
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoTx(unsigned char)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>

<P><STRONG><a name="[57d]"></a>Radio_GotoIdle()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z14Radio_GotoIdlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Radio_GotoIdle() &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
</UL>
<BR>[Called By]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_WakeFromWORMode()
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq_FSCAL(unsigned char*, unsigned char*)
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_TrafficAbort()
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendMsg(unsigned char*, unsigned, unsigned)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoOff()
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
</UL>

<P><STRONG><a name="[4c4]"></a>Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, cc11xxdrv.o(i._Z14Radio_RxTxDatahhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxTxData(unsigned, unsigned char*, unsigned char)
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CheckMisoStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetModulation(unsigned char)
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetRxTxBytes(unsigned char)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetParams(unsigned char)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalExec()
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_EnterFreqOffCalcMode()
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_QuitFreqOffCalcMode()
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetPacketLengthCfg(unsigned char, E_CC11XX_Packet_Length_Cfg)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadNextBpskSymbol()
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_TxFifoSendHandler()
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetAddressFilter(E_RfDrv_Address_Filter, unsigned char)
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoDefaultState()
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetCarrierSense(E_RfDrv_CS_RelThreshold, signed char, unsigned char)
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetAttenuation(E_RfDrv_Attenuation)
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetChipVersion(unsigned char*)
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadWriteRegs(unsigned, unsigned, unsigned char*, int)
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq_FSCAL(unsigned char*, unsigned char*)
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetHwTxPower(signed char)
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetBaudRate(E_CC11XX_ModemBaudRate)
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FillPaTable()
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CheckState()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetTxGain(unsigned char)
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReadRSSI()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FullInit()
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendMsg(unsigned char*, unsigned, unsigned)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq(unsigned)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>

<P><STRONG><a name="[4c1]"></a>Radio_FlushFifo(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z15Radio_FlushFifoh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Radio_FlushFifo(unsigned char) &rArr; Radio_SendStrobe(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsRxTxOverflow(unsigned char, unsigned char)
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendBpskMsg(unsigned char*, unsigned)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendMsg(unsigned char*, unsigned, unsigned)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>

<P><STRONG><a name="[72f]"></a>Radio_SetParams(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z15Radio_SetParamsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_SetParams(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_WakeFromWORMode()
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetWORMode(int)
</UL>

<P><STRONG><a name="[29c]"></a>Radio_SetRxGDOs()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z15Radio_SetRxGDOsv))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClrPend(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReturnToWOR()
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoDefaultState()
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Init()
</UL>

<P><STRONG><a name="[3ea]"></a>Radio_SendStrobe(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cc11xxdrv.o(i._Z16Radio_SendStrobeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Radio_SendStrobe(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReturnToWOR()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FlushFifo(unsigned char)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalExec()
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoDefaultState()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_CalFreq_FSCAL(unsigned char*, unsigned char*)
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetWORMode(int)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoOff()
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoTx(unsigned char)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reset()
</UL>

<P><STRONG><a name="[8df]"></a>Radio_ReturnToWOR()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z17Radio_ReturnToWORv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Radio_ReturnToWOR() &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SendStrobe(unsigned char)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SetRxGDOs()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_VerifyIdleState()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsRxTxOverflow(unsigned char, unsigned char)
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
</UL>

<P><STRONG><a name="[971]"></a>Radio_GetRxTxBytes(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cc11xxdrv.o(i._Z18Radio_GetRxTxBytesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Radio_GetRxTxBytes(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_TxFifoSendHandler()
</UL>

<P><STRONG><a name="[3e8]"></a>Radio_InitComStruct()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cc11xxdrv.o(i._Z19Radio_InitComStructv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Radio_InitComStruct() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reset()
</UL>

<P><STRONG><a name="[57f]"></a>Radio_SetModulation(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z19Radio_SetModulationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Radio_SetModulation(unsigned char) &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_LoadBpskCfg(bool, unsigned char)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Carrier(unsigned, unsigned)
</UL>

<P><STRONG><a name="[a4c]"></a>Radio_IsRxTxOverflow(unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cc11xxdrv.o(i._Z20Radio_IsRxTxOverflowhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Radio_IsRxTxOverflow(unsigned char, unsigned char) &rArr; Radio_GotoRx(unsigned char) &rArr; Radio_VerifyIdleState() &rArr; Radio_CheckState() &rArr; Radio_RxTxData(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SPI_RxTxData(unsigned, unsigned char*, unsigned char) &rArr; SPI_SendByte(unsigned char, unsigned char*) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_ReturnToWOR()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_FlushFifo(unsigned char)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GotoRx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_HandleUnKnownGDOEvent()
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_RxFifoReceiveHandler(unsigned char)
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_TxFifoSendHandler()
</UL>

<P><STRONG><a name="[537]"></a>GetDecStingLen(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, test_func.o(i._Z14GetDecStingLenj))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicesSwVer(char*, unsigned short, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelSwVer(char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[c87]"></a>rt_init_context</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[c4d]"></a>IsInterestingDevice(unsigned char*, Inf4SendTechinfInfoTask_t*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, c_proc.o(i._Z19IsInterestingDevicePhP25Inf4SendTechinfInfoTask_t))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
</UL>

<P><STRONG><a name="[c4e]"></a>StaticFuncItrSendNextDev(Inf4SendTechinfInfoTask_t*)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, c_proc.o(i._Z24StaticFuncItrSendNextDevP25Inf4SendTechinfInfoTask_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StaticFuncItrSendNextDev(Inf4SendTechinfInfoTask_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_SendTechnicalInformation_exe()
</UL>

<P><STRONG><a name="[144]"></a>c_proc_build_comm_dest_JD_config(unsigned char*, void*)</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, c_proc.o(i._Z32c_proc_build_comm_dest_JD_configPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_proc_build_comm_dest_JD_config(unsigned char*, void*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DOMAIN_EXTANSION_read(unsigned char)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PHONE_NUM_read(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c_proc.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>c_proc_build_mode_bits_JD_config(unsigned char*, void*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, c_proc.o(i._Z32c_proc_build_mode_bits_JD_configPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_proc_build_mode_bits_JD_config(unsigned char*, void*) &rArr; c_proc_build_regular_entry_JD_config(unsigned char*, void*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_regular_entry_JD_config(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c_proc.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>c_proc_build_sim_number_JD_config(unsigned char*, void*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, c_proc.o(i._Z33c_proc_build_sim_number_JD_configPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = c_proc_build_sim_number_JD_config(unsigned char*, void*) &rArr; Message_BuildSimNumberHex(unsigned char*, unsigned char*) &rArr; decstr2int(unsigned char*, unsigned char) &rArr; char2int(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message_BuildSimNumberHex(unsigned char*, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c_proc.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>c_proc_build_customer_code_JD_config(unsigned char*, void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, c_proc.o(i._Z36c_proc_build_customer_code_JD_configPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_proc_build_customer_code_JD_config(unsigned char*, void*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c_proc.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>c_proc_build_regular_entry_JD_config(unsigned char*, void*)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, c_proc.o(i._Z36c_proc_build_regular_entry_JD_configPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_proc_build_regular_entry_JD_config(unsigned char*, void*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_proc_build_mode_bits_JD_config(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c_proc.o(.constdata)
</UL>
<P><STRONG><a name="[8f7]"></a>StartDelayedAlarm()</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, control_panel.o(i._Z17StartDelayedAlarmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = StartDelayedAlarm() &rArr; PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char) &rArr; RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char) &rArr; RKP_send_message() &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PERIMETER_RKP_update(unsigned char, U_SECURITY_FAULT_STATUS, unsigned char, bool, unsigned char)
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexAlarm()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_alarm_details(unsigned char*)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_PANIC_state()
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDelayedPerimeterTamper()
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPerimeterSirenDevice()
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterSirenOn()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_update_status()
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RKP_send_msg(RKP_MESSAGE_E, RKP_MSG_VAL_U*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progressive_siren_exec()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady_siren_exec()
</UL>

<P><STRONG><a name="[9b9]"></a>GetBateryInfDevType(unsigned char, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, devicebatterystate.o(i._Z19GetBateryInfDevTypehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetBateryInfDevType(unsigned char, unsigned char) &rArr; CheckMajorAndMinorVersions(unsigned char, unsigned char) &rArr; ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecDeviceTypeInterpreter(RF_SEC_ZONE_TYPE_E)
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMajorAndMinorVersions(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDeviceBatteryLevelTable(Inf4SendTechinfInfoTask_t*)
</UL>

<P><STRONG><a name="[9ba]"></a>CheckMajorAndMinorVersions(unsigned char, unsigned char)</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, devicebatterystate.o(i._Z26CheckMajorAndMinorVersionshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckMajorAndMinorVersions(unsigned char, unsigned char) &rArr; ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_GetDeviceVersionCode(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBateryInfDevType(unsigned char, unsigned char)
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDevSupportBatteryInf(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4]"></a>RejectOption(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gsm_comm.o(i._Z12RejectOptionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = RejectOption(unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfiguarbleHandlingOption_SD(unsigned char)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurableHandlingOption(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_comm.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>SpyModeOption(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, gsm_comm.o(i._Z13SpyModeOptionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = SpyModeOption(unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMute(unsigned char)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCallHandling(unsigned char)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_comm.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>RegularCallOption(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gsm_comm.o(i._Z17RegularCallOptionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RegularCallOption(unsigned char) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_RefreshPanelState()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_NotifyStateChange(unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCallHandling(unsigned char)
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRingProcess()
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfiguarbleHandlingOption_SD(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_comm.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>AutoFullDuplexOption(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gsm_comm.o(i._Z20AutoFullDuplexOptionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AutoFullDuplexOption(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCallHandling(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_comm.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>VoiceVerificationOption(unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gsm_comm.o(i._Z23VoiceVerificationOptionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = VoiceVerificationOption(unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_SetMux(unsigned char)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCallHandling(unsigned char)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2G_PutBuffer(char**, unsigned*, unsigned short*)
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRingProcess()
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurableHandlingOption(unsigned char)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAnswerAfterRingsOption(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_comm.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>AutoAnswerAfterRingsOption(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gsm_comm.o(i._Z26AutoAnswerAfterRingsOptionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = AutoAnswerAfterRingsOption(unsigned char) &rArr; VoiceVerificationOption(unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::muteSpk(int)
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRemoteCallInRings()
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCallHandling(unsigned char)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceVerificationOption(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_comm.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ConfigurableHandlingOption(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_comm.o(i._Z26ConfigurableHandlingOptionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ConfigurableHandlingOption(unsigned char) &rArr; VoiceVerificationOption(unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceVerificationOption(unsigned char)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RejectOption(unsigned char)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_comm.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ConfiguarbleHandlingOption_SD(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_comm.o(i._Z29ConfiguarbleHandlingOption_SDh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ConfiguarbleHandlingOption_SD(unsigned char) &rArr; RejectOption(unsigned char) &rArr; A2G_PutBuffer(char**, unsigned*, unsigned short*) &rArr; GSM_Message_Start_TCP_Full_Msg_Cycle(unsigned char, char*, unsigned short, unsigned short, char*, unsigned short, char*, unsigned char, char*, unsigned short, unsigned, unsigned short, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularCallOption(unsigned char)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RejectOption(unsigned char)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_sysflag_ptr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_comm.o(.data)
</UL>
<P><STRONG><a name="[26e]"></a>FillString(unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msme.o(i._Z10FillStringPhS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FillString(unsigned char*, unsigned char*, unsigned char) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[2ef]"></a>MSME_update_Timestamp_on_arm_detection(unsigned char*, S_MSME_MSG_EVENT*, bool)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, msme.o(i._Z38MSME_update_Timestamp_on_arm_detectionPhP16S_MSME_MSG_EVENTb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSME_update_Timestamp_on_arm_detection(unsigned char*, S_MSME_MSG_EVENT*, bool) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicker()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSubtract(unsigned long, unsigned long)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMode2Device(S_SEC_ZONE_ENTRY_DATA*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2decstr(unsigned long, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddArgToMsg(S_MSME_MSG_EVENT*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[518]"></a>Append_String(unsigned char*, int, const SIZED_STRING_S*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, process_c_proc_messages.o(i._Z13Append_StringPhiPK14SIZED_STRING_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Append_String(unsigned char*, int, const SIZED_STRING_S*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLabRFLine(int, bool, int, bool)
</UL>

<P><STRONG><a name="[9f5]"></a>StaticAlarmDingDong(unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, process_c_proc_messages.o(i._Z19StaticAlarmDingDongPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = StaticAlarmDingDong(unsigned char*) &rArr; SIREN_send_cmd(E_SIREN_RF_COMMANDS) &rArr; ALARM_on(ALRAM_TYPE_E, unsigned char, bool) &rArr; CPUI_NotifyStateChange(unsigned short) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_on(ALRAM_TYPE_E, unsigned char, bool)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
</UL>
<BR>[Called By]<UL><LI><a href="#[c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC__process_security_open_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[bd9]"></a>StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char)</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, process_c_proc_messages.o(i._Z26StaticMagCloseEntryExitMsg15CODE_ARGUMENT_UP13S_RF_SEC_ZONE21RF_DETECTOR_SIGNALS_E10U_DEV_TYPEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = StaticMagCloseEntryExitMsg(CODE_ARGUMENT_U, S_RF_SEC_ZONE*, RF_DETECTOR_SIGNALS_E, U_DEV_TYPE, unsigned char, unsigned char) &rArr; SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char) &rArr; MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char) &rArr; MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*) &rArr; InsetMsmeEventToQ(S_MSME_MSG_EVENT, unsigned char) &rArr; SaveToGeneral1(unsigned char, tFUNCTIONS_ID) &rArr; SaveToGeneral(unsigned char, tFUNCTIONS_ID, tQ_TYPE, long) &rArr; SaveScenario(tSCENARIO_ID) &rArr; IsAlreadySaved(tSCENARIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexRemoveDeviceFromQueue(int, RF_DETECTOR_SIGNALS_E)
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexWasAlarm()
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexEntry()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterWasAlarm()
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMagMsgEnabled()
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCloseEntryExitMsg(S_SEC_ZONE_ENTRY_DATA*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm2(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
<LI><a href="#[c49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_process_RF_SEC_ZONE_close_alarm(S_RF_SEC_ZONE*, U_DEV_TYPE, RF_DETECTOR_SIGNALS_E, unsigned char, SECURITY_STATES_E)
</UL>

<P><STRONG><a name="[3ff]"></a>SigFoxEnDis(unsigned char, unsigned char)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, process_income_message.o(i._Z11SigFoxEnDishh))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SigFoxEnDis(unsigned char, unsigned char) &rArr; ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE) &rArr; ENTRY_EEprom_write(unsigned short, unsigned char*, unsigned char) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrCreateEntry(unsigned short, unsigned char, unsigned*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_write(unsigned short, unsigned char*, unsigned char, U_DEV_TYPE)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMT_EnDisSigFox(unsigned short*, unsigned, unsigned char*)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[148]"></a>CheckDuplicateSN(unsigned char*, int, int)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, process_income_message.o(i._Z16CheckDuplicateSNPhii))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CheckDuplicateSN(unsigned char*, int, int) &rArr; GetFieldAddress(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldAddress(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> process_income_message.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>CheckDuplicateCUI(unsigned char*, int, int)</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, process_income_message.o(i._Z17CheckDuplicateCUIPhii))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CheckDuplicateCUI(unsigned char*, int, int) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldAddress(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> process_income_message.o(.constdata)
</UL>
<P><STRONG><a name="[576]"></a>DeviceNotDuplicate(unsigned char*, int, int)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, process_income_message.o(i._Z18DeviceNotDuplicatePhii))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DeviceNotDuplicate(unsigned char*, int, int) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramUserInterface(unsigned char*, S_POSESO_Reply*)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramKeyPad(unsigned char*, S_POSESO_Reply*, unsigned char)
</UL>

<P><STRONG><a name="[7ea]"></a>ProcessSetVirtualSnPoseso(unsigned char*, MSME_MSG_E*, unsigned char*)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, process_income_message.o(i._Z25ProcessSetVirtualSnPosesoPhP10MSME_MSG_ES_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ProcessSetVirtualSnPoseso(unsigned char*, MSME_MSG_E*, unsigned char*) &rArr; hexstr2int(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2int(unsigned char*, unsigned char)
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_GetActive(TWriteVirtualSnObj*)
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_Config(TWriteVirtualSnObj*, unsigned)
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVirtualSnObj_Open(TWriteVirtualSnObj*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperatePosesoCmd(unsigned char, POSESO_CMD_TYPE_E, unsigned char*, S_POSESO_Reply*)
</UL>

<P><STRONG><a name="[b9b]"></a>ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, process_income_message.o(i._Z35ProcessActivationDeactivationPosesoPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ProcessActivationDeactivationPoseso(unsigned char*, unsigned char, unsigned char) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_StringToNum(char*, unsigned char, char)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char, unsigned long, bool, S_POSESO_Reply*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentCommMode()
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOG_Set_EnabledPoseso(unsigned char, unsigned char*, char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPosesoRfPoseseChain(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b99]"></a>StopSendEnableModeIfBackToCCSFromDisableMode(s_PosesoPoseseMachineStr*, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, process_income_message.o(i._Z44StopSendEnableModeIfBackToCCSFromDisableModeP24s_PosesoPoseseMachineStrh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StopSendEnableModeIfBackToCCSFromDisableMode(s_PosesoPoseseMachineStr*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosesoRfPoseseChain_exec()
</UL>

<P><STRONG><a name="[acd]"></a>rb_app_GetRSUTableEntryByTarget(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rb_app.o(i._Z31rb_app_GetRSUTableEntryByTargeth))
<BR><BR>[Called By]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_APP_decode_command(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[743]"></a>SendOldSirenCmd(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, siren.o(i._Z15SendOldSirenCmdhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendOldSirenCmd(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char) &rArr; AddRfEventToQ(unsigned char*, unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char, unsigned char) &rArr; SendItemToQ(sEventDrivenQ*, void*, unsigned char, unsigned char) &rArr; PlaceEventInQ(sEventDrivenQ*, t_node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SIREN_read(unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenVersionCheck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirensAlarm_exec()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSirenTest_exec()
</UL>

<P><STRONG><a name="[14e]"></a>tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, tag_reader.o(i._Z14tag_reader_sosPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_perform_duress_actions(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInitDone()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_PANIC_event(U_DEV_TYPE, unsigned char, unsigned char)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetTagOperation()
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_perform_duress_actions(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 474 bytes, Stack size 72 bytes, tag_reader.o(i._Z19tag_reader_AnnexArmPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUI_GetRevisionNumber()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexStartExit(bool)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_tamper()
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>tag_reader_learn_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tag_reader.o(i._Z20tag_reader_learn_tagPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[a0f]"></a>tag_reader_stat_byte()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tag_reader.o(i._Z20tag_reader_stat_bytev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tag_reader_stat_byte()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SEC_ZONE_num_open_alarm()
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_was_alarm()
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTAGSysIndFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_reply_to_star_button(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_no_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[fb]"></a>tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, tag_reader.o(i._Z21tag_reader_arm_systemPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetTagOperation()
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_IsUserArmPermittedByButton(unsigned, unsigned, unsigned char*)
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_perform_special_partition(SECURITY_PARTITION_TYPE_E, bool, unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_adjust_partition_by_user(SECURITY_PARTITION_TYPE_E*, unsigned char)
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getRequestHandler(unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tag_reader.o(i._Z21tag_reader_arm_systemPhjjhS_P13TimerStruct_SS_S1_S1_)
<LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[678]"></a>tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, tag_reader.o(i._Z21tag_reader_send_replyPhhhjjjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_event(E_LOG_EVENT, unsigned char*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_INSTALL_send_msg(unsigned char, A2C_PROC_MESSAGE_E, C_DEV_TYPE_E, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_PROC_RF_DEV_send_msg(unsigned char, unsigned char*, unsigned char, U_DEV_TYPE, unsigned char)
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_reply(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_buttons_not_defined(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AccessOnlyEntry(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_no_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AccessOnlyExit(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_star_button(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos_polling(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[15e]"></a>tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, tag_reader.o(i._Z22tag_reader_AnnexDisarmPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnexDisarm()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_partition_indication(unsigned)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[b08]"></a>tag_reader_build_reply(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, tag_reader.o(i._Z22tag_reader_build_replyPhS_hhjjjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tag_reader_build_reply(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[154]"></a>tag_reader_delayed_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, tag_reader.o(i._Z22tag_reader_delayed_armPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tag_reader_delayed_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getRelevantDelay(unsigned, unsigned)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 1034 bytes, Stack size 96 bytes, tag_reader.o(i._Z22tag_reader_receive_tagPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; AddEntity2RamAndEprom(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*) &rArr; ModifyFields(unsigned short, unsigned short, unsigned char*, unsigned short, unsigned short*, API_CallModifySrc_t) &rArr; WriteFieldID(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) &rArr; WriteFieldIDDefValue(unsigned short, unsigned short, unsigned short) &rArr; WriteFieldIDPtr(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSessionOpen()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddAndFillEntity(unsigned short, unsigned short, unsigned char*, unsigned short*, unsigned short, unsigned char*)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFieldIDSetValue1(unsigned short, unsigned short, unsigned long)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModifyHandling(unsigned short, unsigned short, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_APP_learn_tag(unsigned char*, unsigned char)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldAddress(unsigned short, unsigned short, unsigned short)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetTagOperation()
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getRequestHandler(unsigned char)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerformRequest(const S_TagReaderRequestHandler*, unsigned char*, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> tag_reader.o(i._Z22tag_reader_receive_tagPhjjhS_P13TimerStruct_SS_S1_S1_)
<LI> tag_reader.o(i._Z25tag_reader_PerformRequestPK25S_TagReaderRequestHandlerPhjhS2_P13TimerStruct_SS2_S4_S4_)
<LI> tag_reader.o(i._Z25tag_reader_decode_messagehPhh)
<LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>tag_reader_sos_polling(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, tag_reader.o(i._Z22tag_reader_sos_pollingPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tag_reader_sos_polling(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSosStatus()
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>tag_reader_star_button(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, tag_reader.o(i._Z22tag_reader_star_buttonPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tag_reader_star_button(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_new_protocol_command(unsigned char, unsigned short, unsigned char, unsigned char*, unsigned char, bool)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIREN_send_cmd(E_SIREN_RF_COMMANDS)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_control_panel_GetTagOperation()
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, tag_reader.o(i._Z23tag_reader_PerimeterArmPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tag_reader_PerimeterArm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOR_ALL_DEVS_set_t_bypass(unsigned char, unsigned char)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_arm_checks(SECURITY_PARTITION_TYPE_E, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlasticVersion()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pre_arm_exit(PRE_ARM_EXIT_SCENARIO_E)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_was_alarm()
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAM_DB_num_open_tamper()
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>tag_reader_AccessOnlyExit(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, tag_reader.o(i._Z25tag_reader_AccessOnlyExitPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tag_reader_AccessOnlyExit(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[b4b]"></a>tag_reader_PerformRequest(const S_TagReaderRequestHandler*, unsigned char*, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, tag_reader.o(i._Z25tag_reader_PerformRequestPK25S_TagReaderRequestHandlerPhjhS2_P13TimerStruct_SS2_S4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tag_reader_PerformRequest(const S_TagReaderRequestHandler*, unsigned char*, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[153]"></a>tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, tag_reader.o(i._Z25tag_reader_delayed_disarmPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tag_reader_delayed_disarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldAddress(unsigned short, unsigned short, unsigned short)
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>tag_reader_delayed_no_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, tag_reader.o(i._Z25tag_reader_delayed_no_armPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tag_reader_delayed_no_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[b4a]"></a>tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, tag_reader.o(i._Z25tag_reader_disarm_by_userPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_perform_special_partition(SECURITY_PARTITION_TYPE_E, bool, unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_adjust_partition_by_user(SECURITY_PARTITION_TYPE_E*, unsigned char)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_perform_duress_actions(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[160]"></a>tag_reader_AccessOnlyEntry(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, tag_reader.o(i._Z26tag_reader_AccessOnlyEntryPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tag_reader_AccessOnlyEntry(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, tag_reader.o(i._Z26tag_reader_PerimeterDisarmPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*) &rArr; Take_Device_Video(SEQUENCER_LABEL_E, unsigned char, unsigned char, unsigned char) &rArr; RF_OUTPUT_send_msg(E_ACTION_DEVICE_MODE, unsigned char) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerimeterDisarm(bool)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_handle_controlled_user(unsigned char, unsigned char, U_DEV_TYPE, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarmCancelledMsg(U_DEV_TYPE, unsigned char, unsigned char, unsigned char, unsigned char, S_POSESO_Reply*)
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_partition_indication(unsigned)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[b49]"></a>tag_reader_getRelevantDelay(unsigned, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tag_reader.o(i._Z27tag_reader_getRelevantDelayjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tag_reader_getRelevantDelay(unsigned, unsigned) &rArr; CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS)
</UL>
<BR>[Called By]<UL><LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_delayed_arm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[102]"></a>tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, tag_reader.o(i._Z28tag_reader_activate_doorlockPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet(TimerStruct_S*, unsigned long)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimerExpired(TimerStruct_S*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetZero(TimerStruct_S*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_set_event(SECURITY_EVENT_E, U_DEV_TYPE, unsigned char, SECURITY_PARTITION_TYPE_E, unsigned char, unsigned char)
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_tr_device_activation(unsigned char, DEVICE_ACTION_E, unsigned char, unsigned char*)
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getRequestHandler(unsigned char)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tag_reader.o(i._Z28tag_reader_activate_doorlockPhjjhS_P13TimerStruct_SS_S1_S1_)
<LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[b07]"></a>tag_reader_getRequestHandler(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tag_reader.o(i._Z28tag_reader_getRequestHandlerh))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_decode_message(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_activate_doorlock(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_receive_tag(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[c20]"></a>tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, tag_reader.o(i._Z29tag_reader_build_Rf_Api_replyPhhjjjS_Pi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*) &rArr; tag_reader_getRelevantDelay(unsigned, unsigned) &rArr; CONTROL_PANEL_get_systimer(E_SYSTEM_TIMERS) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_getRelevantDelay(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_new_protocol_command(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_tag_present_timeout_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_tag_present_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_denied_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[159]"></a>tag_reader_misc_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tag_reader.o(i._Z29tag_reader_misc_reply_builderPhS_hhjjjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tag_reader_misc_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>tag_reader_buttons_not_defined(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tag_reader.o(i._Z30tag_reader_buttons_not_definedPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tag_reader_buttons_not_defined(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[c2e]"></a>tag_reader_get_state_LEDS_byte(unsigned)</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tag_reader.o(i._Z30tag_reader_get_state_LEDS_bytej))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tag_reader_get_state_LEDS_byte(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_reply_to_star_button(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[b48]"></a>tag_reader_partition_indication(unsigned)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tag_reader.o(i._Z31tag_reader_partition_indicationj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tag_reader_partition_indication(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_PerimeterDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_AnnexDisarm(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[67b]"></a>tag_reader_perform_duress_actions(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, tag_reader.o(i._Z33tag_reader_perform_duress_actionsPhjjhS_P13TimerStruct_SS_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tag_reader_perform_duress_actions(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*) &rArr; tag_reader_send_reply(unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOICE_verification_window_on(unsigned char)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Device_Detection_Video(RF_SEC_ZONE_TYPE_E, unsigned char, SEQUENCER_LABEL_E, bool, U_VIDEO_FLAGS*, unsigned char)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSME_send_msg3(MSME_MSG_E, CODE_ARGUMENT_U, U_DEV_TYPE, unsigned char)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_sos(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[b04]"></a>tag_reader_adjust_partition_by_user(SECURITY_PARTITION_TYPE_E*, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tag_reader.o(i._Z35tag_reader_adjust_partition_by_userP25SECURITY_PARTITION_TYPE_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tag_reader_adjust_partition_by_user(SECURITY_PARTITION_TYPE_E*, unsigned char) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFieldIDByteValue1(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[158]"></a>tag_reader_req_denied_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, tag_reader.o(i._Z35tag_reader_req_denied_reply_builderPhS_hhjjjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tag_reader_req_denied_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[c55]"></a>tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, tag_reader.o(i._Z36tag_reader_build_new_protocol_statusPhS_hhjjjhiS_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool) &rArr; tag_reader_adjust_partition_by_user(SECURITY_PARTITION_TYPE_E*, unsigned char) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_adjust_partition_by_user(SECURITY_PARTITION_TYPE_E*, unsigned char)
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_reply_to_star_button(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[b06]"></a>tag_reader_perform_special_partition(SECURITY_PARTITION_TYPE_E, bool, unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tag_reader.o(i._Z36tag_reader_perform_special_partition25SECURITY_PARTITION_TYPE_EbPhjjhS0_P13TimerStruct_SS0_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tag_reader_perform_special_partition(SECURITY_PARTITION_TYPE_E, bool, unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_disarm_by_user(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[157]"></a>tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 1016 bytes, Stack size 104 bytes, tag_reader.o(i._Z36tag_reader_req_approve_reply_builderPhS_hhjjjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_partition_type()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexExit()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnnexArm()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perimeter_exit()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPerimeterArm()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoPerimeterArmEnabled()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)
<LI><a href="#[c56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_reply_to_star_button(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>tag_reader_tag_present_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, tag_reader.o(i._Z36tag_reader_tag_present_reply_builderPhS_hhjjjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tag_reader_tag_present_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_status()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[b05]"></a>tag_reader_IsUserArmPermittedByButton(unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, tag_reader.o(i._Z37tag_reader_IsUserArmPermittedByButtonjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tag_reader_IsUserArmPermittedByButton(unsigned, unsigned, unsigned char*) &rArr; USER_get_security_level(unsigned char) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_get_security_level(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_arm_system(unsigned char*, unsigned, unsigned, unsigned char, unsigned char*, TimerStruct_S*, unsigned char*, TimerStruct_S*, TimerStruct_S*)
</UL>

<P><STRONG><a name="[c56]"></a>tag_reader_build_reply_to_star_button(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, tag_reader.o(i._Z37tag_reader_build_reply_to_star_buttonPhS_hhjjjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tag_reader_build_reply_to_star_button(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool) &rArr; tag_reader_adjust_partition_by_user(SECURITY_PARTITION_TYPE_E*, unsigned char) &rArr; GetFieldIDByteValue1(unsigned short, unsigned short) &rArr; GetFieldIDByteValue(unsigned short, unsigned short, unsigned short) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SECURITY_get_state()
<LI><a href="#[c55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_new_protocol_status(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char, int, unsigned char*, bool)
<LI><a href="#[c2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_get_state_LEDS_byte(unsigned)
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_stat_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_req_approve_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[15a]"></a>tag_reader_tag_present_timeout_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, tag_reader.o(i._Z44tag_reader_tag_present_timeout_reply_builderPhS_hhjjjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tag_reader_tag_present_timeout_reply_builder(unsigned char*, unsigned char*, unsigned char, unsigned char, unsigned, unsigned, unsigned, unsigned char*) &rArr; tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E) &rArr; LOG_event(E_LOG_EVENT, unsigned char*) &rArr; LOG_add_event(E_LOG_EVENT, unsigned char*) &rArr; InsertLogEvent(unsigned char*) &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_event_to_log(unsigned char, TAG_READER_LOG_DEBUG_E)
<LI><a href="#[c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_reader_build_Rf_Api_reply(unsigned char*, unsigned char, unsigned, unsigned, unsigned, unsigned char*, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag_reader.o(.constdata)
</UL>
<P><STRONG><a name="[561]"></a>ManageFgPhoto()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, timer.o(i._Z13ManageFgPhotov))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ManageFgPhoto() &rArr; SendVideoRequest(unsigned char) &rArr; GetPicNum() &rArr; EEPROM_Write2(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapFreeBuff(unsigned**)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoRequest(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOperationChecks()
</UL>

<P><STRONG><a name="[1e0]"></a>__sti___7_Timer_c</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.__sti___7_Timer_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___7_Timer_c
</UL>
<BR>[Calls]<UL><LI><a href="#[c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnLineTimeout()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.init_array)
</UL>
<P><STRONG><a name="[ae0]"></a>GetCellPtrFromRequestServerKeyFogTable()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, requestfogserverkey.o(i._Z38GetCellPtrFromRequestServerKeyFogTablev))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerKeyRequest_exec()
</UL>

<P><STRONG><a name="[742]"></a>SaveI2CBuffCopy(S_CyberInfo*, unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cybermachine.o(i._Z15SaveI2CBuffCopyP11S_CyberInfoPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SaveI2CBuffCopy(S_CyberInfo*, unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_HeapAllocBufferInternal(unsigned short, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
</UL>

<P><STRONG><a name="[9a1]"></a>SetCyberMachineActivationModeAndCounters(S_CyberInfo*, E_CYBER_DETECTED_CMD)</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cybermachine.o(i._Z40SetCyberMachineActivationModeAndCountersP11S_CyberInfo20E_CYBER_DETECTED_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetCyberMachineActivationModeAndCounters(S_CyberInfo*, E_CYBER_DETECTED_CMD) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD)
</UL>

<P><STRONG><a name="[8d2]"></a>RefreshPincode(unsigned char, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kpdcommandsparser.o(i._Z14RefreshPincodehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RefreshPincode(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpdCommandsParser()
</UL>

<P><STRONG><a name="[8d1]"></a>SaveReplaceUserTypeAndNumber(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kpdcommandsparser.o(i._Z28SaveReplaceUserTypeAndNumberh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SaveReplaceUserTypeAndNumber(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpdCommandsParser()
</UL>

<P><STRONG><a name="[2b3]"></a>SetTxPower(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queuehandler.o(i._Z10SetTxPowerh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SetTxPower(unsigned char) &rArr; RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char) &rArr; RfDrv_ExcCommand(unsigned short, unsigned short, unsigned char*, unsigned, unsigned, void(*)(OSAL_CyclicBuffer*), unsigned*, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDrv_ExcCommand1(unsigned short, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSyncTxPacket(unsigned char**, unsigned char*, bool*, unsigned char)
</UL>

<P><STRONG><a name="[848]"></a>SendSyncTxPacket(unsigned char**, unsigned char*, bool*, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queuehandler.o(i._Z16SendSyncTxPacketPPhS_Pbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SendSyncTxPacket(unsigned char**, unsigned char*, bool*, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPower(unsigned char)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTxPacket(unsigned char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLastTransmissionFromQueue(unsigned char)
</UL>

<P><STRONG><a name="[3ee]"></a>SendAsk4SCK(unsigned char*)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rfapivseg.o(i._Z11SendAsk4SCKPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendAsk4SCK(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IfNeed2Ask4SCK(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ef]"></a>IfNeed2Ask4SCK(unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfapivseg.o(i._Z14IfNeed2Ask4SCKPh))
<BR><BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAsk4SCK(unsigned char*)
</UL>

<P><STRONG><a name="[c2b]"></a>IsArrayIndexValid(unsigned, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfapivseg.o(i._Z17IsArrayIndexValidjj))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[110]"></a>RFApiVSEG_NULLConfig(unsigned char*, void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfapivseg.o(i._Z20RFApiVSEG_NULLConfigPhPv))
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(i.__sti___11_RFApiVSEG_c)
</UL>
<P><STRONG><a name="[164]"></a>RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, rfapivseg.o(i._Z21RFApiVSEG_CheckForRSUPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = RFApiVSEG_CheckForRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; CheckForSupervisory(unsigned char) &rArr; HandleNewMessage() &rArr; RefreshRxTimeout() &rArr; TIMER_ResetRFresetCounter() &rArr; EEPROM_Write1(unsigned, unsigned char*, unsigned short, unsigned short) &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceBatteryInformation(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMsgLog(unsigned char*)
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcMachineActive()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>RFApiVSEG_ConfigOnCDT(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rfapivseg.o(i._Z21RFApiVSEG_ConfigOnCDTPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = RFApiVSEG_ConfigOnCDT(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBatteryStatus(DEVICE_TYPE, unsigned char, C_DEV_TYPE_E, unsigned char)
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnFailure()
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>RFApiVSEG_RangeConfig(unsigned char*, void*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rfapivseg.o(i._Z21RFApiVSEG_RangeConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFApiVSEG_RangeConfig(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[8e7]"></a>RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 336 bytes, rfapivseg.o(i._Z21RfApiVSEGParseAndSendPhPK26S_RfApiVSEG_BuilderProcessP22S_RFApiVSEG_DeviceInfohhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SecEngMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*)
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeRx(unsigned char*)
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeSecEngMsg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[174]"></a>S_RfApiVSEG_ConstCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rfapivseg.o(i._Z21S_RfApiVSEG_ConstCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction))
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>S_RfApiVSEG_DBTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfapivseg.o(i._Z21S_RfApiVSEG_DBTabCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S_RfApiVSEG_DBTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>RFApiVSEG_CheckForJDRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rfapivseg.o(i._Z23RFApiVSEG_CheckForJDRSUPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = RFApiVSEG_CheckForJDRSU(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; StartRtcMachine(unsigned char*, unsigned char, unsigned) &rArr; CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool) &rArr; LockCfgChanged(unsigned char) &rArr; WriteFieldIDSetValue(unsigned short, unsigned short, unsigned short, unsigned long) &rArr; FillEntityEndPlace(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRsuByteValid(unsigned char)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRtcMachine(unsigned char*, unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[ad6]"></a>RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, rfapivseg.o(i._Z23RFApiVSEG_ReplyMsgBuildPhS_P22S_RFApiVSEG_DeviceInfoPK26S_RfApiVSEG_BuilderProcesshhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_MultiSrcMsgBuilder(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*, unsigned char)
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ApplyCallbacks(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderCallbackList*)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IfNeed2Ask4SCK(unsigned char*)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAsk4SCK(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b71]"></a>RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, rfapivseg.o(i._Z23RFApiVSEG_SendRFMessagePhhhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Old_RfApi_CRC16(void*, int)
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApi_CRC16(void*, int)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNewRepeaterVersion(unsigned char)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandlerStarvationActions()
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueHandlerFinishSending(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*)
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[175]"></a>S_RfApiVSEG_SrcBuffCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfapivseg.o(i._Z23S_RfApiVSEG_SrcBuffCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = S_RfApiVSEG_SrcBuffCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>S_RfApiVSEG_TypeTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfapivseg.o(i._Z23S_RfApiVSEG_TypeTabCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S_RfApiVSEG_TypeTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[b70]"></a>RFApiVSEG_ApplyCallbacks(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderCallbackList*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rfapivseg.o(i._Z24RFApiVSEG_ApplyCallbacksPhS_P22S_RFApiVSEG_DeviceInfoPK31S_RfApiVSEG_BuilderCallbackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RFApiVSEG_ApplyCallbacks(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderCallbackList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SecEngMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*)
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ad7]"></a>RFApiVSEG_SecEngMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rfapivseg.o(i._Z24RFApiVSEG_SecEngMsgBuildPhS_P22S_RFApiVSEG_DeviceInfoPK26S_RfApiVSEG_BuilderProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RFApiVSEG_SecEngMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*) &rArr; IsNeedCyberProcess(unsigned char*) &rArr; CYBER_machine_start(unsigned char*, E_CYBER_DETECTED_CMD) &rArr; SaveI2CBuffCopy(S_CyberInfo*, unsigned char*) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCmd(unsigned char*, bool)
<LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_MultiSrcMsgBuilder(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*, unsigned char)
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ApplyCallbacks(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderCallbackList*)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedCyberProcess(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[41]"></a>RFApiVSEG_HandleInterface(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfapivseg.o(i._Z25RFApiVSEG_HandleInterfacePhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFApiVSEG_HandleInterface(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[b6e]"></a>RFApiVSEG_GetDeviceDBEntry(unsigned char*, const S_RFApiVSEG_DeviceTypeInfo*)</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, rfapivseg.o(i._Z26RFApiVSEG_GetDeviceDBEntryPhPK26S_RFApiVSEG_DeviceTypeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RFApiVSEG_GetDeviceDBEntry(unsigned char*, const S_RFApiVSEG_DeviceTypeInfo*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceData(unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[ad1]"></a>RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*)</STRONG> (Thumb, 148 bytes, Stack size 184 bytes, rfapivseg.o(i._Z26RFApiVSEG_SendDeviceConfigP22S_RFApiVSEG_DeviceInfoPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ConfigOnCDT(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_FullOrPartialConfigMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[e]"></a>RFApiVSEG_WiredModelConfig(unsigned char*, void*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rfapivseg.o(i._Z26RFApiVSEG_WiredModelConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RFApiVSEG_WiredModelConfig(unsigned char*, void*) &rArr; RamRfSec_GetFogWiredContactType(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_GetFogWiredContactType(unsigned char)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamRfSec_GetFogWiredMode(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.data)
</UL>
<P><STRONG><a name="[17b]"></a>S_RfApiVSEG_BuildIdForDomo(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rfapivseg.o(i._Z26S_RfApiVSEG_BuildIdForDomoPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = S_RfApiVSEG_BuildIdForDomo(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>S_RfApiVSEG_GenTypeTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfapivseg.o(i._Z26S_RfApiVSEG_GenTypeTabCopyPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = S_RfApiVSEG_GenTypeTabCopy(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>GetMessageAdditionalActions(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfapivseg.o(i._Z27GetMessageAdditionalActionsPhS_P22S_RFApiVSEG_DeviceInfo))
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[b6d]"></a>RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, rfapivseg.o(i._Z27RFApiVSEG_GetDeviceTypeInfohhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceData(unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendConfigOnOldProtocol(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[170]"></a>RFApiVSEG_VideoParamsConfig(unsigned char*, void*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rfapivseg.o(i._Z27RFApiVSEG_VideoParamsConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RFApiVSEG_VideoParamsConfig(unsigned char*, void*) &rArr; VideoEngine_BuildVidParamsBuffer(unsigned char*, unsigned char, RF_SEC_ZONE_TYPE_E) &rArr; GetVideoEntry(unsigned char, unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGeneralParameters()
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoEngine_BuildVidParamsBuffer(unsigned char*, unsigned char, RF_SEC_ZONE_TYPE_E)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>S_RfApiVSEG_BuildIdByDevice(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, rfapivseg.o(i._Z27S_RfApiVSEG_BuildIdByDevicePhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S_RfApiVSEG_BuildIdByDevice(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>S_RfApiVSEG_CopyIdFromRFMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rfapivseg.o(i._Z27S_RfApiVSEG_CopyIdFromRFMsgPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = S_RfApiVSEG_CopyIdFromRFMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*) &rArr; IsNewRepeaterVersion(unsigned char) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNewRepeaterVersion(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>RFApiVSEG_AddHandshakeSuffix(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfapivseg.o(i._Z28RFApiVSEG_AddHandshakeSuffixPhS_P22S_RFApiVSEG_DeviceInfo))
<BR>[Address Reference Count : 3]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>RFApiVSEG_ArmAwarenessConfig(unsigned char*, void*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rfapivseg.o(i._Z28RFApiVSEG_ArmAwarenessConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFApiVSEG_ArmAwarenessConfig(unsigned char*, void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>RFApiVSEG_GenLedEnableConfig(unsigned char*, void*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rfapivseg.o(i._Z28RFApiVSEG_GenLedEnableConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFApiVSEG_GenLedEnableConfig(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[c4a]"></a>RFApiVSEG_GetTypeEntryFromDB(unsigned char, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rfapivseg.o(i._Z28RFApiVSEG_GetTypeEntryFromDBhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RFApiVSEG_GetTypeEntryFromDB(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[16d]"></a>RFApiVSEG_HandleTagInterface(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfapivseg.o(i._Z28RFApiVSEG_HandleTagInterfacePhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFApiVSEG_HandleTagInterface(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[b6f]"></a>RFApiVSEG_MultiSrcMsgBuilder(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, rfapivseg.o(i._Z28RFApiVSEG_MultiSrcMsgBuilderPhS_P22S_RFApiVSEG_DeviceInfoPK30S_RfApiVSEG_BuilderInstructionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFApiVSEG_MultiSrcMsgBuilder(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderInstruction*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SecEngMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*)
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f]"></a>RFApiVSEG_RelayPOSESOMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfapivseg.o(i._Z28RFApiVSEG_RelayPOSESOMessagePhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFApiVSEG_RelayPOSESOMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>RFApiVSEG_GetRSSIForHandshake(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfapivseg.o(i._Z29RFApiVSEG_GetRSSIForHandshakePhS_P22S_RFApiVSEG_DeviceInfo))
<BR>[Address Reference Count : 3]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>RFApiVSEG_AddMultipurposeField(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfapivseg.o(i._Z30RFApiVSEG_AddMultipurposeFieldPhS_P22S_RFApiVSEG_DeviceInfo))
<BR>[Address Reference Count : 3]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, rfapivseg.o(i._Z30RFApiVSEG_BuildSecEngStatusMsgPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = RFApiVSEG_BuildSecEngStatusMsg(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDeviceNeedReCfg(unsigned char, unsigned char, unsigned char, bool)
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*)
<LI><a href="#[c2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsArrayIndexValid(unsigned, unsigned)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenVersionCheck(unsigned char)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>RFApiVSEG_ClearDeviceUpdateBit(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rfapivseg.o(i._Z30RFApiVSEG_ClearDeviceUpdateBitPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFApiVSEG_ClearDeviceUpdateBit(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; ResetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[c2c]"></a>RFApiVSEG_FindSerialNumberInDB(int, unsigned char*, int)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, rfapivseg.o(i._Z30RFApiVSEG_FindSerialNumberInDBiPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RFApiVSEG_FindSerialNumberInDB(int, unsigned char*, int) &rArr; compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetMultiGenTypeSlaveLearnType(unsigned char*, S_RFApiVSEG_DeviceInfo*)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildMasterLearnPayLoad(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[10c]"></a>RFApiVSEG_GenSensitivityConfig(unsigned char*, void*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rfapivseg.o(i._Z30RFApiVSEG_GenSensitivityConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFApiVSEG_GenSensitivityConfig(unsigned char*, void*) &rArr; get_RF_SEC_ZONE_ENTRY_ptr(int) &rArr; FL_RF_SEC_ZONE_read(unsigned char) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ENTRY_ptr(int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> rfapivseg.o(i._Z33RFApiVSEG_SendConfigOnOldProtocolhhhhhb)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>RFApiVSEG_GenWakeOnRadioConfig(unsigned char*, void*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rfapivseg.o(i._Z30RFApiVSEG_GenWakeOnRadioConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFApiVSEG_GenWakeOnRadioConfig(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rfapivseg.o(i._Z33RFApiVSEG_SendConfigOnOldProtocolhhhhhb)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>RFApiVSEG_StopGetVidCommandRep(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfapivseg.o(i._Z30RFApiVSEG_StopGetVidCommandRepPhS_P22S_RFApiVSEG_DeviceInfo))
<BR>[Address Reference Count : 2]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[c32]"></a>CheckCorrectLearnInInstallation(unsigned char*, bool, bool)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rfapivseg.o(i._Z31CheckCorrectLearnInInstallationPhbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckCorrectLearnInInstallation(unsigned char*, bool, bool) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_Assert(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_BuildMasterLearnPayLoad(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>

<P><STRONG><a name="[43]"></a>RFApiVSEG_CopyRxOpenListDevices(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfapivseg.o(i._Z31RFApiVSEG_CopyRxOpenListDevicesPhS_P22S_RFApiVSEG_DeviceInfo))
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>RFApiVSEG_ErrorMessageCheckCode(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rfapivseg.o(i._Z31RFApiVSEG_ErrorMessageCheckCodePhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFApiVSEG_ErrorMessageCheckCode(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RF_SEC_ZONE_ptr(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>RFApiVSEG_FilterRepeatedPackets(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfapivseg.o(i._Z31RFApiVSEG_FilterRepeatedPacketsPhS_P22S_RFApiVSEG_DeviceInfo))
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>RFApiVSEG_MGLSInputsEnDisConfig(unsigned char*, void*)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rfapivseg.o(i._Z31RFApiVSEG_MGLSInputsEnDisConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFApiVSEG_MGLSInputsEnDisConfig(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>RFApiVSEG_SendAnswer2SKCCommand(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rfapivseg.o(i._Z31RFApiVSEG_SendAnswer2SKCCommandPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFApiVSEG_SendAnswer2SKCCommand(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevIdInRfFgTable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>RFApiVSEG_BITIntervalModelConfig(unsigned char*, void*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfapivseg.o(i._Z32RFApiVSEG_BITIntervalModelConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFApiVSEG_BITIntervalModelConfig(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(i.__sti___11_RFApiVSEG_c)
</UL>
<P><STRONG><a name="[166]"></a>RFApiVSEG_LearnDeviceOnHandshake(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rfapivseg.o(i._Z32RFApiVSEG_LearnDeviceOnHandshakePhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFApiVSEG_LearnDeviceOnHandshake(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[8e4]"></a>S_RfApiVSEG_FindCommandInRfTable(unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, rfapivseg.o(i._Z32S_RfApiVSEG_FindCommandInRfTablehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = S_RfApiVSEG_FindCommandInRfTable(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeRx(unsigned char*)
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeSecEngMsg(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[3c]"></a>RFApiVSEG_BuildMasterLearnPayLoad(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, rfapivseg.o(i._Z33RFApiVSEG_BuildMasterLearnPayLoadPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RFApiVSEG_BuildMasterLearnPayLoad(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_FindSerialNumberInDB(int, unsigned char*, int) &rArr; compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAL_MemCopy(void*, void*, unsigned)
<LI><a href="#[c32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCorrectLearnInInstallation(unsigned char*, bool, bool)
<LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_FindSerialNumberInDB(int, unsigned char*, int)
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SerialNumberCheckInMemoryMap(DEVICE_TYPE, unsigned char*)
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateNewDeviceID(int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>RFApiVSEG_VideoPacketMarkReceived(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rfapivseg.o(i._Z33RFApiVSEG_VideoPacketMarkReceivedPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RFApiVSEG_VideoPacketMarkReceived(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[a48]"></a>RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, rfapivseg.o(i._Z34RFApiVSEG_GetDeviceDataByTypeAndIDhhhP22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RFApiVSEG_GetDeviceDataByTypeAndID(unsigned char, unsigned char, unsigned char, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetGenTypeInfo(unsigned char)
<LI><a href="#[c4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetTypeEntryFromDB(unsigned char, unsigned char)
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetDeviceTypeInfo(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_GetSNMemoryEntry(unsigned char, unsigned char)
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGGetLastRSSI(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeSecEngMsg(unsigned char*, unsigned char)
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEGIsDeviceWOR(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16b]"></a>S_RFApiVSEG_TriggerFrequencyOffset(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rfapivseg.o(i._Z34S_RFApiVSEG_TriggerFrequencyOffsetPhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = S_RFApiVSEG_TriggerFrequencyOffset(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool) &rArr; RfApiVSEGSendMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; RfApiVSEGParseAndSend(unsigned char*, const S_RfApiVSEG_BuilderProcess*, S_RFApiVSEG_DeviceInfo*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_ReplyMsgBuild(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*, const S_RfApiVSEG_BuilderProcess*, unsigned char, unsigned char, unsigned char) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigOrTestDevice(unsigned char, unsigned char, unsigned char, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>RFApiVSEG_GenIRBlockingWindowConfig(unsigned char*, void*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rfapivseg.o(i._Z35RFApiVSEG_GenIRBlockingWindowConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFApiVSEG_GenIRBlockingWindowConfig(unsigned char*, void*) &rArr; ENTRY_read(unsigned short) &rArr; Logical_2_Physical(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTRY_read(unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>RFApiVSEG_FullOrPartialConfigMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, rfapivseg.o(i._Z36RFApiVSEG_FullOrPartialConfigMessagePhS_P22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = RFApiVSEG_FullOrPartialConfigMessage(unsigned char*, unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*) &rArr; RFApiVSEG_SendRFMessage(unsigned char*, unsigned char, unsigned char, unsigned) &rArr; QueueHandlerFinishSending(unsigned char, unsigned char) &rArr; SendTxPacket(unsigned char**) &rArr; SendRfMsg() &rArr; RfDrv_SendPacket(unsigned short, unsigned char*, unsigned short, unsigned, unsigned*, unsigned char, unsigned char, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPirNewRFProtocol(RF_SEC_ZONE_TYPE_E, unsigned char)
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_SendDeviceConfig(S_RFApiVSEG_DeviceInfo*, unsigned char*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCfgParamFromRam(RF_CFG_MODE_E, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.constdata)
</UL>
<P><STRONG><a name="[d]"></a>RFApiVSEG_GenInformationMsgPeriodConfig(unsigned char*, void*)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rfapivseg.o(i._Z39RFApiVSEG_GenInformationMsgPeriodConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFApiVSEG_GenInformationMsgPeriodConfig(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>RFApiVSEG_GenSupervisionMsgPeriodConfig(unsigned char*, void*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rfapivseg.o(i._Z39RFApiVSEG_GenSupervisionMsgPeriodConfigPhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFApiVSEG_GenSupervisionMsgPeriodConfig(unsigned char*, void*)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.constdata)
<LI> rfapivseg.o(.data)
</UL>
<P><STRONG><a name="[8e6]"></a>RFApiVSEG_GetMultiGenTypeSlaveLearnType(unsigned char*, S_RFApiVSEG_DeviceInfo*)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rfapivseg.o(i._Z39RFApiVSEG_GetMultiGenTypeSlaveLearnTypePhP22S_RFApiVSEG_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RFApiVSEG_GetMultiGenTypeSlaveLearnType(unsigned char*, S_RFApiVSEG_DeviceInfo*) &rArr; RFApiVSEG_FindSerialNumberInDB(int, unsigned char*, int) &rArr; compare_str(const unsigned char*, const unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFApiVSEG_FindSerialNumberInDB(int, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfApiVSEGDecodeRx(unsigned char*)
</UL>

<P><STRONG><a name="[1e1]"></a>__sti___11_RFApiVSEG_c</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfapivseg.o(i.__sti___11_RFApiVSEG_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___11_RFApiVSEG_c
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_IsTestApplicationActive()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfapivseg.o(.init_array)
</UL>
<P><STRONG><a name="[945]"></a>IsDefectTr5Version(DEVICE_TYPE, unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, checkdevicetype.o(i._Z18IsDefectTr5Version11DEVICE_TYPEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IsDefectTr5Version(DEVICE_TYPE, unsigned char) &rArr; ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned) &rArr; copy_buffer(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_buffer(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_rf_sec_zone_GetTagReaderMajorVer(unsigned char*, unsigned)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read_device_version(unsigned char, unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RF_SEC_ZONE_read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)
</UL>

<P><STRONG><a name="[92a]"></a>IsSuspectedDeviceApprove(unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, checkdevicetype.o(i._Z24IsSuspectedDeviceApprovehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsSuspectedDeviceApprove(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceIndex(DEVICE_TYPE, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
</UL>

<P><STRONG><a name="[c5a]"></a>IsTagReaderDisarmOrArmCommand(unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, checkdevicetype.o(i._Z29IsTagReaderDisarmOrArmCommandPh))
<BR><BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[929]"></a>IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*)</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, checkdevicetype.o(i._Z45IsSuspectedSequenceDisarmOrArmOrTamperCommand11DEVICE_TYPEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = IsSuspectedSequenceDisarmOrArmOrTamperCommand(DEVICE_TYPE, unsigned char, unsigned char*) &rArr; IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char) &rArr; SaveFrequencyOffsetArray() &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetFreqOffset()
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSpecificCyberModeEnable(E_CYBER_ENABLE_MODE)
<LI><a href="#[c5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceivedTrBackTamperState(unsigned char*)
<LI><a href="#[c5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTagReaderDisarmOrArmCommand(unsigned char*)
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCyberSequenceDeltaThreshold()
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeviceFrequencyValid(DEVICE_TYPE, unsigned char)
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPreviosTamperState(C_DEV_TYPE_E, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMessageNumber()
</UL>

<P><STRONG><a name="[c38]"></a>get_ENTRY_ID_via_SerialNumber(unsigned char*, unsigned char*(*)(unsigned char), unsigned char, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rfseialnumbercheckinmemorymap.o(i._Z29get_ENTRY_ID_via_SerialNumberPhPFS_hEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ENTRY_ID_via_SerialNumber(unsigned char*, unsigned char*(*)(unsigned char), unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SerialNumberCheckInMemoryMap(DEVICE_TYPE, unsigned char*)
</UL>

<P><STRONG><a name="[1e2]"></a>__sti___12_KpdOutStub_c</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kpdoutstub.o(i.__sti___12_KpdOutStub_c))
<BR><BR>[Calls]<UL><LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2AMess::C2AMess(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kpdoutstub.o(.init_array)
</UL>
<P><STRONG><a name="[1e3]"></a>__sti___6_MAIN_C</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.__sti___6_MAIN_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___6_MAIN_C
</UL>
<BR>[Calls]<UL><LI><a href="#[c73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSound::SysSound()
<LI><a href="#[c72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPower::SysPower()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[220]"></a>Next_Pn9</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sigfox_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Next_Pn9
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxTxTestMode
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_frequency
</UL>

<P><STRONG><a name="[226]"></a>change_frequency</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sigfox_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = change_frequency &rArr; sfx_set_nv_mem &rArr; EEPROM_Write(unsigned, unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned*, unsigned short*) &rArr; I2C_ExecuteOperation(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char*, unsigned, unsigned short, unsigned, unsigned, unsigned char, unsigned char, unsigned char*, unsigned*, unsigned short*) &rArr; OSAL_SendMessageToTask(OSAL_Msg*) &rArr; OSAL_SendMessageToTaskGeneral(OSAL_Msg*, unsigned char) &rArr; OSAL_HeapAllocBufferInternal(unsigned short, unsigned) &rArr; OSAL_Assert(unsigned char, unsigned char*, unsigned short) &rArr; OSAL_PortTaskEnterCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_set_nv_mem
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_get_nv_mem
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_change_frequency
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Pn9
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendFrame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxTxTestMode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendOutOfBand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendBit
</UL>

<P><STRONG><a name="[228]"></a>MakeFrame</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, sigfox_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = MakeFrame &rArr; ComputeAES &rArr; sfx_AES_128_cbc_encrypt &rArr; PerformAesCbcEnc(unsigned char*, const unsigned char*, const unsigned char*, unsigned char*, unsigned) &rArr; aes_cbc_encrypt(const unsigned char*, unsigned char*, int, unsigned char*, const aes_ctx*) &rArr; aes_encrypt(const unsigned char*, unsigned char*, const aes_ctx*)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_set_nv_mem
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_malloc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_get_nv_mem
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfx_free
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAES
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendFrame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxTxTestMode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendOutOfBand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SfxSendBit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
